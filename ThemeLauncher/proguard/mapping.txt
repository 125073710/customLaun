android.support.v4.util.ContainerHelpers -> a.a.a.a.a:
    long[] EMPTY_LONGS -> a
    java.lang.Object[] EMPTY_OBJECTS -> b
    int idealLongArraySize(int) -> a
    int binarySearch(long[],int,long) -> a
android.support.v4.util.LongSparseArray -> a.a.a.a.b:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    long[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    android.support.v4.util.LongSparseArray clone() -> c
    java.lang.Object get(long) -> a
    void removeAt(int) -> a
    void gc() -> d
    void put(long,java.lang.Object) -> a
    int size() -> a
    long keyAt(int) -> c
    java.lang.Object valueAt(int) -> b
    void clear() -> b
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
android.support.v4.view.MotionEventCompat -> a.a.a.b.a:
    int getActionMasked(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> a.a.a.b.b:
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> a.a.a.b.c:
android.support.v4.view.ViewCompat -> a.a.a.b.d:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> a
android.support.v4.view.ViewCompat$EclairMr1ViewCompatImpl -> a.a.a.b.e:
android.support.v4.view.ViewCompat$GBViewCompatImpl -> a.a.a.b.f:
android.support.v4.view.ViewCompat$HCViewCompatImpl -> a.a.a.b.g:
    long getFrameTime() -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> a.a.a.b.h:
android.support.v4.view.ViewCompat$JBViewCompatImpl -> a.a.a.b.i:
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> a
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> a.a.a.b.j:
android.support.v4.view.ViewCompat$KitKatViewCompatImpl -> a.a.a.b.k:
android.support.v4.view.ViewCompat$ViewCompatImpl -> a.a.a.b.l:
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> a
    long getFrameTime() -> a
android.support.v4.widget.AutoScrollHelper -> a.a.a.c.a:
    android.support.v4.widget.AutoScrollHelper$1 mScroller$6b0fcb45 -> a
    android.view.animation.Interpolator mEdgeInterpolator -> b
    android.view.View mTarget -> c
    java.lang.Runnable mRunnable -> d
    float[] mRelativeEdges -> e
    float[] mMaximumEdges -> f
    int mEdgeType -> g
    int mActivationDelay -> h
    float[] mRelativeVelocity -> i
    float[] mMinimumVelocity -> j
    float[] mMaximumVelocity -> k
    boolean mAlreadyDelayed -> l
    boolean mNeedsReset -> m
    boolean mNeedsCancel -> n
    boolean mAnimating -> o
    boolean mEnabled -> p
    boolean mExclusive -> q
    int DEFAULT_ACTIVATION_DELAY -> r
    android.support.v4.widget.AutoScrollHelper setEnabled(boolean) -> a
    boolean isEnabled() -> a
    android.support.v4.widget.AutoScrollHelper setExclusive(boolean) -> b
    android.support.v4.widget.AutoScrollHelper setMaximumVelocity(float,float) -> a
    android.support.v4.widget.AutoScrollHelper setEdgeType(int) -> a
    android.support.v4.widget.AutoScrollHelper setActivationDelay(int) -> b
    android.support.v4.widget.AutoScrollHelper setRampUpDuration(int) -> c
    android.support.v4.widget.AutoScrollHelper setRampDownDuration(int) -> d
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean shouldAnimate() -> b
    void requestStop() -> c
    float computeTargetVelocity(int,float,float,float) -> a
    void scrollTargetBy(int,int) -> a
    boolean canTargetScrollVertically(int) -> e
    float constrainEdgeValue(float,float) -> b
    float constrain(float,float,float) -> b
    boolean access$100(android.support.v4.widget.AutoScrollHelper) -> a
    boolean access$200(android.support.v4.widget.AutoScrollHelper) -> b
    boolean access$202(android.support.v4.widget.AutoScrollHelper,boolean) -> a
    android.support.v4.widget.AutoScrollHelper$1 access$300$2e462331(android.support.v4.widget.AutoScrollHelper) -> c
    boolean access$400(android.support.v4.widget.AutoScrollHelper) -> d
    boolean access$102(android.support.v4.widget.AutoScrollHelper,boolean) -> b
    boolean access$500(android.support.v4.widget.AutoScrollHelper) -> e
    boolean access$502(android.support.v4.widget.AutoScrollHelper,boolean) -> c
    void access$600(android.support.v4.widget.AutoScrollHelper) -> f
    android.view.View access$700(android.support.v4.widget.AutoScrollHelper) -> g
    int access$800(int,int,int) -> a
    float access$900(float,float,float) -> a
android.support.v4.widget.AutoScrollHelper$1 -> a.a.a.c.b:
    int mRampUpDuration -> a
    int mRampDownDuration -> b
    float mTargetVelocityX -> c
    float mTargetVelocityY -> d
    long mStartTime -> e
    long mDeltaTime -> f
    int mDeltaX -> g
    int mDeltaY -> h
    long mStopTime -> i
    float mStopValue -> j
    int mEffectiveRampDown -> k
    void setRampUpDuration(int) -> a
    void setRampDownDuration(int) -> b
    void start() -> a
    void requestStop() -> b
    boolean isFinished() -> c
    float getValueAt(long) -> a
    void computeScrollDelta() -> d
    void setTargetVelocity(float,float) -> a
    int getHorizontalDirection() -> e
    int getVerticalDirection() -> f
    int getDeltaX() -> g
    int getDeltaY() -> h
android.support.v4.widget.AutoScrollHelper$ScrollAnimationRunnable -> a.a.a.c.c:
    android.support.v4.widget.AutoScrollHelper this$0 -> a
    void run() -> run
android.util.Pools -> a.b.a:
    java.lang.Object[] mPool -> a
    int mPoolSize -> b
    java.lang.Object acquire() -> a
    boolean release(java.lang.Object) -> a
    android.graphics.Bitmap resizeBitmapByScale(android.graphics.Bitmap,float,boolean) -> a
android.util.Pools$SynchronizedPool -> a.b.b:
    java.lang.Object mLock -> a
    java.lang.Object acquire() -> a
    boolean release(java.lang.Object) -> a
com.android.gallery3d.common.Utils -> com.android.a.a.a:
    long[] sCrcTable -> a
    void assertTrue(boolean) -> a
    int nextPowerOf2(int) -> a
    int prevPowerOf2(int) -> b
    int clamp(int,int,int) -> a
    void closeSilently(java.io.Closeable) -> a
    int ceilLog2(float) -> a
    int floorLog2(float) -> b
com.android.gallery3d.exif.CountedDataInputStream -> com.android.a.b.a:
    int mCount -> a
    byte[] mByteArray -> b
    java.nio.ByteBuffer mByteBuffer -> c
    boolean $assertionsDisabled -> d
    int getReadByteCount() -> a
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    int read() -> read
    long skip(long) -> skip
    void skipTo(long) -> a
    void readOrThrow(byte[],int,int) -> a
    void setByteOrder(java.nio.ByteOrder) -> a
    java.nio.ByteOrder getByteOrder() -> b
    short readShort() -> c
    int readUnsignedShort() -> d
    int readInt() -> e
    long readUnsignedInt() -> f
    java.lang.String readString(int,java.nio.charset.Charset) -> a
com.android.gallery3d.exif.ExifData -> com.android.a.b.b:
    com.android.gallery3d.exif.IfdData[] mIfdDatas -> a
    byte[] mThumbnail -> b
    java.util.ArrayList mStripBytes -> c
    java.nio.ByteOrder mByteOrder -> d
    void setCompressedThumbnail(byte[]) -> a
    void setStripBytes(int,byte[]) -> a
    com.android.gallery3d.exif.IfdData getIfdData(int) -> a
    void addIfdData(com.android.gallery3d.exif.IfdData) -> a
    com.android.gallery3d.exif.ExifTag getTag(short,int) -> a
    boolean equals(java.lang.Object) -> equals
com.android.gallery3d.exif.ExifInterface -> com.android.a.b.c:
    int TAG_IMAGE_WIDTH -> i
    int TAG_IMAGE_LENGTH -> j
    int TAG_BITS_PER_SAMPLE -> k
    int TAG_COMPRESSION -> l
    int TAG_PHOTOMETRIC_INTERPRETATION -> m
    int TAG_IMAGE_DESCRIPTION -> n
    int TAG_MAKE -> o
    int TAG_MODEL -> p
    int TAG_STRIP_OFFSETS -> a
    int TAG_ORIENTATION -> b
    int TAG_SAMPLES_PER_PIXEL -> q
    int TAG_ROWS_PER_STRIP -> r
    int TAG_STRIP_BYTE_COUNTS -> c
    int TAG_X_RESOLUTION -> s
    int TAG_Y_RESOLUTION -> t
    int TAG_PLANAR_CONFIGURATION -> u
    int TAG_RESOLUTION_UNIT -> v
    int TAG_TRANSFER_FUNCTION -> w
    int TAG_SOFTWARE -> x
    int TAG_DATE_TIME -> y
    int TAG_ARTIST -> z
    int TAG_WHITE_POINT -> A
    int TAG_PRIMARY_CHROMATICITIES -> B
    int TAG_Y_CB_CR_COEFFICIENTS -> C
    int TAG_Y_CB_CR_SUB_SAMPLING -> D
    int TAG_Y_CB_CR_POSITIONING -> E
    int TAG_REFERENCE_BLACK_WHITE -> F
    int TAG_COPYRIGHT -> G
    int TAG_EXIF_IFD -> d
    int TAG_GPS_IFD -> e
    int TAG_JPEG_INTERCHANGE_FORMAT -> f
    int TAG_JPEG_INTERCHANGE_FORMAT_LENGTH -> g
    int TAG_EXPOSURE_TIME -> H
    int TAG_F_NUMBER -> I
    int TAG_EXPOSURE_PROGRAM -> J
    int TAG_SPECTRAL_SENSITIVITY -> K
    int TAG_ISO_SPEED_RATINGS -> L
    int TAG_OECF -> M
    int TAG_EXIF_VERSION -> N
    int TAG_DATE_TIME_ORIGINAL -> O
    int TAG_DATE_TIME_DIGITIZED -> P
    int TAG_COMPONENTS_CONFIGURATION -> Q
    int TAG_COMPRESSED_BITS_PER_PIXEL -> R
    int TAG_SHUTTER_SPEED_VALUE -> S
    int TAG_APERTURE_VALUE -> T
    int TAG_BRIGHTNESS_VALUE -> U
    int TAG_EXPOSURE_BIAS_VALUE -> V
    int TAG_MAX_APERTURE_VALUE -> W
    int TAG_SUBJECT_DISTANCE -> X
    int TAG_METERING_MODE -> Y
    int TAG_LIGHT_SOURCE -> Z
    int TAG_FLASH -> aa
    int TAG_FOCAL_LENGTH -> ab
    int TAG_SUBJECT_AREA -> ac
    int TAG_MAKER_NOTE -> ad
    int TAG_USER_COMMENT -> ae
    int TAG_SUB_SEC_TIME -> af
    int TAG_SUB_SEC_TIME_ORIGINAL -> ag
    int TAG_SUB_SEC_TIME_DIGITIZED -> ah
    int TAG_FLASHPIX_VERSION -> ai
    int TAG_COLOR_SPACE -> aj
    int TAG_PIXEL_X_DIMENSION -> ak
    int TAG_PIXEL_Y_DIMENSION -> al
    int TAG_RELATED_SOUND_FILE -> am
    int TAG_INTEROPERABILITY_IFD -> h
    int TAG_FLASH_ENERGY -> an
    int TAG_SPATIAL_FREQUENCY_RESPONSE -> ao
    int TAG_FOCAL_PLANE_X_RESOLUTION -> ap
    int TAG_FOCAL_PLANE_Y_RESOLUTION -> aq
    int TAG_FOCAL_PLANE_RESOLUTION_UNIT -> ar
    int TAG_SUBJECT_LOCATION -> as
    int TAG_EXPOSURE_INDEX -> at
    int TAG_SENSING_METHOD -> au
    int TAG_FILE_SOURCE -> av
    int TAG_SCENE_TYPE -> aw
    int TAG_CFA_PATTERN -> ax
    int TAG_CUSTOM_RENDERED -> ay
    int TAG_EXPOSURE_MODE -> az
    int TAG_WHITE_BALANCE -> aA
    int TAG_DIGITAL_ZOOM_RATIO -> aB
    int TAG_FOCAL_LENGTH_IN_35_MM_FILE -> aC
    int TAG_SCENE_CAPTURE_TYPE -> aD
    int TAG_GAIN_CONTROL -> aE
    int TAG_CONTRAST -> aF
    int TAG_SATURATION -> aG
    int TAG_SHARPNESS -> aH
    int TAG_DEVICE_SETTING_DESCRIPTION -> aI
    int TAG_SUBJECT_DISTANCE_RANGE -> aJ
    int TAG_IMAGE_UNIQUE_ID -> aK
    int TAG_GPS_VERSION_ID -> aL
    int TAG_GPS_LATITUDE_REF -> aM
    int TAG_GPS_LATITUDE -> aN
    int TAG_GPS_LONGITUDE_REF -> aO
    int TAG_GPS_LONGITUDE -> aP
    int TAG_GPS_ALTITUDE_REF -> aQ
    int TAG_GPS_ALTITUDE -> aR
    int TAG_GPS_TIME_STAMP -> aS
    int TAG_GPS_SATTELLITES -> aT
    int TAG_GPS_STATUS -> aU
    int TAG_GPS_MEASURE_MODE -> aV
    int TAG_GPS_DOP -> aW
    int TAG_GPS_SPEED_REF -> aX
    int TAG_GPS_SPEED -> aY
    int TAG_GPS_TRACK_REF -> aZ
    int TAG_GPS_TRACK -> ba
    int TAG_GPS_IMG_DIRECTION_REF -> bb
    int TAG_GPS_IMG_DIRECTION -> bc
    int TAG_GPS_MAP_DATUM -> bd
    int TAG_GPS_DEST_LATITUDE_REF -> be
    int TAG_GPS_DEST_LATITUDE -> bf
    int TAG_GPS_DEST_BEARING_REF -> bg
    int TAG_GPS_DEST_BEARING -> bh
    int TAG_GPS_DEST_DISTANCE_REF -> bi
    int TAG_GPS_DEST_DISTANCE -> bj
    int TAG_GPS_PROCESSING_METHOD -> bk
    int TAG_GPS_AREA_INFORMATION -> bl
    int TAG_GPS_DATE_STAMP -> bm
    int TAG_GPS_DIFFERENTIAL -> bn
    int TAG_INTEROPERABILITY_INDEX -> bo
    java.util.HashSet sOffsetTags -> bp
    java.util.HashSet sBannedDefines -> bq
    com.android.gallery3d.exif.ExifData mData -> br
    java.nio.ByteOrder DEFAULT_BYTE_ORDER -> bs
    java.text.DateFormat mGPSDateStampFormat -> bt
    android.util.SparseIntArray mTagInfo -> bu
    int defineTag(int,short) -> a
    short getTrueTagKey(int) -> a
    void readExif(java.io.InputStream) -> a
    void readExif(java.lang.String) -> a
    java.lang.Integer getTagIntValue(int) -> b
    boolean isOffsetTag(short) -> a
    int getRotationForOrientationValue(short) -> b
    android.util.SparseIntArray getTagInfo() -> a
    boolean isIfdAllowed(int,int) -> a
    int getFlagsFromAllowedIfds(int[]) -> a
com.android.gallery3d.exif.ExifInvalidFormatException -> com.android.a.b.d:
com.android.gallery3d.exif.ExifParser -> com.android.a.b.e:
    java.nio.charset.Charset US_ASCII -> a
    com.android.gallery3d.exif.CountedDataInputStream mTiffStream -> b
    int mOptions -> c
    int mIfdStartOffset -> d
    int mNumOfTagInIfd -> e
    int mIfdType -> f
    com.android.gallery3d.exif.ExifTag mTag -> g
    com.android.gallery3d.exif.ExifParser$ImageEvent mImageEvent -> h
    com.android.gallery3d.exif.ExifTag mStripSizeTag -> i
    com.android.gallery3d.exif.ExifTag mJpegSizeTag -> j
    boolean mNeedToParseOffsetsInCurrentIfd -> k
    boolean mContainExifData -> l
    int mApp1End -> m
    byte[] mDataAboveIfd0 -> n
    int mIfd0Position -> o
    int mTiffStartPosition -> p
    com.android.gallery3d.exif.ExifInterface mInterface -> q
    short TAG_EXIF_IFD -> r
    short TAG_GPS_IFD -> s
    short TAG_INTEROPERABILITY_IFD -> t
    short TAG_JPEG_INTERCHANGE_FORMAT -> u
    short TAG_JPEG_INTERCHANGE_FORMAT_LENGTH -> v
    short TAG_STRIP_OFFSETS -> w
    short TAG_STRIP_BYTE_COUNTS -> x
    java.util.TreeMap mCorrespondingEvent -> y
    boolean isIfdRequested(int) -> a
    boolean isThumbnailRequested() -> h
    com.android.gallery3d.exif.ExifParser parse(java.io.InputStream,com.android.gallery3d.exif.ExifInterface) -> a
    int next() -> a
    void skipRemainingTagsInCurrentIfd() -> i
    boolean needToParseOffsetsInCurrentIfd() -> j
    com.android.gallery3d.exif.ExifTag getTag() -> b
    int getCurrentIfd() -> c
    int getStripIndex() -> d
    int getStripSize() -> e
    int getCompressedImageSize() -> f
    void skipTo(int) -> b
    void registerForTagValue(com.android.gallery3d.exif.ExifTag) -> a
    void registerIfd(int,long) -> a
    void registerUncompressedStrip(int,long) -> b
    com.android.gallery3d.exif.ExifTag readTag() -> k
    void checkOffsetOrImageTag(com.android.gallery3d.exif.ExifTag) -> c
    boolean checkAllowed(int,int) -> a
    void readFullTagValue(com.android.gallery3d.exif.ExifTag) -> b
    boolean seekTiffData(java.io.InputStream) -> a
    int read(byte[]) -> a
    long readUnsignedLong() -> l
    java.nio.ByteOrder getByteOrder() -> g
com.android.gallery3d.exif.ExifParser$ExifTagEvent -> com.android.a.b.f:
    com.android.gallery3d.exif.ExifTag tag -> a
    boolean isRequested -> b
com.android.gallery3d.exif.ExifParser$IfdEvent -> com.android.a.b.g:
    int ifd -> a
    boolean isRequested -> b
com.android.gallery3d.exif.ExifParser$ImageEvent -> com.android.a.b.h:
    int stripIndex -> a
    int type -> b
com.android.gallery3d.exif.ExifReader -> com.android.a.b.i:
    com.android.gallery3d.exif.ExifInterface mInterface -> a
    com.android.gallery3d.exif.ExifData read(java.io.InputStream) -> a
com.android.gallery3d.exif.ExifTag -> com.android.a.b.j:
    java.nio.charset.Charset US_ASCII -> a
    int[] TYPE_TO_SIZE_MAP -> b
    short mTagId -> c
    short mDataType -> d
    boolean mHasDefinedDefaultComponentCount -> e
    int mComponentCountActual -> f
    int mIfd -> g
    java.lang.Object mValue -> h
    int mOffset -> i
    boolean isValidIfd(int) -> a
    boolean isValidType(short) -> a
    int getIfd() -> a
    void setIfd(int) -> b
    short getTagId() -> b
    short getDataType() -> c
    int getDataSize() -> d
    int getComponentCount() -> e
    void forceSetComponentCount(int) -> c
    boolean hasValue() -> f
    boolean setValue(int[]) -> a
    boolean setValue(long[]) -> a
    boolean setValue(java.lang.String) -> a
    boolean setValue(com.android.gallery3d.exif.Rational[]) -> a
    boolean setValue(byte[]) -> a
    int[] getValueAsInts() -> g
    long getValueAt(int) -> d
    int getOffset() -> h
    void setOffset(int) -> e
    void setHasDefinedCount(boolean) -> a
    boolean hasDefinedCount() -> i
    boolean checkBadComponentCount(int) -> f
    java.lang.String convertTypeToString(short) -> b
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.android.gallery3d.exif.IfdData -> com.android.a.b.k:
    int mIfdId -> a
    java.util.Map mExifTags -> b
    int[] sIfds -> c
    int[] getIfds() -> a
    int getId() -> b
    com.android.gallery3d.exif.ExifTag getTag(short) -> a
    com.android.gallery3d.exif.ExifTag setTag(com.android.gallery3d.exif.ExifTag) -> a
    int getTagCount() -> c
    boolean equals(java.lang.Object) -> equals
com.android.gallery3d.exif.Rational -> com.android.a.b.l:
    long mNumerator -> a
    long mDenominator -> b
    long getNumerator() -> a
    long getDenominator() -> b
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.android.gallery3d.glrenderer.BasicTexture -> com.android.a.c.a:
    int mId -> a
    int mState -> b
    int mWidth -> c
    int mHeight -> d
    int mTextureWidth -> e
    int mTextureHeight -> f
    boolean mHasBorder -> g
    com.android.gallery3d.glrenderer.GLCanvas mCanvasRef -> h
    java.util.WeakHashMap sAllTextures -> i
    java.lang.ThreadLocal sInFinalizer -> j
    void setAssociatedCanvas(com.android.gallery3d.glrenderer.GLCanvas) -> a
    void setSize(int,int) -> a
    boolean isFlippedVertically() -> a
    int getId() -> b
    int getWidth() -> c
    int getHeight() -> d
    int getTextureWidth() -> e
    int getTextureHeight() -> f
    boolean hasBorder() -> g
    void setBorder(boolean) -> a
    void draw(com.android.gallery3d.glrenderer.GLCanvas,int,int,int,int) -> a
    boolean onBind(com.android.gallery3d.glrenderer.GLCanvas) -> b
    int getTarget() -> h
    boolean isLoaded() -> i
    void recycle() -> j
    void finalize() -> finalize
    void invalidateAllTextures() -> k
com.android.gallery3d.glrenderer.BitmapTexture -> com.android.a.c.b:
    android.graphics.Bitmap mContentBitmap -> e
    void onFreeBitmap(android.graphics.Bitmap) -> a
    android.graphics.Bitmap onGetBitmap() -> a_
com.android.gallery3d.glrenderer.GLCanvas -> com.android.a.c.c:
    com.android.gallery3d.glrenderer.GLId getGLId() -> a
    void translate(float,float) -> a
    void rotate(float,float,float,float) -> a
    void save(int) -> a
    void restore() -> b
    void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,int,int,int,int) -> a
    void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.RectF,android.graphics.RectF) -> a
    boolean unloadTexture(com.android.gallery3d.glrenderer.BasicTexture) -> a
    void setTextureParameters(com.android.gallery3d.glrenderer.BasicTexture) -> b
    void initializeTextureSize(com.android.gallery3d.glrenderer.BasicTexture,int,int) -> a
    void initializeTexture(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.Bitmap) -> a
    void texSubImage2D(com.android.gallery3d.glrenderer.BasicTexture,int,int,android.graphics.Bitmap,int,int) -> a
com.android.gallery3d.glrenderer.GLES20Canvas -> com.android.a.c.d:
    java.lang.String TAG -> a
    float[] BOX_COORDINATES -> b
    float[] mMatrices -> c
    float[] mAlphas -> d
    com.android.gallery3d.util.IntArray mSaveFlags -> e
    int mCurrentAlphaIndex -> f
    int mCurrentMatrixIndex -> g
    int mWidth -> h
    int mHeight -> i
    float[] mProjectionMatrix -> j
    int mTextureProgram -> k
    int mOesTextureProgram -> l
    int mBoxCoordinates -> m
    com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mDrawParameters -> n
    com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mTextureParameters -> o
    com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mOesTextureParameters -> p
    com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mMeshParameters -> q
    com.android.gallery3d.util.IntArray mUnboundTextures -> r
    int mCountTextureRect -> s
    java.util.ArrayList mTargetTextures -> t
    float[] mTempMatrix -> u
    android.graphics.RectF mTempSourceRect -> v
    android.graphics.RectF mTempTargetRect -> w
    float[] mTempTextureMatrix -> x
    int[] mTempIntArray -> y
    com.android.gallery3d.glrenderer.GLId mGLId -> z
    int assembleProgram(int,int,com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[]) -> a
    int loadShader(int,java.lang.String) -> a
    void setSize(int,int) -> a
    void clearBuffer() -> c
    float getAlpha() -> e
    void translate(float,float) -> a
    void rotate(float,float,float,float) -> a
    void save(int) -> a
    void restore() -> b
    void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,int,int,int,int) -> a
    void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.RectF,android.graphics.RectF) -> a
    void drawTextureRect(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.RectF,android.graphics.RectF) -> b
    void convertCoordinate(android.graphics.RectF,android.graphics.RectF,com.android.gallery3d.glrenderer.BasicTexture) -> a
    boolean unloadTexture(com.android.gallery3d.glrenderer.BasicTexture) -> a
    void setTextureParameters(com.android.gallery3d.glrenderer.BasicTexture) -> b
    void initializeTextureSize(com.android.gallery3d.glrenderer.BasicTexture,int,int) -> a
    void initializeTexture(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.Bitmap) -> a
    void texSubImage2D(com.android.gallery3d.glrenderer.BasicTexture,int,int,android.graphics.Bitmap,int,int) -> a
    void checkError() -> d
    com.android.gallery3d.glrenderer.GLId getGLId() -> a
com.android.gallery3d.glrenderer.GLES20Canvas$AttributeShaderParameter -> com.android.a.c.e:
    void loadHandle(int) -> a
com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter -> com.android.a.c.f:
    int handle -> a
    java.lang.String mName -> b
    void loadHandle(int) -> a
com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter -> com.android.a.c.g:
    void loadHandle(int) -> a
com.android.gallery3d.glrenderer.GLId -> com.android.a.c.h:
    int[] mTempIntArray -> a
    int generateTexture() -> a
    void glGenBuffers(int,int[],int) -> a
com.android.gallery3d.glrenderer.RawTexture -> com.android.a.c.i:
    boolean mOpaque -> e
    boolean isOpaque() -> l
    boolean isFlippedVertically() -> a
    boolean onBind(com.android.gallery3d.glrenderer.GLCanvas) -> b
    int getTarget() -> h
com.android.gallery3d.glrenderer.Texture -> com.android.a.c.j:
    boolean isOpaque() -> l
com.android.gallery3d.glrenderer.UploadedTexture -> com.android.a.c.k:
    java.util.HashMap sBorderLines -> e
    com.android.gallery3d.glrenderer.UploadedTexture$BorderKey sBorderKey -> f
    boolean mContentValid -> g
    boolean mOpaque -> h
    boolean mThrottled -> i
    android.graphics.Bitmap mBitmap -> j
    int mBorder -> k
    android.graphics.Bitmap getBorderLine(boolean,android.graphics.Bitmap$Config,int) -> a
    android.graphics.Bitmap getBitmap() -> o
    void freeBitmap() -> p
    int getWidth() -> c
    int getHeight() -> d
    android.graphics.Bitmap onGetBitmap() -> a_
    void onFreeBitmap(android.graphics.Bitmap) -> a
    void invalidateContent() -> m
    boolean isContentValid() -> n
    void updateContent(com.android.gallery3d.glrenderer.GLCanvas) -> c
    boolean onBind(com.android.gallery3d.glrenderer.GLCanvas) -> b
    int getTarget() -> h
    boolean isOpaque() -> l
    void recycle() -> j
com.android.gallery3d.glrenderer.UploadedTexture$BorderKey -> com.android.a.c.l:
    boolean vertical -> a
    android.graphics.Bitmap$Config config -> b
    int length -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    com.android.gallery3d.glrenderer.UploadedTexture$BorderKey clone() -> a
    java.lang.Object clone() -> clone
com.android.gallery3d.util.IntArray -> com.android.a.d.a:
    int[] mData -> a
    int mSize -> b
    void add(int) -> a
    int removeLast() -> a
com.android.launcher3.AccessibleTabView -> com.android.launcher3.AccessibleTabView:
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
com.android.launcher3.Alarm -> com.android.launcher3.a:
    long mAlarmTriggerTime -> a
    boolean mWaitingForCallback -> b
    android.os.Handler mHandler -> c
    com.android.launcher3.OnAlarmListener mAlarmListener -> d
    boolean mAlarmPending -> e
    void setOnAlarmListener(com.android.launcher3.OnAlarmListener) -> a
    void setAlarm(long) -> a
    void cancelAlarm() -> a
    void run() -> run
    boolean alarmPending() -> b
com.android.launcher3.AllAppsList -> com.android.launcher3.b:
    java.util.ArrayList data -> a
    java.util.ArrayList added -> b
    java.util.ArrayList removed -> c
    java.util.ArrayList modified -> d
    com.android.launcher3.IconCache mIconCache -> e
    com.android.launcher3.AppFilter mAppFilter -> f
    void add(com.android.launcher3.AppInfo) -> a
    void addPackage(android.content.Context,java.lang.String) -> a
    void removePackage(java.lang.String) -> a
    void updatePackage(android.content.Context,java.lang.String) -> b
    java.util.List findActivitiesForPackage(android.content.Context,java.lang.String) -> c
    android.widget.TabHost findTabHostParent(android.view.View) -> a
    boolean handleAppsCustomizeTabKeyEvent(android.view.View,int,android.view.KeyEvent) -> a
    android.view.ViewGroup getAppsCustomizePage(android.view.ViewGroup,int) -> a
    boolean handleAppsCustomizeKeyEvent(android.view.View,int,android.view.KeyEvent) -> b
    boolean handleTabKeyEvent(com.android.launcher3.AccessibleTabView,int,android.view.KeyEvent) -> a
    boolean handleHotseatButtonKeyEvent$420dd8cf(android.view.View,int,android.view.KeyEvent) -> c
    com.android.launcher3.ShortcutAndWidgetContainer getCellLayoutChildrenForIndex(android.view.ViewGroup,int) -> b
    java.util.ArrayList getCellLayoutChildrenSortedSpatially(com.android.launcher3.CellLayout,android.view.ViewGroup) -> a
    android.view.View findIndexOfIcon(java.util.ArrayList,int,int) -> a
    android.view.View getIconInDirection(com.android.launcher3.CellLayout,android.view.ViewGroup,int,int) -> a
    android.view.View getIconInDirection(com.android.launcher3.CellLayout,android.view.ViewGroup,android.view.View,int) -> a
    android.view.View getClosestIconOnLine(com.android.launcher3.CellLayout,android.view.ViewGroup,android.view.View,int) -> b
    boolean handleIconKeyEvent(android.view.View,int,android.view.KeyEvent) -> d
    boolean handleFolderKeyEvent(android.view.View,int,android.view.KeyEvent) -> e
com.android.launcher3.AppFilter -> com.android.launcher3.c:
    boolean shouldShowApp$6026f3a2() -> a
    com.android.launcher3.AppFilter loadByName(java.lang.String) -> a
com.android.launcher3.AppInfo -> com.android.launcher3.d:
    android.content.Intent intent -> a
    android.graphics.Bitmap iconBitmap -> b
    long firstInstallTime -> c
    android.content.ComponentName componentName -> d
    int flags -> e
    android.content.Intent getIntent() -> a
    int initFlags(android.content.pm.PackageInfo) -> a
    java.lang.String toString() -> toString
    void dumpApplicationInfoList(java.lang.String,java.lang.String,java.util.ArrayList) -> a
    com.android.launcher3.ShortcutInfo makeShortcut() -> b
com.android.launcher3.AppWidgetResizeFrame -> com.android.launcher3.e:
    com.android.launcher3.LauncherAppWidgetHostView mWidgetView -> a
    com.android.launcher3.CellLayout mCellLayout -> b
    com.android.launcher3.DragLayer mDragLayer -> c
    android.widget.ImageView mLeftHandle -> d
    android.widget.ImageView mRightHandle -> e
    android.widget.ImageView mTopHandle -> f
    android.widget.ImageView mBottomHandle -> g
    boolean mLeftBorderActive -> h
    boolean mRightBorderActive -> i
    boolean mTopBorderActive -> j
    boolean mBottomBorderActive -> k
    int mWidgetPaddingLeft -> l
    int mWidgetPaddingRight -> m
    int mWidgetPaddingTop -> n
    int mWidgetPaddingBottom -> o
    int mBaselineWidth -> p
    int mBaselineHeight -> q
    int mBaselineX -> r
    int mBaselineY -> s
    int mResizeMode -> t
    int mRunningHInc -> u
    int mRunningVInc -> v
    int mMinHSpan -> w
    int mMinVSpan -> x
    int mDeltaX -> y
    int mDeltaY -> z
    int mDeltaXAddOn -> A
    int mDeltaYAddOn -> B
    int mBackgroundPadding -> C
    int mTouchTargetWidth -> D
    int mTopTouchRegionAdjustment -> E
    int mBottomTouchRegionAdjustment -> F
    int[] mDirectionVector -> G
    int[] mLastDirectionVector -> H
    int[] mTmpPt -> I
    android.graphics.Rect mTmpRect -> J
    com.android.launcher3.Launcher mLauncher -> K
    boolean beginResizeIfPointInRegion(int,int) -> a
    void visualizeResizeForDelta(int,int) -> b
    void resizeWidgetIfNeeded(boolean) -> b
    void updateWidgetSizeRanges(android.appwidget.AppWidgetHostView,com.android.launcher3.Launcher,int,int) -> a
    android.graphics.Rect getWidgetSizeRanges(com.android.launcher3.Launcher,int,int,android.graphics.Rect) -> a
    void commitResize() -> a
    void onTouchUp() -> b
    void snapToWidget(boolean) -> a
com.android.launcher3.AppWidgetResizeFrame$1 -> com.android.launcher3.f:
    com.android.launcher3.AppWidgetResizeFrame this$0 -> a
    void run() -> run
com.android.launcher3.AppWidgetResizeFrame$2 -> com.android.launcher3.g:
    com.android.launcher3.AppWidgetResizeFrame this$0 -> a
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.android.launcher3.AppsCustomizeAsyncTask -> com.android.launcher3.h:
    int page -> a
    int threadPriority -> b
    void setThreadPriority(int) -> a
    void syncThreadPriority() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.android.launcher3.AppsCustomizeCellLayout -> com.android.launcher3.i:
    void removeAllViewsOnPage() -> a
    int getPageChildCount() -> b
    void resetChildrenOnKeyListeners() -> c
com.android.launcher3.AppsCustomizePagedView -> com.android.launcher3.AppsCustomizePagedView:
    com.android.launcher3.AppsCustomizePagedView$ContentType mContentType -> R
    com.android.launcher3.Launcher mLauncher -> S
    com.android.launcher3.DragController mDragController -> T
    android.view.LayoutInflater mLayoutInflater -> U
    android.content.pm.PackageManager mPackageManager -> V
    int mSaveInstanceStateItemIndex -> W
    com.android.launcher3.PagedViewIcon mPressedIcon -> aa
    java.util.ArrayList mApps -> ab
    java.util.ArrayList mWidgets -> ac
    boolean mHasShownAllAppsCling -> ad
    int mClingFocusedX -> ae
    int mClingFocusedY -> af
    android.graphics.Canvas mCanvas -> ag
    com.android.launcher3.IconCache mIconCache -> ah
    int mContentWidth -> ai
    int mContentHeight -> aj
    int mWidgetCountX -> ak
    int mWidgetCountY -> al
    int mWidgetWidthGap -> am
    int mWidgetHeightGap -> an
    com.android.launcher3.PagedViewCellLayout mWidgetSpacingLayout -> ao
    int mNumAppsPages -> ap
    int mNumWidgetPages -> aq
    com.android.launcher3.Workspace$ZInterpolator mZInterpolator -> ar
    float CAMERA_DISTANCE -> as
    float TRANSITION_SCALE_FACTOR -> at
    float TRANSITION_PIVOT -> au
    float TRANSITION_MAX_ROTATION -> av
    android.view.animation.AccelerateInterpolator mAlphaInterpolator -> aw
    android.view.animation.DecelerateInterpolator mLeftScreenAlphaInterpolator -> ax
    boolean DISABLE_ALL_APPS -> a
    java.util.ArrayList mRunningTasks -> b
    java.lang.Runnable mInflateWidgetRunnable -> ay
    java.lang.Runnable mBindWidgetRunnable -> az
    int mWidgetCleanupState -> c
    int mWidgetLoadingId -> d
    com.android.launcher3.PendingAddWidgetInfo mCreateWidgetInfo -> aA
    boolean mDraggingWidget -> aB
    android.widget.Toast mWidgetInstructionToast -> aC
    boolean mInTransition -> aD
    java.util.ArrayList mDeferredSyncWidgetPageItems -> aE
    java.util.ArrayList mDeferredPrepareLoadWidgetPreviewsTasks -> aF
    android.graphics.Rect mTmpRect -> aG
    com.android.launcher3.WidgetPreviewLoader mWidgetPreviewLoader -> e
    boolean mInBulkBind -> aH
    boolean mNeedToUpdatePageCountsAndInvalidateData -> aI
    void init() -> a
    void onFinishInflate() -> onFinishInflate
    int getSaveInstanceStateIndex() -> b
    void restorePageForIndex(int) -> a
    void updatePageCounts() -> V
    void showAllAppsCling() -> c
    void onMeasure(int,int) -> onMeasure
    void onPackagesUpdated(java.util.ArrayList) -> a
    void setBulkBind(boolean) -> a
    void updatePageCountsAndInvalidateData() -> W
    void onClick(android.view.View) -> onClick
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    void determineDraggingStart(android.view.MotionEvent) -> a
    void onShortPress(android.view.View) -> a
    void cleanupWidgetPreloading(boolean) -> b
    void cleanUpShortPress$3c7ec8c3() -> d
    boolean beginDragging(android.view.View) -> b
    void endDragging(android.view.View,boolean,boolean) -> a
    android.view.View getContent() -> e
    void onLauncherTransitionPrepare(com.android.launcher3.Launcher,boolean,boolean) -> a
    void onLauncherTransitionStart$f0a0f3a(com.android.launcher3.Launcher,boolean) -> a
    void onLauncherTransitionStep$29c633c6(float) -> a
    void onLauncherTransitionEnd(com.android.launcher3.Launcher,boolean,boolean) -> b
    void onDropCompleted(android.view.View,com.android.launcher3.DropTarget$DragObject,boolean,boolean) -> a
    void onFlingToDeleteCompleted() -> f
    void onDetachedFromWindow() -> onDetachedFromWindow
    void clearAllWidgetPages() -> g
    void cancelAllTasks() -> X
    void setContentType(com.android.launcher3.AppsCustomizePagedView$ContentType) -> a
    com.android.launcher3.AppsCustomizePagedView$ContentType getContentType() -> h
    void snapToPage(int,int,int) -> a_
    void setVisibilityOnChildren(android.view.ViewGroup,int) -> a
    void syncAppsPageItems$2563266(int) -> r
    int getWidgetPageLoadPriority(int) -> s
    int getThreadPriorityForPage(int) -> t
    void onSyncWidgetPageItems(com.android.launcher3.AsyncTaskPageData) -> a
    void syncPages() -> i
    void syncPageItems(int,boolean) -> a
    android.view.View getPageAt(int) -> b
    int indexToPage(int) -> c
    void screenScrolled(int) -> d
    void enableHwLayersOnVisiblePages() -> Y
    void overScroll(float) -> b
    int getPageContentWidth() -> j
    void onPageEndMoving() -> k
    void setup(com.android.launcher3.Launcher,com.android.launcher3.DragController) -> a
    void setApps(java.util.ArrayList) -> b
    void addAppsWithoutInvalidate(java.util.ArrayList) -> f
    void addApps(java.util.ArrayList) -> c
    void removeAppsWithoutInvalidate(java.util.ArrayList) -> g
    void removeApps(java.util.ArrayList) -> d
    void updateApps(java.util.ArrayList) -> e
    void reset() -> l
    com.android.launcher3.AppsCustomizeTabHost getTabHost() -> Z
    void dumpState() -> m
    void surrender() -> n
    void iconPressed(com.android.launcher3.PagedViewIcon) -> a
    void resetDrawableState() -> o
    int getAssociatedLowerPageBound(int) -> e
    int getAssociatedUpperPageBound(int) -> f
    java.lang.String getCurrentPageDescription() -> p
    com.android.launcher3.Launcher access$0(com.android.launcher3.AppsCustomizePagedView) -> a
    void access$1(com.android.launcher3.AppsCustomizePagedView,com.android.launcher3.AppsCustomizeAsyncTask,com.android.launcher3.AsyncTaskPageData) -> a
    void access$2(com.android.launcher3.AppsCustomizePagedView,com.android.launcher3.AsyncTaskPageData) -> a
    com.android.launcher3.PagedViewCellLayout access$3(com.android.launcher3.AppsCustomizePagedView) -> b
    boolean access$4(com.android.launcher3.AppsCustomizePagedView) -> c
    java.util.ArrayList access$5(com.android.launcher3.AppsCustomizePagedView) -> d
    int access$6(com.android.launcher3.AppsCustomizePagedView) -> e
    void access$7(com.android.launcher3.AppsCustomizePagedView,int,java.util.ArrayList,int,int,int) -> a
com.android.launcher3.AppsCustomizePagedView$1 -> com.android.launcher3.j:
    com.android.launcher3.AppsCustomizePagedView this$0 -> a
    void run() -> run
com.android.launcher3.AppsCustomizePagedView$2 -> com.android.launcher3.k:
    com.android.launcher3.AppsCustomizePagedView this$0 -> a
    android.os.Bundle val$options -> b
    com.android.launcher3.PendingAddWidgetInfo val$info -> c
    void run() -> run
com.android.launcher3.AppsCustomizePagedView$3 -> com.android.launcher3.l:
    com.android.launcher3.AppsCustomizePagedView this$0 -> a
    android.appwidget.AppWidgetProviderInfo val$pInfo -> b
    com.android.launcher3.PendingAddWidgetInfo val$info -> c
    void run() -> run
com.android.launcher3.AppsCustomizePagedView$4 -> com.android.launcher3.m:
    com.android.launcher3.AppsCustomizePagedView this$0 -> a
    void run() -> run
com.android.launcher3.AppsCustomizePagedView$5 -> com.android.launcher3.n:
    com.android.launcher3.AppsCustomizePagedView this$0 -> a
    int val$sleepMs -> b
    void run(com.android.launcher3.AppsCustomizeAsyncTask,com.android.launcher3.AsyncTaskPageData) -> a
com.android.launcher3.AppsCustomizePagedView$6 -> com.android.launcher3.o:
    com.android.launcher3.AppsCustomizePagedView this$0 -> a
    void run(com.android.launcher3.AppsCustomizeAsyncTask,com.android.launcher3.AsyncTaskPageData) -> a
com.android.launcher3.AppsCustomizePagedView$7 -> com.android.launcher3.p:
    com.android.launcher3.AppsCustomizePagedView this$0 -> a
    int val$cellWidth -> b
    int val$cellHeight -> c
    com.android.launcher3.PagedViewGridLayout val$layout -> d
    boolean val$immediate -> e
    int val$page -> f
    java.util.ArrayList val$items -> g
    void run() -> run
com.android.launcher3.AppsCustomizePagedView$ContentType -> com.android.launcher3.q:
    com.android.launcher3.AppsCustomizePagedView$ContentType Applications -> a
    com.android.launcher3.AppsCustomizePagedView$ContentType Widgets -> b
com.android.launcher3.AppsCustomizeTabHost -> com.android.launcher3.AppsCustomizeTabHost:
    android.view.LayoutInflater mLayoutInflater -> a
    android.view.ViewGroup mTabs -> b
    android.view.ViewGroup mTabsContainer -> c
    com.android.launcher3.AppsCustomizePagedView mAppsCustomizePane -> d
    android.widget.FrameLayout mAnimationBuffer -> e
    android.widget.LinearLayout mContent -> f
    boolean mInTransition -> g
    boolean mTransitioningToWorkspace -> h
    boolean mResetAfterTransition -> i
    java.lang.Runnable mRelayoutAndMakeVisible -> j
    android.graphics.Rect mInsets -> k
    void setContentTypeImmediate(com.android.launcher3.AppsCustomizePagedView$ContentType) -> a
    void setInsets(android.graphics.Rect) -> a_
    void onFinishInflate() -> onFinishInflate
    void onMeasure(int,int) -> onMeasure
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onTabChangedEnd(com.android.launcher3.AppsCustomizePagedView$ContentType) -> d
    void onTabChanged(java.lang.String) -> onTabChanged
    void setCurrentTabFromContent(com.android.launcher3.AppsCustomizePagedView$ContentType) -> b
    com.android.launcher3.AppsCustomizePagedView$ContentType getContentTypeForTabTag(java.lang.String) -> a
    java.lang.String getTabTagForContentType(com.android.launcher3.AppsCustomizePagedView$ContentType) -> c
    int getDescendantFocusability() -> getDescendantFocusability
    void reset() -> a
    android.view.View getContent() -> e
    void onLauncherTransitionPrepare(com.android.launcher3.Launcher,boolean,boolean) -> a
    void onLauncherTransitionStart$f0a0f3a(com.android.launcher3.Launcher,boolean) -> a
    void onLauncherTransitionStep$29c633c6(float) -> a
    void onLauncherTransitionEnd(com.android.launcher3.Launcher,boolean,boolean) -> b
    void setVisibilityOfSiblingsWithLowerZOrder(int) -> a
    void onWindowVisible() -> b
    void onTrimMemory() -> c
    boolean isTransitioning() -> d
    android.view.ViewGroup access$0(com.android.launcher3.AppsCustomizeTabHost) -> a
    android.view.ViewGroup access$1(com.android.launcher3.AppsCustomizeTabHost) -> b
    com.android.launcher3.AppsCustomizePagedView access$2(com.android.launcher3.AppsCustomizeTabHost) -> c
    void access$3(com.android.launcher3.AppsCustomizeTabHost) -> d
    android.widget.FrameLayout access$4(com.android.launcher3.AppsCustomizeTabHost) -> e
    void access$5(com.android.launcher3.AppsCustomizeTabHost) -> f
    void access$6(com.android.launcher3.AppsCustomizeTabHost,com.android.launcher3.AppsCustomizePagedView$ContentType) -> a
com.android.launcher3.AppsCustomizeTabHost$1 -> com.android.launcher3.r:
    com.android.launcher3.AppsCustomizeTabHost this$0 -> a
    void run() -> run
com.android.launcher3.AppsCustomizeTabHost$2 -> com.android.launcher3.s:
    com.android.launcher3.AppsCustomizePagedView val$appsCustomizePane -> a
    android.view.View createTabContent(java.lang.String) -> createTabContent
com.android.launcher3.AppsCustomizeTabHost$3 -> com.android.launcher3.t:
    com.android.launcher3.AppsCustomizeTabHost this$0 -> a
    com.android.launcher3.AppsCustomizePagedView$ContentType val$type -> b
    int val$duration -> c
    void run() -> run
    com.android.launcher3.AppsCustomizeTabHost access$0(com.android.launcher3.AppsCustomizeTabHost$3) -> a
com.android.launcher3.AppsCustomizeTabHost$3$1 -> com.android.launcher3.u:
    com.android.launcher3.AppsCustomizeTabHost$3 this$1 -> a
    void clearAnimationBuffer() -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
com.android.launcher3.AppsCustomizeTabHost$3$2 -> com.android.launcher3.v:
    com.android.launcher3.AppsCustomizeTabHost$3 this$1 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.AppsCustomizeTabKeyEventListener -> com.android.launcher3.w:
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
com.android.launcher3.AsyncTaskCallback -> com.android.launcher3.x:
    void run(com.android.launcher3.AppsCustomizeAsyncTask,com.android.launcher3.AsyncTaskPageData) -> a
com.android.launcher3.AsyncTaskPageData -> com.android.launcher3.y:
    int page -> a
    java.util.ArrayList items -> b
    java.util.ArrayList generatedImages -> c
    com.android.launcher3.AsyncTaskCallback doInBackgroundCallback -> d
    com.android.launcher3.AsyncTaskCallback postExecuteCallback -> e
    com.android.launcher3.WidgetPreviewLoader widgetPreviewLoader -> f
    void cleanup(boolean) -> a
com.android.launcher3.AsyncTaskPageData$Type -> com.android.launcher3.z:
    com.android.launcher3.AsyncTaskPageData$Type LoadWidgetPreviewData -> a
com.android.launcher3.BitmapCache -> com.android.launcher3.A:
    java.lang.Object initialValue() -> a
com.android.launcher3.BitmapFactoryOptionsCache -> com.android.launcher3.B:
    java.lang.Object initialValue() -> a
com.android.launcher3.BubbleTextView -> com.android.launcher3.BubbleTextView:
    int mPrevAlpha -> a
    com.android.launcher3.HolographicOutlineHelper mOutlineHelper -> b
    android.graphics.Canvas mTempCanvas -> c
    android.graphics.Rect mTempRect -> d
    boolean mDidInvalidateForPressedState -> e
    android.graphics.Bitmap mPressedOrFocusedBackground -> f
    int mFocusedOutlineColor -> g
    int mFocusedGlowColor -> h
    int mPressedOutlineColor -> i
    int mPressedGlowColor -> j
    int mTextColor -> k
    boolean mShadowsEnabled -> l
    boolean mBackgroundSizeChanged -> m
    android.graphics.drawable.Drawable mBackground -> n
    boolean mStayPressed -> o
    com.android.launcher3.CheckLongPressHelper mLongPressHelper -> p
    void onFinishInflate() -> onFinishInflate
    void init() -> d
    void applyFromShortcutInfo(com.android.launcher3.ShortcutInfo,com.android.launcher3.IconCache) -> a
    boolean setFrame(int,int,int,int) -> setFrame
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void setTag(java.lang.Object) -> setTag
    void drawableStateChanged() -> drawableStateChanged
    android.graphics.Bitmap createGlowingOutline(android.graphics.Canvas,int,int) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setStayPressed(boolean) -> a
    void setCellLayoutPressedOrFocusedIcon() -> e
    void clearPressedOrFocusedBackground() -> a
    android.graphics.Bitmap getPressedOrFocusedBackground() -> b
    int getPressedOrFocusedBackgroundPadding() -> c
    void draw(android.graphics.Canvas) -> draw
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setTextColor(int) -> setTextColor
    void setShadowsEnabled(boolean) -> b
    void setTextVisibility(boolean) -> c
    boolean onSetAlpha(int) -> onSetAlpha
    void cancelLongPress() -> cancelLongPress
com.android.launcher3.ButtonDropTarget -> com.android.launcher3.C:
    int mTransitionDuration -> a
    com.android.launcher3.Launcher mLauncher -> b
    int mBottomDragPadding -> f
    com.android.launcher3.SearchDropTargetBar mSearchDropTargetBar -> c
    boolean mActive -> d
    int mHoverColor -> e
    void setLauncher(com.android.launcher3.Launcher) -> a
    boolean acceptDrop(com.android.launcher3.DropTarget$DragObject) -> a
    void setSearchDropTargetBar(com.android.launcher3.SearchDropTargetBar) -> a
    android.graphics.drawable.Drawable getCurrentDrawable() -> a
    void onDrop(com.android.launcher3.DropTarget$DragObject) -> b
    void onFlingToDelete$3d9b6c68(com.android.launcher3.DropTarget$DragObject,android.graphics.PointF) -> a
    void onDragEnter(com.android.launcher3.DropTarget$DragObject) -> c
    void onDragOver(com.android.launcher3.DropTarget$DragObject) -> d
    void onDragExit(com.android.launcher3.DropTarget$DragObject) -> e
    void onDragStart$355bc73c(com.android.launcher3.DragSource,java.lang.Object) -> a
    boolean isDropEnabled() -> b
    void onDragEnd() -> c
    void getHitRectRelativeToDragLayer(android.graphics.Rect) -> a
    android.graphics.Rect getIconRect(int,int,int,int) -> a
com.android.launcher3.CanvasCache -> com.android.launcher3.D:
    java.lang.Object initialValue() -> a
com.android.launcher3.CellLayout -> com.android.launcher3.CellLayout:
    com.android.launcher3.Launcher mLauncher -> a
    int mCellWidth -> b
    int mCellHeight -> c
    int mFixedCellWidth -> d
    int mFixedCellHeight -> e
    int mCountX -> f
    int mCountY -> g
    int mOriginalWidthGap -> h
    int mOriginalHeightGap -> i
    int mWidthGap -> j
    int mHeightGap -> k
    int mMaxGap -> l
    boolean mScrollingTransformsDirty -> m
    android.graphics.Rect mRect -> n
    com.android.launcher3.CellLayout$CellInfo mCellInfo -> o
    int[] mTmpXY -> p
    int[] mTmpPoint -> q
    int[] mTempLocation -> r
    boolean[][] mOccupied -> s
    boolean[][] mTmpOccupied -> t
    boolean mLastDownOnOccupiedCell -> u
    android.view.View$OnTouchListener mInterceptTouchListener -> v
    java.util.ArrayList mFolderOuterRings -> w
    int[] mFolderLeaveBehindCell -> x
    float FOREGROUND_ALPHA_DAMPER -> y
    int mForegroundAlpha -> z
    float mBackgroundAlpha -> A
    float mBackgroundAlphaMultiplier -> B
    android.graphics.drawable.Drawable mNormalBackground -> C
    android.graphics.drawable.Drawable mActiveGlowBackground -> D
    android.graphics.drawable.Drawable mOverScrollForegroundDrawable -> E
    android.graphics.drawable.Drawable mOverScrollLeft -> F
    android.graphics.drawable.Drawable mOverScrollRight -> G
    android.graphics.Rect mBackgroundRect -> H
    android.graphics.Rect mForegroundRect -> I
    int mForegroundPadding -> J
    int mFixedWidth -> K
    int mFixedHeight -> L
    boolean mIsDragOverlapping -> M
    boolean mUseActiveGlowBackground -> N
    android.graphics.Rect[] mDragOutlines -> O
    float[] mDragOutlineAlphas -> P
    com.android.launcher3.InterruptibleInOutAnimator[] mDragOutlineAnims -> Q
    int mDragOutlineCurrent -> R
    android.graphics.Paint mDragOutlinePaint -> S
    com.android.launcher3.BubbleTextView mPressedOrFocusedIcon -> T
    java.util.HashMap mReorderAnimators -> U
    java.util.HashMap mShakeAnimators -> V
    boolean mItemPlacementDirty -> W
    int[] mDragCell -> aa
    boolean mDragging -> ab
    android.animation.TimeInterpolator mEaseOutInterpolator -> ac
    com.android.launcher3.ShortcutAndWidgetContainer mShortcutsAndWidgets -> ad
    boolean mIsHotseat -> ae
    float mHotseatScale -> af
    float mReorderHintAnimationMagnitude -> ag
    java.util.ArrayList mIntersectingViews -> ah
    android.graphics.Rect mOccupiedRect -> ai
    int[] mDirectionVector -> aj
    int[] mPreviousReorderDirection -> ak
    com.android.launcher3.DropTarget$DragEnforcer mDragEnforcer -> al
    android.graphics.Rect mTempRect -> am
    android.graphics.Paint sPaint -> an
    java.util.Stack mTempRectStack -> ao
    void enableHardwareLayer(boolean) -> a
    void buildHardwareLayer() -> d
    float getChildrenScale() -> e
    void setCellDimensions(int,int) -> a
    void setGridSize(int,int) -> b
    void setInvertIfRtl(boolean) -> b
    void invalidateBubbleTextView(com.android.launcher3.BubbleTextView) -> b
    void setOverScrollAmount(float,boolean) -> a
    void setPressedOrFocusedIcon(com.android.launcher3.BubbleTextView) -> a
    void setIsDragOverlapping(boolean) -> c
    boolean getIsDragOverlapping() -> f
    void setOverscrollTransformsDirty(boolean) -> d
    void resetOverscrollTransforms() -> g
    void onDraw(android.graphics.Canvas) -> onDraw
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void showFolderAccept(com.android.launcher3.FolderIcon$FolderRingAnimator) -> a
    void hideFolderAccept(com.android.launcher3.FolderIcon$FolderRingAnimator) -> b
    void setFolderLeaveBehindCell(int,int) -> c
    void clearFolderLeaveBehind() -> h
    boolean shouldDelayChildPressedState() -> shouldDelayChildPressedState
    void restoreInstanceState(android.util.SparseArray) -> a
    void cancelLongPress() -> cancelLongPress
    void setOnInterceptTouchListener(android.view.View$OnTouchListener) -> a
    int getCountX() -> i
    int getCountY() -> j
    void setIsHotseat(boolean) -> e
    boolean addViewToCellLayout(android.view.View,int,int,com.android.launcher3.CellLayout$LayoutParams,boolean) -> a
    void removeAllViews() -> removeAllViews
    void removeAllViewsInLayout() -> removeAllViewsInLayout
    void removeView(android.view.View) -> removeView
    void removeViewAt(int) -> removeViewAt
    void removeViewInLayout(android.view.View) -> removeViewInLayout
    void removeViews(int,int) -> removeViews
    void removeViewsInLayout(int,int) -> removeViewsInLayout
    void onAttachedToWindow() -> onAttachedToWindow
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void cellToPoint(int,int,int[]) -> b
    void cellToCenterPoint(int,int,int[]) -> c
    void regionToCenterPoint(int,int,int,int,int[]) -> a
    void regionToRect(int,int,int,int,android.graphics.Rect) -> b
    float getDistanceFromCell(float,float,int[]) -> a
    int getCellWidth() -> k
    int getCellHeight() -> l
    int getWidthGap() -> m
    int getHeightGap() -> n
    void setFixedSize(int,int) -> d
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void setChildrenDrawingCacheEnabled(boolean) -> setChildrenDrawingCacheEnabled
    void setChildrenDrawnWithCacheEnabled(boolean) -> setChildrenDrawnWithCacheEnabled
    float getBackgroundAlpha() -> getBackgroundAlpha
    void setBackgroundAlphaMultiplier(float) -> a
    void setBackgroundAlpha(float) -> setBackgroundAlpha
    void setShortcutAndWidgetAlpha(float) -> b
    com.android.launcher3.ShortcutAndWidgetContainer getShortcutsAndWidgets() -> o
    android.view.View getChildAt(int,int) -> e
    boolean animateChildToPosition(android.view.View,int,int,int,int,boolean,boolean) -> a
    void visualizeDropLocation$73629433(android.view.View,android.graphics.Bitmap,int,int,int,int,boolean,android.graphics.Point,android.graphics.Rect) -> a
    void clearDragOutlines() -> p
    int[] findNearestVacantArea(int,int,int,int,int[]) -> b
    int[] findNearestVacantArea(int,int,int,int,int,int,int[],int[]) -> a
    int[] findNearestArea(int,int,int,int,android.view.View,boolean,int[]) -> a
    void recycleTempRects(java.util.Stack) -> a
    int[] findNearestArea(int,int,int,int,int,int,android.view.View,boolean,int[],int[],boolean[][]) -> a
    int[] findNearestArea(int,int,int,int,int[],boolean[][],boolean[][],int[]) -> a
    boolean addViewToTempLocation(android.view.View,android.graphics.Rect,int[],com.android.launcher3.CellLayout$ItemConfiguration) -> a
    boolean pushViewsToTempLocation(java.util.ArrayList,android.graphics.Rect,int[],android.view.View,com.android.launcher3.CellLayout$ItemConfiguration) -> a
    boolean addViewsToTempLocation$42c365de(java.util.ArrayList,android.graphics.Rect,int[],com.android.launcher3.CellLayout$ItemConfiguration) -> a
    void markCellsForRect(android.graphics.Rect,boolean[][],boolean) -> a
    boolean attemptPushInDirection(java.util.ArrayList,android.graphics.Rect,int[],android.view.View,com.android.launcher3.CellLayout$ItemConfiguration) -> b
    void computeDirectionVector(float,float,int[]) -> b
    com.android.launcher3.CellLayout$ItemConfiguration simpleSwap(int,int,int,int,int,int,int[],android.view.View,boolean,com.android.launcher3.CellLayout$ItemConfiguration) -> a
    void copyCurrentStateToSolution(com.android.launcher3.CellLayout$ItemConfiguration,boolean) -> a
    void copySolutionToTempState(com.android.launcher3.CellLayout$ItemConfiguration,android.view.View) -> a
    void animateItemsToSolution(com.android.launcher3.CellLayout$ItemConfiguration,android.view.View,boolean) -> a
    void beginOrAdjustHintAnimations$678e8020(com.android.launcher3.CellLayout$ItemConfiguration,android.view.View) -> b
    void completeAndClearReorderHintAnimations() -> a
    void commitTempPlacement() -> b
    void setUseTempCoords(boolean) -> f
    com.android.launcher3.CellLayout$ItemConfiguration findConfigurationNoShuffle$2d72d4a7(int,int,int,int,int,int,com.android.launcher3.CellLayout$ItemConfiguration) -> a
    void prepareChildForDrag(android.view.View) -> a
    void getViewsIntersectingRegion(int,int,int,int,android.view.View,android.graphics.Rect,java.util.ArrayList) -> a
    boolean isNearestDropLocationOccupied(int,int,int,int,android.view.View,int[]) -> a
    void revertTempState() -> q
    boolean createAreaForResize(int,int,int,int,android.view.View,int[],boolean) -> a
    int[] createArea(int,int,int,int,int,int,android.view.View,int[],int[],int) -> a
    int[] findNearestVacantArea(int,int,int,int,int,int,android.view.View,int[],int[]) -> a
    int[] findNearestArea(int,int,int,int,int[]) -> c
    boolean findCellForSpan(int[],int,int) -> a
    boolean findCellForSpanThatIntersects(int[],int,int,int,int) -> a
    boolean findCellForSpanThatIntersectsIgnoring(int[],int,int,int,int,android.view.View,boolean[][]) -> a
    void onDragEnter() -> r
    void onDragExit() -> s
    void onDropChild(android.view.View) -> b
    void cellToRect(int,int,int,int,android.graphics.Rect) -> a
    int[] rectToCell(int,int,int[]) -> a
    void calculateSpans(com.android.launcher3.ItemInfo) -> a
    boolean getVacantCell(int[],int,int) -> b
    boolean findVacantCell(int[],int,int,int,int,boolean[][]) -> a
    void clearOccupiedCells() -> c
    void markCellsAsOccupiedForView(android.view.View) -> c
    void markCellsAsOccupiedForView(android.view.View,boolean[][]) -> a
    void markCellsAsUnoccupiedForView(android.view.View) -> d
    void markCellsAsUnoccupiedForView(android.view.View,boolean[][]) -> b
    void markCellsForView(int,int,int,int,boolean[][],boolean) -> a
    int getDesiredWidth() -> t
    int getDesiredHeight() -> u
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean lastDownOnOccupiedCell() -> v
    java.lang.Object getTag() -> getTag
    int access$1(com.android.launcher3.CellLayout) -> a
    int access$2(com.android.launcher3.CellLayout) -> b
    int[] access$3(com.android.launcher3.CellLayout) -> c
    float access$4(com.android.launcher3.CellLayout) -> d
    java.util.HashMap access$5(com.android.launcher3.CellLayout) -> e
    float[] access$6(com.android.launcher3.CellLayout) -> f
    android.graphics.Rect[] access$7(com.android.launcher3.CellLayout) -> g
    java.util.HashMap access$8(com.android.launcher3.CellLayout) -> h
com.android.launcher3.CellLayout$1 -> com.android.launcher3.E:
    com.android.launcher3.CellLayout this$0 -> a
    com.android.launcher3.InterruptibleInOutAnimator val$anim -> b
    int val$thisIndex -> c
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.android.launcher3.CellLayout$2 -> com.android.launcher3.F:
    com.android.launcher3.InterruptibleInOutAnimator val$anim -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.CellLayout$3 -> com.android.launcher3.G:
    com.android.launcher3.CellLayout$LayoutParams val$lp -> a
    int val$oldX -> b
    int val$newX -> c
    int val$oldY -> d
    int val$newY -> e
    android.view.View val$child -> f
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.android.launcher3.CellLayout$4 -> com.android.launcher3.H:
    boolean cancelled -> a
    com.android.launcher3.CellLayout this$0 -> b
    com.android.launcher3.CellLayout$LayoutParams val$lp -> c
    android.view.View val$child -> d
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
com.android.launcher3.CellLayout$CellAndSpan -> com.android.launcher3.I:
    int x -> a
    int y -> b
    int spanX -> c
    int spanY -> d
    void copy(com.android.launcher3.CellLayout$CellAndSpan) -> a
    java.lang.String toString() -> toString
com.android.launcher3.CellLayout$CellInfo -> com.android.launcher3.J:
    android.view.View cell -> a
    int cellX -> b
    int cellY -> c
    int spanX -> d
    int spanY -> e
    long screenId -> f
    java.lang.String toString() -> toString
com.android.launcher3.CellLayout$ItemConfiguration -> com.android.launcher3.K:
    java.util.HashMap map -> a
    java.util.HashMap savedMap -> h
    java.util.ArrayList sortedViews -> b
    boolean isSolution -> c
    int dragViewX -> d
    int dragViewY -> e
    int dragViewSpanX -> f
    int dragViewSpanY -> g
    com.android.launcher3.CellLayout this$0 -> i
    void save() -> a
    void restore() -> b
    void add(android.view.View,com.android.launcher3.CellLayout$CellAndSpan) -> a
    int area() -> c
com.android.launcher3.CellLayout$LayoutParams -> com.android.launcher3.CellLayout$LayoutParams:
    int cellX -> a
    int cellY -> b
    int tmpCellX -> c
    int tmpCellY -> d
    boolean useTmpCoords -> e
    int cellHSpan -> f
    int cellVSpan -> g
    boolean isLockedToGrid -> h
    boolean isFullscreen -> i
    boolean canReorder -> j
    int x -> k
    int y -> l
    boolean dropped -> m
    void setup(int,int,int,int,boolean,int) -> a
    java.lang.String toString() -> toString
    void setWidth(int) -> setWidth
    int getWidth() -> getWidth
    void setHeight(int) -> setHeight
    int getHeight() -> getHeight
    void setX(int) -> setX
    int getX() -> getX
    void setY(int) -> setY
    int getY() -> getY
com.android.launcher3.CellLayout$ReorderHintAnimation -> com.android.launcher3.L:
    android.view.View child -> a
    float finalDeltaX -> b
    float finalDeltaY -> c
    float initDeltaX -> d
    float initDeltaY -> e
    float finalScale -> f
    float initScale -> g
    android.animation.Animator a -> i
    com.android.launcher3.CellLayout this$0 -> h
    void animate() -> a
    void completeAnimationImmediately() -> b
    void access$0(com.android.launcher3.CellLayout$ReorderHintAnimation) -> a
com.android.launcher3.CellLayout$ReorderHintAnimation$1 -> com.android.launcher3.M:
    com.android.launcher3.CellLayout$ReorderHintAnimation this$1 -> a
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.android.launcher3.CellLayout$ReorderHintAnimation$2 -> com.android.launcher3.N:
    com.android.launcher3.CellLayout$ReorderHintAnimation this$1 -> a
    void onAnimationRepeat(android.animation.Animator) -> onAnimationRepeat
com.android.launcher3.CellLayout$ViewCluster -> com.android.launcher3.O:
    java.util.ArrayList views -> a
    com.android.launcher3.CellLayout$ItemConfiguration config -> b
    android.graphics.Rect boundingRect -> l
    int[] leftEdge -> c
    int[] rightEdge -> d
    int[] topEdge -> e
    int[] bottomEdge -> f
    boolean leftEdgeDirty -> g
    boolean rightEdgeDirty -> h
    boolean topEdgeDirty -> i
    boolean bottomEdgeDirty -> j
    boolean boundingRectDirty -> m
    com.android.launcher3.CellLayout$ViewCluster$PositionComparator comparator -> k
    com.android.launcher3.CellLayout this$0 -> n
    void resetEdges() -> a
    void computeEdge(int,int[]) -> a
    android.graphics.Rect getBoundingRect() -> b
com.android.launcher3.CellLayout$ViewCluster$PositionComparator -> com.android.launcher3.P:
    int whichEdge -> a
    com.android.launcher3.CellLayout$ViewCluster this$1 -> b
    int compare(java.lang.Object,java.lang.Object) -> compare
com.android.launcher3.CheckLongPressHelper -> com.android.launcher3.Q:
    android.view.View mView -> a
    boolean mHasPerformedLongPress -> b
    com.android.launcher3.CheckLongPressHelper$CheckForLongPress mPendingCheckForLongPress -> c
    void postCheckForLongPress() -> a
    void cancelLongPress() -> b
    boolean hasPerformedLongPress() -> c
    android.view.View access$0(com.android.launcher3.CheckLongPressHelper) -> a
    boolean access$1(com.android.launcher3.CheckLongPressHelper) -> b
    void access$2(com.android.launcher3.CheckLongPressHelper,boolean) -> a
com.android.launcher3.CheckLongPressHelper$CheckForLongPress -> com.android.launcher3.R:
    com.android.launcher3.CheckLongPressHelper this$0 -> a
    void run() -> run
com.android.launcher3.CheckableFrameLayout -> com.android.launcher3.CheckableFrameLayout:
    int[] CHECKED_STATE_SET -> a
    boolean mChecked -> b
    boolean isChecked() -> isChecked
    void setChecked(boolean) -> setChecked
    void toggle() -> toggle
    int[] onCreateDrawableState(int) -> onCreateDrawableState
com.android.launcher3.Cling -> com.android.launcher3.Cling:
    java.lang.String FIRST_RUN_PORTRAIT -> a
    java.lang.String FIRST_RUN_LANDSCAPE -> b
    java.lang.String WORKSPACE_PORTRAIT -> c
    java.lang.String WORKSPACE_LANDSCAPE -> d
    java.lang.String WORKSPACE_LARGE -> e
    java.lang.String WORKSPACE_CUSTOM -> f
    java.lang.String FOLDER_PORTRAIT -> g
    java.lang.String FOLDER_LANDSCAPE -> h
    java.lang.String FOLDER_LARGE -> i
    float FIRST_RUN_CIRCLE_BUFFER_DPS -> j
    float WORKSPACE_INNER_CIRCLE_RADIUS_DPS -> k
    float WORKSPACE_OUTER_CIRCLE_RADIUS_DPS -> l
    float WORKSPACE_CIRCLE_Y_OFFSET_DPS -> m
    com.android.launcher3.Launcher mLauncher -> n
    boolean mIsInitialized -> o
    java.lang.String mDrawIdentifier -> p
    android.graphics.drawable.Drawable mBackground -> q
    int[] mTouchDownPt -> r
    android.graphics.drawable.Drawable mFocusedHotseatApp -> s
    android.content.ComponentName mFocusedHotseatAppComponent -> t
    android.graphics.Rect mFocusedHotseatAppBounds -> u
    android.graphics.Paint mErasePaint -> v
    android.graphics.Paint mBubblePaint -> w
    android.graphics.Paint mDotPaint -> x
    android.view.View mScrimView -> y
    int mBackgroundColor -> z
    android.graphics.Rect mInsets -> A
    void init(com.android.launcher3.Launcher,android.view.View) -> a
    void setFocusedHotseatApp(int,int,android.content.ComponentName,java.lang.String,java.lang.String) -> a
    void show(boolean,int) -> a
    void hide(int,java.lang.Runnable) -> a
    void cleanup() -> a
    void bringScrimToFront() -> b
    void setInsets(android.graphics.Rect) -> a_
    java.lang.String getDrawIdentifier() -> c
    android.view.View focusSearch(int) -> focusSearch
    android.view.View focusSearch(android.view.View,int) -> focusSearch
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void onClick(android.view.View) -> onClick
    boolean onLongClick(android.view.View) -> onLongClick
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    android.view.View access$0(com.android.launcher3.Cling) -> a
com.android.launcher3.Cling$1 -> com.android.launcher3.S:
    com.android.launcher3.Cling this$0 -> a
    void run() -> run
com.android.launcher3.Cling$2 -> com.android.launcher3.T:
    com.android.launcher3.Cling this$0 -> a
    java.lang.Runnable val$postCb -> b
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.Cling$3 -> com.android.launcher3.U:
    com.android.launcher3.Cling this$0 -> a
    java.lang.Runnable val$postCb -> b
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.Cling$4 -> com.android.launcher3.V:
    com.android.launcher3.Cling this$0 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.CropView -> com.android.launcher3.CropView:
    android.view.ScaleGestureDetector mScaleGestureDetector -> c
    long mTouchDownTime -> d
    float mFirstX -> e
    float mFirstY -> f
    float mLastX -> g
    float mLastY -> h
    float mCenterX -> i
    float mCenterY -> j
    float mMinScale -> k
    boolean mTouchEnabled -> l
    android.graphics.RectF mTempEdges -> m
    float[] mTempPoint -> n
    float[] mTempCoef -> o
    float[] mTempAdjustment -> p
    float[] mTempImageDims -> q
    float[] mTempRendererCenter -> r
    com.android.launcher3.CropView$TouchCallback mTouchCallback -> s
    android.graphics.Matrix mRotateMatrix -> t
    android.graphics.Matrix mInverseRotateMatrix -> u
    float[] getImageDims() -> e
    void getEdgesHelper(android.graphics.RectF) -> a
    int getImageRotation() -> a
    android.graphics.RectF getCrop() -> b
    android.graphics.Point getSourceDimensions() -> c
    void setTileSource(com.android.photos.views.TiledImageRenderer$TileSource,java.lang.Runnable) -> a
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void setScale(float) -> a
    void updateMinScale(int,int,com.android.photos.views.TiledImageRenderer$TileSource,boolean) -> a
    boolean onScaleBegin(android.view.ScaleGestureDetector) -> onScaleBegin
    boolean onScale(android.view.ScaleGestureDetector) -> onScale
    void onScaleEnd(android.view.ScaleGestureDetector) -> onScaleEnd
    void moveToLeft() -> d
    void updateCenter() -> f
    void setTouchEnabled(boolean) -> a
    void setTouchCallback(com.android.launcher3.CropView$TouchCallback) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.android.launcher3.CropView$1 -> com.android.launcher3.W:
    com.android.launcher3.CropView this$0 -> a
    void onGlobalLayout() -> onGlobalLayout
com.android.launcher3.CropView$TouchCallback -> com.android.launcher3.X:
    void onTouchDown() -> a
    void onTap() -> b
    void onTouchUp() -> c
com.android.launcher3.DeferredHandler -> com.android.launcher3.Y:
    java.util.LinkedList mQueue -> a
    android.os.MessageQueue mMessageQueue -> b
    com.android.launcher3.DeferredHandler$Impl mHandler -> c
    void post(java.lang.Runnable) -> a
    void post(java.lang.Runnable,int) -> a
    void cancelAllRunnablesOfType(int) -> a
    void flush() -> a
    void scheduleNextLocked() -> b
    java.util.LinkedList access$0(com.android.launcher3.DeferredHandler) -> a
com.android.launcher3.DeferredHandler$IdleRunnable -> com.android.launcher3.Z:
    java.lang.Runnable mRunnable -> a
    void run() -> run
com.android.launcher3.DeferredHandler$Impl -> com.android.launcher3.aa:
    com.android.launcher3.DeferredHandler this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    boolean queueIdle() -> queueIdle
com.android.launcher3.DeleteDropTarget -> com.android.launcher3.DeleteDropTarget:
    int DELETE_ANIMATION_DURATION -> f
    int FLING_DELETE_ANIMATION_DURATION -> g
    float FLING_TO_DELETE_FRICTION -> h
    int MODE_FLING_DELETE_TO_TRASH -> i
    int MODE_FLING_DELETE_ALONG_VECTOR -> j
    int mFlingDeleteMode -> k
    android.content.res.ColorStateList mOriginalTextColor -> l
    android.graphics.drawable.TransitionDrawable mUninstallDrawable -> m
    android.graphics.drawable.TransitionDrawable mRemoveDrawable -> n
    android.graphics.drawable.TransitionDrawable mCurrentDrawable -> o
    boolean mWaitingForUninstall -> p
    void onFinishInflate() -> onFinishInflate
    boolean isAllAppsApplication(com.android.launcher3.DragSource,java.lang.Object) -> b
    boolean isDragSourceWorkspaceOrFolder(com.android.launcher3.DropTarget$DragObject) -> f
    boolean isWorkspaceOrFolderApplication(com.android.launcher3.DropTarget$DragObject) -> g
    void resetHoverColor() -> d
    boolean acceptDrop(com.android.launcher3.DropTarget$DragObject) -> a
    boolean willAcceptDrop(java.lang.Object) -> a
    void onDragStart$355bc73c(com.android.launcher3.DragSource,java.lang.Object) -> a
    void onDragEnd() -> c
    void onDragEnter(com.android.launcher3.DropTarget$DragObject) -> c
    void onDragExit(com.android.launcher3.DropTarget$DragObject) -> e
    void deferCompleteDropIfUninstalling(com.android.launcher3.DropTarget$DragObject) -> h
    boolean isUninstallFromWorkspace(com.android.launcher3.DropTarget$DragObject) -> i
    void onDrop(com.android.launcher3.DropTarget$DragObject) -> b
    void onFlingToDelete$3d9b6c68(com.android.launcher3.DropTarget$DragObject,android.graphics.PointF) -> a
    void access$0(com.android.launcher3.DeleteDropTarget,com.android.launcher3.DropTarget$DragObject) -> a
    void access$1(com.android.launcher3.DeleteDropTarget,boolean) -> a
com.android.launcher3.DeleteDropTarget$1 -> com.android.launcher3.ab:
    com.android.launcher3.DeleteDropTarget this$0 -> a
    com.android.launcher3.DropTarget$DragObject val$d -> b
    void run() -> run
com.android.launcher3.DeleteDropTarget$2 -> com.android.launcher3.ac:
    com.android.launcher3.DeleteDropTarget this$0 -> a
    android.content.ComponentName val$componentName -> b
    com.android.launcher3.DragSource val$dragSource -> c
    void run() -> run
com.android.launcher3.DeleteDropTarget$3 -> com.android.launcher3.ad:
    com.android.launcher3.LauncherAppWidgetHost val$appWidgetHost -> a
    com.android.launcher3.LauncherAppWidgetInfo val$launcherAppWidgetInfo -> b
    void run() -> run
com.android.launcher3.DeleteDropTarget$4 -> com.android.launcher3.ae:
    float getInterpolation(float) -> getInterpolation
com.android.launcher3.DeleteDropTarget$5 -> com.android.launcher3.af:
    com.android.launcher3.DragLayer val$dragLayer -> a
    android.animation.TimeInterpolator val$scaleAlphaInterpolator -> b
    float val$x1 -> c
    float val$x2 -> d
    float val$x3 -> e
    float val$y1 -> f
    float val$y2 -> g
    float val$y3 -> h
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.android.launcher3.DeleteDropTarget$6 -> com.android.launcher3.ag:
    int mCount -> a
    float mOffset -> b
    long val$startTime -> c
    int val$duration -> d
    float getInterpolation(float) -> getInterpolation
com.android.launcher3.DeleteDropTarget$7 -> com.android.launcher3.ah:
    com.android.launcher3.DeleteDropTarget this$0 -> a
    boolean val$isAllApps -> b
    com.android.launcher3.DropTarget$DragObject val$d -> c
    void run() -> run
com.android.launcher3.DeleteDropTarget$FlingAlongVectorAnimatorUpdateListener -> com.android.launcher3.ai:
    com.android.launcher3.DragLayer mDragLayer -> a
    android.graphics.PointF mVelocity -> b
    android.graphics.Rect mFrom -> c
    long mPrevTime -> d
    boolean mHasOffsetForScale -> e
    float mFriction -> f
    android.animation.TimeInterpolator mAlphaInterpolator -> g
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.android.launcher3.DeviceProfile -> com.android.launcher3.aj:
    float minWidthDps -> a
    float minHeightDps -> b
    float numRows -> c
    float numColumns -> d
    float iconSize -> e
    float iconTextSize -> f
    float numHotseatIcons -> g
    float hotseatIconSize -> h
    boolean isLandscape -> i
    boolean isTablet -> j
    boolean isLargeTablet -> k
    boolean transposeLayoutWithOrientation -> G
    int desiredWorkspaceLeftRightMarginPx -> H
    int edgeMarginPx -> l
    android.graphics.Rect defaultWidgetPadding -> I
    int widthPx -> m
    int heightPx -> n
    int availableWidthPx -> o
    int availableHeightPx -> p
    int iconSizePx -> q
    int iconTextSizePx -> J
    int cellWidthPx -> r
    int cellHeightPx -> s
    int folderBackgroundOffset -> t
    int folderIconSizePx -> u
    int folderCellWidthPx -> v
    int folderCellHeightPx -> w
    int hotseatCellWidthPx -> x
    int hotseatCellHeightPx -> y
    int hotseatIconSizePx -> z
    int hotseatBarHeightPx -> A
    int hotseatAllAppsRank -> B
    int allAppsNumRows -> C
    int allAppsNumCols -> D
    int searchBarSpaceWidthPx -> E
    int searchBarSpaceMaxWidthPx -> K
    int searchBarSpaceHeightPx -> F
    int searchBarHeightPx -> L
    int pageIndicatorHeightPx -> M
    void updateFromConfiguration(android.content.res.Resources,int,int,int,int) -> a
    float dist(android.graphics.PointF,android.graphics.PointF) -> a
    float weight(android.graphics.PointF,android.graphics.PointF,float) -> a
    float invDistWeightedInterpolate(float,float,java.util.ArrayList) -> a
    android.graphics.Rect getWorkspacePadding(int) -> a
    boolean isVerticalBarLayout() -> a
    float access$0(com.android.launcher3.DeviceProfile,android.graphics.PointF,android.graphics.PointF) -> a
com.android.launcher3.DeviceProfile$1 -> com.android.launcher3.ak:
    com.android.launcher3.DeviceProfile this$0 -> a
    android.graphics.PointF val$xy -> b
    int compare(java.lang.Object,java.lang.Object) -> compare
com.android.launcher3.DeviceProfileQuery -> com.android.launcher3.al:
    float value -> a
    android.graphics.PointF dimens -> b
com.android.launcher3.DragController -> com.android.launcher3.am:
    int DRAG_ACTION_MOVE -> a
    int DRAG_ACTION_COPY -> b
    com.android.launcher3.Launcher mLauncher -> c
    android.os.Handler mHandler -> d
    android.graphics.Rect mRectTemp -> e
    int[] mCoordinatesTemp -> f
    boolean mDragging -> g
    int mMotionDownX -> h
    int mMotionDownY -> i
    int mScrollZone -> j
    com.android.launcher3.DropTarget$DragObject mDragObject -> k
    java.util.ArrayList mDropTargets -> l
    java.util.ArrayList mListeners -> m
    com.android.launcher3.DropTarget mFlingToDeleteDropTarget -> n
    android.os.IBinder mWindowToken -> o
    android.view.View mScrollView -> p
    android.view.View mMoveTarget -> q
    com.android.launcher3.DragScroller mDragScroller -> r
    int mScrollState -> s
    com.android.launcher3.DragController$ScrollRunnable mScrollRunnable -> t
    com.android.launcher3.DropTarget mLastDropTarget -> u
    android.view.inputmethod.InputMethodManager mInputMethodManager -> v
    int[] mLastTouch -> w
    long mLastTouchUpTime -> x
    int mDistanceSinceScroll -> y
    int[] mTmpPoint -> z
    android.graphics.Rect mDragLayerRect -> A
    int mFlingToDeleteThresholdVelocity -> B
    android.view.VelocityTracker mVelocityTracker -> C
    void startDrag(android.view.View,android.graphics.Bitmap,com.android.launcher3.DragSource,java.lang.Object,int,android.graphics.Point,float) -> a
    void startDrag(android.graphics.Bitmap,int,int,com.android.launcher3.DragSource,java.lang.Object,int,android.graphics.Point,android.graphics.Rect,float) -> a
    boolean dispatchKeyEvent$2d37fa55() -> a
    boolean isDragging() -> b
    void cancelDrag() -> c
    void onAppsRemoved$3d61e3ed(java.util.ArrayList) -> a
    void endDrag() -> g
    void onDeferredEndDrag(com.android.launcher3.DragView) -> a
    void onDeferredEndFling(com.android.launcher3.DropTarget$DragObject) -> a
    int[] getClampedDragLayerPos(float,float) -> a
    long getLastGestureUpTime() -> d
    void resetLastGestureUpTime() -> e
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> a
    void setMoveTarget(android.view.View) -> a
    boolean dispatchUnhandledMove(android.view.View,int) -> a
    void clearScrollRunnable() -> h
    void handleMoveEvent(int,int) -> a
    void forceTouchMove() -> f
    void checkTouchMove(com.android.launcher3.DropTarget) -> d
    void checkScrollState(int,int) -> b
    boolean onTouchEvent(android.view.MotionEvent) -> b
    android.graphics.PointF isFlingingToDelete(com.android.launcher3.DragSource) -> a
    void dropOnFlingToDeleteTarget$19e6e74e(android.graphics.PointF) -> a
    void drop(float,float) -> b
    com.android.launcher3.DropTarget findDropTarget(int,int,int[]) -> a
    void setDragScoller(com.android.launcher3.DragScroller) -> a
    void setWindowToken(android.os.IBinder) -> a
    void addDragListener(com.android.launcher3.DragController$DragListener) -> a
    void addDropTarget(com.android.launcher3.DropTarget) -> a
    void removeDropTarget(com.android.launcher3.DropTarget) -> b
    void setFlingToDeleteDropTarget(com.android.launcher3.DropTarget) -> c
    void acquireVelocityTrackerAndAddMovement(android.view.MotionEvent) -> c
    void setScrollView(android.view.View) -> b
    com.android.launcher3.DragScroller access$0(com.android.launcher3.DragController) -> a
    void access$1(com.android.launcher3.DragController,int) -> a
    void access$2(com.android.launcher3.DragController,int) -> b
    com.android.launcher3.Launcher access$3(com.android.launcher3.DragController) -> b
    int[] access$4(com.android.launcher3.DragController) -> c
    void access$5(com.android.launcher3.DragController,int,int) -> a
com.android.launcher3.DragController$DragListener -> com.android.launcher3.an:
    void onDragStart$355bc73c(com.android.launcher3.DragSource,java.lang.Object) -> a
    void onDragEnd() -> c
com.android.launcher3.DragController$ScrollRunnable -> com.android.launcher3.ao:
    int mDirection -> a
    com.android.launcher3.DragController this$0 -> b
    void run() -> run
    void setDirection(int) -> a
com.android.launcher3.DragLayer -> com.android.launcher3.DragLayer:
    com.android.launcher3.DragController mDragController -> a
    int[] mTmpXY -> b
    int mXDown -> c
    int mYDown -> d
    com.android.launcher3.Launcher mLauncher -> e
    java.util.ArrayList mResizeFrames -> f
    com.android.launcher3.AppWidgetResizeFrame mCurrentResizeFrame -> g
    android.animation.ValueAnimator mDropAnim -> h
    android.animation.ValueAnimator mFadeOutAnim -> i
    android.animation.TimeInterpolator mCubicEaseOutInterpolator -> j
    com.android.launcher3.DragView mDropView -> k
    int mAnchorViewInitialScrollX -> l
    android.view.View mAnchorView -> m
    boolean mHoverPointClosesFolder -> n
    android.graphics.Rect mHitRect -> o
    com.android.launcher3.DragLayer$TouchCompleteListener mTouchCompleteListener -> p
    android.graphics.Rect mInsets -> q
    boolean mInScrollArea -> r
    android.graphics.drawable.Drawable mLeftHoverDrawable -> s
    android.graphics.drawable.Drawable mRightHoverDrawable -> t
    void setup(com.android.launcher3.Launcher,com.android.launcher3.DragController) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean fitSystemWindows(android.graphics.Rect) -> fitSystemWindows
    boolean isEventOverFolder(com.android.launcher3.Folder,android.view.MotionEvent) -> a
    boolean handleTouchDown(android.view.MotionEvent,boolean) -> a
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onInterceptHoverEvent(android.view.MotionEvent) -> onInterceptHoverEvent
    void sendTapOutsideFolderAccessibilityEvent(boolean) -> a
    boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void addChildrenForAccessibility(java.util.ArrayList) -> addChildrenForAccessibility
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    float getDescendantRectRelativeToSelf(android.view.View,android.graphics.Rect) -> a
    float getLocationInDragLayer(android.view.View,int[]) -> a
    float getDescendantCoordRelativeToSelf(android.view.View,int[]) -> b
    float getDescendantCoordRelativeToSelf(android.view.View,int[],boolean) -> a
    float mapCoordInSelfToDescendent(android.view.View,int[]) -> c
    void getViewRectRelativeToSelf(android.view.View,android.graphics.Rect) -> b
    boolean dispatchUnhandledMove(android.view.View,int) -> dispatchUnhandledMove
    void onLayout(boolean,int,int,int,int) -> onLayout
    void clearAllResizeFrames() -> a
    void addResizeFrame$7c15c4b9(com.android.launcher3.LauncherAppWidgetHostView,com.android.launcher3.CellLayout) -> a
    void animateViewIntoPosition(com.android.launcher3.DragView,android.view.View) -> a
    void animateViewIntoPosition(com.android.launcher3.DragView,int[],float,float,float,int,java.lang.Runnable,int) -> a
    void animateViewIntoPosition(com.android.launcher3.DragView,android.view.View,java.lang.Runnable) -> a
    void animateViewIntoPosition(com.android.launcher3.DragView,android.view.View,int,java.lang.Runnable,android.view.View) -> a
    void animateViewIntoPosition(com.android.launcher3.DragView,int,int,int,int,float,float,float,float,float,java.lang.Runnable,int,int,android.view.View) -> a
    void animateView(com.android.launcher3.DragView,android.graphics.Rect,android.graphics.Rect,float,float,float,float,float,int,android.view.animation.Interpolator,android.view.animation.Interpolator,java.lang.Runnable,int,android.view.View) -> a
    void animateView(com.android.launcher3.DragView,android.animation.ValueAnimator$AnimatorUpdateListener,int,android.animation.TimeInterpolator,java.lang.Runnable,int,android.view.View) -> a
    void clearAnimatedView() -> b
    android.view.View getAnimatedView() -> c
    void onChildViewAdded(android.view.View,android.view.View) -> onChildViewAdded
    void onChildViewRemoved(android.view.View,android.view.View) -> onChildViewRemoved
    void updateChildIndices() -> f
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    void onEnterScrollArea$13462e() -> d
    void onExitScrollArea() -> e
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void setTouchCompleteListener(com.android.launcher3.DragLayer$TouchCompleteListener) -> a
    com.android.launcher3.DragView access$0(com.android.launcher3.DragLayer) -> a
    android.view.View access$1(com.android.launcher3.DragLayer) -> b
    int access$2(com.android.launcher3.DragLayer) -> c
    void access$3(com.android.launcher3.DragLayer) -> d
    com.android.launcher3.DragController access$4(com.android.launcher3.DragLayer) -> e
    void access$5(com.android.launcher3.DragLayer,com.android.launcher3.DragView) -> a
com.android.launcher3.DragLayer$1 -> com.android.launcher3.ap:
    android.view.View val$child -> a
    java.lang.Runnable val$onFinishAnimationRunnable -> b
    void run() -> run
com.android.launcher3.DragLayer$2 -> com.android.launcher3.aq:
    com.android.launcher3.DragLayer this$0 -> a
    com.android.launcher3.DragView val$view -> b
    android.view.animation.Interpolator val$alphaInterpolator -> c
    android.view.animation.Interpolator val$motionInterpolator -> d
    float val$initScaleX -> e
    float val$dropViewScale -> f
    float val$initScaleY -> g
    float val$finalScaleX -> h
    float val$finalScaleY -> i
    float val$finalAlpha -> j
    float val$initAlpha -> k
    android.graphics.Rect val$from -> l
    android.graphics.Rect val$to -> m
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.android.launcher3.DragLayer$3 -> com.android.launcher3.ar:
    com.android.launcher3.DragLayer this$0 -> a
    java.lang.Runnable val$onCompleteRunnable -> b
    int val$animationEndStyle -> c
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.DragLayer$4 -> com.android.launcher3.as:
    com.android.launcher3.DragLayer this$0 -> a
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.android.launcher3.DragLayer$5 -> com.android.launcher3.at:
    com.android.launcher3.DragLayer this$0 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.DragLayer$LayoutParams -> com.android.launcher3.DragLayer$LayoutParams:
    int x -> a
    int y -> b
    boolean customPosition -> c
    void setWidth(int) -> setWidth
    int getWidth() -> getWidth
    void setHeight(int) -> setHeight
    int getHeight() -> getHeight
    void setX(int) -> setX
    int getX() -> getX
    void setY(int) -> setY
    int getY() -> getY
com.android.launcher3.DragLayer$TouchCompleteListener -> com.android.launcher3.au:
    void onTouchComplete() -> a
com.android.launcher3.DragScroller -> com.android.launcher3.av:
    void scrollLeft() -> c_
    void scrollRight() -> d_
    boolean onEnterScrollArea(int,int,int) -> a
    boolean onExitScrollArea() -> g
com.android.launcher3.DragSource -> com.android.launcher3.aw:
    void onFlingToDeleteCompleted() -> f
    void onDropCompleted(android.view.View,com.android.launcher3.DropTarget$DragObject,boolean,boolean) -> a
com.android.launcher3.DragView -> com.android.launcher3.ax:
    float sDragAlpha -> b
    android.graphics.Bitmap mBitmap -> c
    android.graphics.Bitmap mCrossFadeBitmap -> d
    android.graphics.Paint mPaint -> e
    int mRegistrationX -> f
    int mRegistrationY -> g
    android.graphics.Point mDragVisualizeOffset -> h
    android.graphics.Rect mDragRegion -> i
    com.android.launcher3.DragLayer mDragLayer -> j
    boolean mHasDrawn -> k
    float mCrossFadeProgress -> l
    android.animation.ValueAnimator mAnim -> a
    float mOffsetX -> m
    float mOffsetY -> n
    float mInitialScale -> o
    int getDragRegionTop() -> a
    void setDragVisualizeOffset(android.graphics.Point) -> a
    android.graphics.Point getDragVisualizeOffset() -> b
    void setDragRegion(android.graphics.Rect) -> a
    android.graphics.Rect getDragRegion() -> c
    float getInitialScale() -> d
    void updateInitialScaleToCurrentScale() -> e
    void onMeasure(int,int) -> onMeasure
    void onDraw(android.graphics.Canvas) -> onDraw
    void setCrossFadeBitmap(android.graphics.Bitmap) -> a
    void crossFade(int) -> a
    void setColor(int) -> b
    boolean hasDrawn() -> f
    void setAlpha(float) -> setAlpha
    void show(int,int) -> a
    void cancelAnimation() -> g
    void resetLayoutParams() -> h
    void move(int,int) -> b
    void remove() -> i
    float access$0(com.android.launcher3.DragView) -> a
    float access$1(com.android.launcher3.DragView) -> b
    void access$2(com.android.launcher3.DragView,float) -> a
    void access$3(com.android.launcher3.DragView,float) -> b
    float access$4() -> j
    void access$5(com.android.launcher3.DragView,float) -> c
com.android.launcher3.DragView$1 -> com.android.launcher3.ay:
    com.android.launcher3.DragView this$0 -> a
    float val$offsetX -> b
    float val$offsetY -> c
    float val$initialScale -> d
    float val$scale -> e
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.android.launcher3.DragView$2 -> com.android.launcher3.az:
    com.android.launcher3.DragView this$0 -> a
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.android.launcher3.DragView$3 -> com.android.launcher3.aA:
    com.android.launcher3.DragView this$0 -> a
    void run() -> run
com.android.launcher3.DrawableStateProxyView -> com.android.launcher3.DrawableStateProxyView:
    android.view.View mView -> a
    int mViewId -> b
    void drawableStateChanged() -> drawableStateChanged
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
com.android.launcher3.DropTarget -> com.android.launcher3.aB:
    boolean isDropEnabled() -> b
    void onDrop(com.android.launcher3.DropTarget$DragObject) -> b
    void onDragEnter(com.android.launcher3.DropTarget$DragObject) -> c
    void onDragOver(com.android.launcher3.DropTarget$DragObject) -> d
    void onDragExit(com.android.launcher3.DropTarget$DragObject) -> e
    void onFlingToDelete$3d9b6c68(com.android.launcher3.DropTarget$DragObject,android.graphics.PointF) -> a
    boolean acceptDrop(com.android.launcher3.DropTarget$DragObject) -> a
    void getHitRectRelativeToDragLayer(android.graphics.Rect) -> a
com.android.launcher3.DropTarget$DragEnforcer -> com.android.launcher3.aC:
    int dragParity -> a
    void onDragEnter() -> a
    void onDragExit() -> b
    void onDragStart$355bc73c(com.android.launcher3.DragSource,java.lang.Object) -> a
    void onDragEnd() -> c
com.android.launcher3.DropTarget$DragObject -> com.android.launcher3.aD:
    int x -> a
    int y -> b
    int xOffset -> c
    int yOffset -> d
    boolean dragComplete -> e
    com.android.launcher3.DragView dragView -> f
    java.lang.Object dragInfo -> g
    com.android.launcher3.DragSource dragSource -> h
    java.lang.Runnable postAnimationRunnable -> i
    boolean cancelled -> j
    boolean deferDragViewCleanupPostAnimation -> k
com.android.launcher3.DynamicGrid -> com.android.launcher3.aE:
    com.android.launcher3.DeviceProfile mProfile -> a
    float mMinWidth -> b
    float mMinHeight -> c
    float dpiFromPx(int,android.util.DisplayMetrics) -> a
    int pxFromDp(float,android.util.DisplayMetrics) -> a
    com.android.launcher3.DeviceProfile getDeviceProfile() -> a
    java.lang.String toString() -> toString
com.android.launcher3.FastBitmapDrawable -> com.android.launcher3.aF:
    android.graphics.Bitmap mBitmap -> a
    int mAlpha -> b
    int mWidth -> c
    int mHeight -> d
    android.graphics.Paint mPaint -> e
    void draw(android.graphics.Canvas) -> draw
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setFilterBitmap(boolean) -> setFilterBitmap
    int getAlpha() -> getAlpha
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    int getMinimumWidth() -> getMinimumWidth
    int getMinimumHeight() -> getMinimumHeight
    android.graphics.Bitmap getBitmap() -> a
com.android.launcher3.FirstFrameAnimatorHelper -> com.android.launcher3.aG:
    android.view.View mTarget -> a
    long mStartFrame -> b
    long mStartTime -> c
    boolean mHandlingOnAnimationUpdate -> d
    boolean mAdjustedSecondFrameTime -> e
    android.view.ViewTreeObserver$OnDrawListener sGlobalDrawListener -> f
    long sGlobalFrameCounter -> g
    boolean sVisible -> h
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    void setIsVisible(boolean) -> a
    void initializeDrawListener(android.view.View) -> a
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
    long access$0() -> a
    void access$1(long) -> a
com.android.launcher3.FirstFrameAnimatorHelper$1 -> com.android.launcher3.aH:
    void onDraw() -> onDraw
com.android.launcher3.FirstFrameAnimatorHelper$2 -> com.android.launcher3.aI:
    com.android.launcher3.FirstFrameAnimatorHelper this$0 -> a
    android.animation.ValueAnimator val$animation -> b
    void run() -> run
com.android.launcher3.FocusHelper$1 -> com.android.launcher3.aJ:
    int val$cellCountX -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.android.launcher3.FocusOnlyTabWidget -> com.android.launcher3.FocusOnlyTabWidget:
    int getChildTabIndex(android.view.View) -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.android.launcher3.Folder -> com.android.launcher3.Folder:
    com.android.launcher3.DragController mDragController -> a
    com.android.launcher3.Launcher mLauncher -> b
    com.android.launcher3.FolderInfo mInfo -> c
    int mExpandDuration -> f
    com.android.launcher3.CellLayout mContent -> d
    android.widget.ScrollView mScrollView -> g
    android.view.LayoutInflater mInflater -> h
    com.android.launcher3.IconCache mIconCache -> i
    int mState -> j
    boolean mRearrangeOnClose -> k
    com.android.launcher3.FolderIcon mFolderIcon -> l
    int mMaxCountX -> m
    int mMaxCountY -> n
    int mMaxNumItems -> o
    java.util.ArrayList mItemsInReadingOrder -> p
    boolean mItemsInvalidated -> q
    com.android.launcher3.ShortcutInfo mCurrentDragInfo -> r
    android.view.View mCurrentDragView -> s
    boolean mSuppressOnAdd -> t
    int[] mTargetCell -> u
    int[] mPreviousTargetCell -> v
    int[] mEmptyCell -> w
    com.android.launcher3.Alarm mReorderAlarm -> x
    com.android.launcher3.Alarm mOnExitAlarm -> y
    int mFolderNameHeight -> z
    android.graphics.Rect mTempRect -> A
    boolean mDragInProgress -> B
    boolean mDeleteFolderOnDropCompleted -> C
    boolean mSuppressFolderDeletion -> D
    boolean mItemAddedBackToSelfViaIcon -> E
    com.android.launcher3.FolderEditText mFolderName -> e
    float mFolderIconPivotX -> F
    float mFolderIconPivotY -> G
    boolean mIsEditingName -> H
    android.view.inputmethod.InputMethodManager mInputMethodManager -> I
    java.lang.String sDefaultFolderName -> J
    java.lang.String sHintText -> K
    int DRAG_MODE_NONE -> L
    int DRAG_MODE_REORDER -> M
    boolean mDestroyed -> N
    android.support.v4.widget.AutoScrollHelper mAutoScrollHelper -> O
    java.lang.Runnable mDeferredAction -> P
    boolean mDeferDropAfterUninstall -> Q
    boolean mUninstallSuccessful -> R
    android.view.ActionMode$Callback mActionModeCallback -> S
    com.android.launcher3.OnAlarmListener mReorderAlarmListener -> T
    com.android.launcher3.OnAlarmListener mOnExitAlarmListener -> U
    void onFinishInflate() -> onFinishInflate
    void onClick(android.view.View) -> onClick
    boolean onLongClick(android.view.View) -> onLongClick
    boolean isEditingName() -> a
    void dismissEditingName() -> c
    void doneEditingFolderName(boolean) -> a
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
    android.view.View getEditTextRegion() -> d
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setDragController(com.android.launcher3.DragController) -> a
    void setFolderIcon(com.android.launcher3.FolderIcon) -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    com.android.launcher3.FolderInfo getInfo() -> e
    void placeInReadingOrder(java.util.ArrayList) -> a
    void bind(com.android.launcher3.FolderInfo) -> a
    com.android.launcher3.Folder fromXml(android.content.Context) -> a
    void animateOpen() -> g
    void sendCustomAccessibilityEvent(int,java.lang.String) -> a
    void animateClosed() -> h
    boolean acceptDrop(com.android.launcher3.DropTarget$DragObject) -> a
    boolean findAndSetEmptyCells(com.android.launcher3.ShortcutInfo) -> e
    boolean createAndAddShortcut(com.android.launcher3.ShortcutInfo) -> f
    void onDragEnter(com.android.launcher3.DropTarget$DragObject) -> c
    void onDragOver(com.android.launcher3.DropTarget$DragObject) -> d
    void completeDragExit() -> i
    void onDragExit(com.android.launcher3.DropTarget$DragObject) -> e
    void onDropCompleted(android.view.View,com.android.launcher3.DropTarget$DragObject,boolean,boolean) -> a
    void deferCompleteDropAfterUninstallActivity() -> j
    void onUninstallActivityReturned(boolean) -> b
    void onFlingToDelete$3d9b6c68(com.android.launcher3.DropTarget$DragObject,android.graphics.PointF) -> a
    void onFlingToDeleteCompleted() -> f
    void updateItemLocationsInDatabase() -> s
    void notifyDrop() -> k
    boolean isDropEnabled() -> b
    void setupContentDimensions(int) -> a
    boolean isFull() -> l
    void centerAboutIcon() -> t
    float getPivotXForIconAnimation() -> m
    float getPivotYForIconAnimation() -> n
    void setupContentForNumItems(int) -> b
    int getContentAreaHeight() -> u
    int getFolderHeight() -> v
    void onMeasure(int,int) -> onMeasure
    int getItemCount() -> o
    android.view.View getItemAt(int) -> c
    void replaceFolderWithFinalItem() -> w
    boolean isDestroyed() -> p
    void updateTextViewFocus() -> x
    void onDrop(com.android.launcher3.DropTarget$DragObject) -> b
    void hideItem(com.android.launcher3.ShortcutInfo) -> a
    void showItem(com.android.launcher3.ShortcutInfo) -> b
    void onAdd(com.android.launcher3.ShortcutInfo) -> c
    void onRemove(com.android.launcher3.ShortcutInfo) -> d
    android.view.View getViewForInfo(com.android.launcher3.ShortcutInfo) -> g
    void onItemsChanged() -> q
    void onTitleChanged(java.lang.CharSequence) -> a
    java.util.ArrayList getItemsInReadingOrder() -> r
    void onFocusChange(android.view.View,boolean) -> onFocusChange
    void getHitRectRelativeToDragLayer(android.graphics.Rect) -> a
    int[] access$0(com.android.launcher3.Folder) -> a
    int[] access$1(com.android.launcher3.Folder) -> b
    void access$2(com.android.launcher3.Folder,int[],int[]) -> a
    void access$3(com.android.launcher3.Folder,int,java.lang.String) -> a
    void access$4(com.android.launcher3.Folder,int) -> a
    void access$5(com.android.launcher3.Folder) -> c
    void access$6(com.android.launcher3.Folder) -> d
    void access$7(com.android.launcher3.Folder,java.lang.Runnable) -> a
    com.android.launcher3.FolderIcon access$8(com.android.launcher3.Folder) -> e
com.android.launcher3.Folder$1 -> com.android.launcher3.aK:
    boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem) -> onActionItemClicked
    boolean onCreateActionMode(android.view.ActionMode,android.view.Menu) -> onCreateActionMode
    void onDestroyActionMode(android.view.ActionMode) -> onDestroyActionMode
    boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu) -> onPrepareActionMode
com.android.launcher3.Folder$2 -> com.android.launcher3.aL:
    com.android.launcher3.Folder this$0 -> a
    void onAlarm$763c5805() -> a
com.android.launcher3.Folder$3 -> com.android.launcher3.aM:
    com.android.launcher3.Folder this$0 -> a
    void onAlarm$763c5805() -> a
com.android.launcher3.Folder$4 -> com.android.launcher3.aN:
    com.android.launcher3.Folder this$0 -> a
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.Folder$5 -> com.android.launcher3.aO:
    com.android.launcher3.Folder this$0 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
com.android.launcher3.Folder$6 -> com.android.launcher3.aP:
    com.android.launcher3.Folder this$0 -> a
    android.view.View val$target -> b
    com.android.launcher3.DropTarget$DragObject val$d -> c
    boolean val$isFlingToDelete -> d
    boolean val$success -> e
    void run() -> run
com.android.launcher3.Folder$7 -> com.android.launcher3.aQ:
    com.android.launcher3.Folder this$0 -> a
    void run() -> run
com.android.launcher3.Folder$GridComparator -> com.android.launcher3.aR:
    int mNumCols -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.android.launcher3.FolderAutoScrollHelper -> com.android.launcher3.aS:
    android.widget.ScrollView mTarget -> a
    void scrollTargetBy(int,int) -> a
    boolean canTargetScrollVertically(int) -> e
com.android.launcher3.FolderEditText -> com.android.launcher3.FolderEditText:
    com.android.launcher3.Folder mFolder -> a
    void setFolder(com.android.launcher3.Folder) -> a
    boolean onKeyPreIme(int,android.view.KeyEvent) -> onKeyPreIme
com.android.launcher3.FolderIcon -> com.android.launcher3.FolderIcon:
    com.android.launcher3.Launcher mLauncher -> c
    com.android.launcher3.Folder mFolder -> d
    com.android.launcher3.FolderInfo mInfo -> e
    boolean sStaticValuesDirty -> f
    com.android.launcher3.CheckLongPressHelper mLongPressHelper -> g
    android.graphics.drawable.Drawable sSharedFolderLeaveBehind -> a
    android.widget.ImageView mPreviewBackground -> h
    com.android.launcher3.BubbleTextView mFolderName -> i
    com.android.launcher3.FolderIcon$FolderRingAnimator mFolderRingAnimator -> j
    int mIntrinsicIconSize -> k
    float mBaselineIconScale -> l
    int mBaselineIconSize -> m
    int mAvailableSpaceInPreview -> n
    int mTotalWidth -> o
    int mPreviewOffsetX -> p
    int mPreviewOffsetY -> q
    float mMaxPerspectiveShift -> r
    boolean mAnimating -> b
    android.graphics.Rect mOldBounds -> s
    com.android.launcher3.FolderIcon$PreviewItemDrawingParams mParams -> t
    com.android.launcher3.FolderIcon$PreviewItemDrawingParams mAnimParams -> u
    java.util.ArrayList mHiddenItems -> v
    void init() -> f
    com.android.launcher3.FolderIcon fromXml$5dc68a8d(int,com.android.launcher3.Launcher,android.view.ViewGroup,com.android.launcher3.FolderInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    com.android.launcher3.Folder getFolder() -> a
    com.android.launcher3.FolderInfo getFolderInfo() -> b
    boolean willAcceptItem(com.android.launcher3.ItemInfo) -> a
    boolean acceptDrop(java.lang.Object) -> a
    void addItem(com.android.launcher3.ShortcutInfo) -> a
    void onDragEnter(java.lang.Object) -> b
    void performCreateAnimation(com.android.launcher3.ShortcutInfo,android.view.View,com.android.launcher3.ShortcutInfo,com.android.launcher3.DragView,android.graphics.Rect,float,java.lang.Runnable) -> a
    void performDestroyAnimation(android.view.View,java.lang.Runnable) -> a
    void onDragExit$5d527811() -> c
    void onDrop$10ea5bd4(com.android.launcher3.ShortcutInfo,com.android.launcher3.DragView,android.graphics.Rect,float,int,java.lang.Runnable) -> a
    void onDrop(com.android.launcher3.DropTarget$DragObject) -> a
    void computePreviewDrawingParams(int,int) -> a
    void computePreviewDrawingParams(android.graphics.drawable.Drawable) -> a
    com.android.launcher3.FolderIcon$PreviewItemDrawingParams computePreviewItemDrawingParams(int,com.android.launcher3.FolderIcon$PreviewItemDrawingParams) -> a
    void drawPreviewItem(android.graphics.Canvas,com.android.launcher3.FolderIcon$PreviewItemDrawingParams) -> a
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void animateFirstItem(android.graphics.drawable.Drawable,int,boolean,java.lang.Runnable) -> a
    void setTextVisible(boolean) -> a
    boolean getTextVisible() -> d
    void onItemsChanged() -> q
    void onAdd(com.android.launcher3.ShortcutInfo) -> c
    void onRemove(com.android.launcher3.ShortcutInfo) -> d
    void onTitleChanged(java.lang.CharSequence) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void cancelLongPress() -> cancelLongPress
    boolean access$0() -> e
    void access$1(boolean) -> b
    android.widget.ImageView access$2(com.android.launcher3.FolderIcon) -> a
    java.util.ArrayList access$3(com.android.launcher3.FolderIcon) -> b
    com.android.launcher3.Folder access$4(com.android.launcher3.FolderIcon) -> c
    com.android.launcher3.FolderIcon$PreviewItemDrawingParams access$5(com.android.launcher3.FolderIcon) -> d
com.android.launcher3.FolderIcon$1 -> com.android.launcher3.aT:
    com.android.launcher3.FolderIcon this$0 -> a
    com.android.launcher3.ShortcutInfo val$item -> b
    void run() -> run
com.android.launcher3.FolderIcon$2 -> com.android.launcher3.aU:
    com.android.launcher3.FolderIcon this$0 -> a
    boolean val$reverse -> b
    float val$transX0 -> c
    com.android.launcher3.FolderIcon$PreviewItemDrawingParams val$finalParams -> d
    float val$transY0 -> e
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.android.launcher3.FolderIcon$3 -> com.android.launcher3.aV:
    com.android.launcher3.FolderIcon this$0 -> a
    java.lang.Runnable val$onCompleteRunnable -> b
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.FolderIcon$FolderRingAnimator -> com.android.launcher3.aW:
    int mCellX -> a
    int mCellY -> b
    com.android.launcher3.CellLayout mCellLayout -> j
    float mOuterRingSize -> c
    float mInnerRingSize -> d
    com.android.launcher3.FolderIcon mFolderIcon -> e
    android.graphics.drawable.Drawable sSharedOuterRingDrawable -> f
    android.graphics.drawable.Drawable sSharedInnerRingDrawable -> g
    int sPreviewSize -> h
    int sPreviewPadding -> i
    android.animation.ValueAnimator mAcceptAnimator -> k
    android.animation.ValueAnimator mNeutralAnimator -> l
    void animateToAcceptState() -> a
    void animateToNaturalState() -> b
    void setCell(int,int) -> a
    void setCellLayout(com.android.launcher3.CellLayout) -> a
    float getOuterRingSize() -> c
    float getInnerRingSize() -> d
    com.android.launcher3.CellLayout access$0(com.android.launcher3.FolderIcon$FolderRingAnimator) -> a
com.android.launcher3.FolderIcon$FolderRingAnimator$1 -> com.android.launcher3.aX:
    com.android.launcher3.FolderIcon$FolderRingAnimator this$1 -> a
    int val$previewSize -> b
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.android.launcher3.FolderIcon$FolderRingAnimator$2 -> com.android.launcher3.aY:
    com.android.launcher3.FolderIcon$FolderRingAnimator this$1 -> a
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
com.android.launcher3.FolderIcon$FolderRingAnimator$3 -> com.android.launcher3.aZ:
    com.android.launcher3.FolderIcon$FolderRingAnimator this$1 -> a
    int val$previewSize -> b
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.android.launcher3.FolderIcon$FolderRingAnimator$4 -> com.android.launcher3.ba:
    com.android.launcher3.FolderIcon$FolderRingAnimator this$1 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.FolderIcon$PreviewItemDrawingParams -> com.android.launcher3.bb:
    float transX -> a
    float transY -> b
    float scale -> c
    int overlayAlpha -> d
    android.graphics.drawable.Drawable drawable -> e
com.android.launcher3.FolderInfo -> com.android.launcher3.bc:
    boolean opened -> a
    java.util.ArrayList contents -> b
    java.util.ArrayList listeners -> c
    void add(com.android.launcher3.ShortcutInfo) -> a
    void remove(com.android.launcher3.ShortcutInfo) -> b
    void onAddToDatabase(android.content.ContentValues) -> a
    void addListener(com.android.launcher3.FolderInfo$FolderListener) -> a
    void itemsChanged() -> c
    void unbind() -> b_
    java.lang.String toString() -> toString
com.android.launcher3.FolderInfo$FolderListener -> com.android.launcher3.bd:
    void onAdd(com.android.launcher3.ShortcutInfo) -> c
    void onRemove(com.android.launcher3.ShortcutInfo) -> d
    void onTitleChanged(java.lang.CharSequence) -> a
    void onItemsChanged() -> q
com.android.launcher3.FolderKeyEventListener -> com.android.launcher3.be:
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
com.android.launcher3.HideFromAccessibilityHelper -> com.android.launcher3.bf:
    java.util.HashMap mPreviousValues -> a
    boolean mHide -> b
    void restoreImportantForAccessibility(android.view.View) -> a
    void onChildViewAdded(android.view.View,android.view.View) -> onChildViewAdded
    void onChildViewRemoved(android.view.View,android.view.View) -> onChildViewRemoved
com.android.launcher3.HolographicImageView -> com.android.launcher3.HolographicImageView:
    com.android.launcher3.HolographicViewHelper mHolographicHelper -> a
    boolean mHotwordOn -> b
    boolean mIsPressed -> c
    boolean mIsFocused -> d
    void invalidatePressedFocusedStates() -> a
    void drawableStateChanged() -> drawableStateChanged
    void onDraw(android.graphics.Canvas) -> onDraw
    int[] onCreateDrawableState(int) -> onCreateDrawableState
    boolean access$0(com.android.launcher3.HolographicImageView) -> a
    void access$1(com.android.launcher3.HolographicImageView,boolean) -> a
    boolean access$2(com.android.launcher3.HolographicImageView) -> b
    void access$3(com.android.launcher3.HolographicImageView,boolean) -> b
com.android.launcher3.HolographicImageView$1 -> com.android.launcher3.bg:
    com.android.launcher3.HolographicImageView this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.android.launcher3.HolographicImageView$2 -> com.android.launcher3.bh:
    com.android.launcher3.HolographicImageView this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.android.launcher3.HolographicLinearLayout -> com.android.launcher3.HolographicLinearLayout:
    com.android.launcher3.HolographicViewHelper mHolographicHelper -> a
    android.widget.ImageView mImageView -> b
    int mImageViewId -> c
    boolean mHotwordOn -> d
    boolean mIsPressed -> e
    boolean mIsFocused -> f
    void drawableStateChanged() -> drawableStateChanged
    void invalidatePressedFocusedStates() -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    int[] onCreateDrawableState(int) -> onCreateDrawableState
    boolean access$0(com.android.launcher3.HolographicLinearLayout) -> a
    void access$1(com.android.launcher3.HolographicLinearLayout,boolean) -> a
    boolean access$2(com.android.launcher3.HolographicLinearLayout) -> b
    void access$3(com.android.launcher3.HolographicLinearLayout,boolean) -> b
com.android.launcher3.HolographicLinearLayout$1 -> com.android.launcher3.bi:
    com.android.launcher3.HolographicLinearLayout this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.android.launcher3.HolographicLinearLayout$2 -> com.android.launcher3.bj:
    com.android.launcher3.HolographicLinearLayout this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.android.launcher3.HolographicOutlineHelper -> com.android.launcher3.bk:
    android.graphics.Paint mHolographicPaint -> b
    android.graphics.Paint mBlurPaint -> c
    android.graphics.Paint mErasePaint -> d
    int mMaxOuterBlurRadius -> a
    android.graphics.BlurMaskFilter mExtraThickOuterBlurMaskFilter -> e
    android.graphics.BlurMaskFilter mThickOuterBlurMaskFilter -> f
    android.graphics.BlurMaskFilter mMediumOuterBlurMaskFilter -> g
    android.graphics.BlurMaskFilter mThinOuterBlurMaskFilter -> h
    android.graphics.BlurMaskFilter mThickInnerBlurMaskFilter -> i
    android.graphics.BlurMaskFilter mExtraThickInnerBlurMaskFilter -> j
    android.graphics.BlurMaskFilter mMediumInnerBlurMaskFilter -> k
    com.android.launcher3.HolographicOutlineHelper INSTANCE -> l
    com.android.launcher3.HolographicOutlineHelper obtain(android.content.Context) -> a
    void applyExpensiveOutlineWithBlur(android.graphics.Bitmap,android.graphics.Canvas,int,int,int) -> a
    void applyExpensiveOutlineWithBlur(android.graphics.Bitmap,android.graphics.Canvas,int,int,boolean,int) -> a
    void applyMediumExpensiveOutlineWithBlur(android.graphics.Bitmap,android.graphics.Canvas,int,int,boolean) -> a
    void applyMediumExpensiveOutlineWithBlur(android.graphics.Bitmap,android.graphics.Canvas,int,int) -> a
com.android.launcher3.HolographicViewHelper -> com.android.launcher3.bl:
    android.graphics.Canvas mTempCanvas -> a
    boolean mStatesUpdated -> b
    int mHighlightColor -> c
    int mHotwordColor -> d
    void generatePressedFocusedStates(android.widget.ImageView) -> a
    void invalidatePressedFocusedStates(android.widget.ImageView) -> b
    android.graphics.Bitmap createImageWithOverlay(android.widget.ImageView,android.graphics.Canvas,int) -> a
com.android.launcher3.Hotseat -> com.android.launcher3.Hotseat:
    com.android.launcher3.CellLayout mContent -> a
    com.android.launcher3.Launcher mLauncher -> b
    int mAllAppsButtonRank -> c
    boolean mTransposeLayoutWithOrientation -> d
    boolean mIsLandscape -> e
    void setup(com.android.launcher3.Launcher) -> a
    com.android.launcher3.CellLayout getLayout() -> a
    void setOnLongClickListener(android.view.View$OnLongClickListener) -> setOnLongClickListener
    boolean hasVerticalHotseat() -> c
    int getOrderInHotseat(int,int) -> a
    int getCellXFromOrder(int) -> a
    int getCellYFromOrder(int) -> b
    boolean isAllAppsButtonRank(int) -> c
    android.graphics.Rect getCellCoordinates(int,int) -> b
    void onFinishInflate() -> onFinishInflate
    void resetLayout() -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    com.android.launcher3.Launcher access$0(com.android.launcher3.Hotseat) -> a
com.android.launcher3.Hotseat$1 -> com.android.launcher3.bm:
    com.android.launcher3.Hotseat this$0 -> a
    void onClick(android.view.View) -> onClick
com.android.launcher3.HotseatIconKeyEventListener -> com.android.launcher3.bn:
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
com.android.launcher3.IconCache -> com.android.launcher3.bo:
    android.graphics.Bitmap mDefaultIcon -> a
    android.content.Context mContext -> b
    android.content.pm.PackageManager mPackageManager -> c
    java.util.HashMap mCache -> d
    int mIconDpi -> e
    android.graphics.drawable.Drawable getFullResDefaultActivityIcon() -> a
    android.graphics.drawable.Drawable getFullResIcon(android.content.res.Resources,int) -> a
    android.graphics.drawable.Drawable getFullResIcon(java.lang.String,int) -> a
    android.graphics.drawable.Drawable getFullResIcon(android.content.pm.ResolveInfo) -> a
    android.graphics.drawable.Drawable getFullResIcon(android.content.pm.ActivityInfo) -> a
    void remove(android.content.ComponentName) -> a
    void flush() -> b
    void flushInvalidIcons(com.android.launcher3.DeviceProfile) -> a
    void getTitleAndIcon(com.android.launcher3.AppInfo,android.content.pm.ResolveInfo,java.util.HashMap) -> a
    android.graphics.Bitmap getIcon(android.content.Intent) -> a
    android.graphics.Bitmap getIcon(android.content.ComponentName,android.content.pm.ResolveInfo,java.util.HashMap) -> a
    boolean isDefaultIcon(android.graphics.Bitmap) -> a
    com.android.launcher3.IconCache$CacheEntry cacheLocked(android.content.ComponentName,android.content.pm.ResolveInfo,java.util.HashMap) -> b
com.android.launcher3.IconCache$CacheEntry -> com.android.launcher3.bp:
    android.graphics.Bitmap icon -> a
    java.lang.String title -> b
com.android.launcher3.IconKeyEventListener -> com.android.launcher3.bq:
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
com.android.launcher3.InfoDropTarget -> com.android.launcher3.InfoDropTarget:
    android.content.res.ColorStateList mOriginalTextColor -> f
    android.graphics.drawable.TransitionDrawable mDrawable -> g
    void onFinishInflate() -> onFinishInflate
    boolean acceptDrop(com.android.launcher3.DropTarget$DragObject) -> a
    void onDragStart$355bc73c(com.android.launcher3.DragSource,java.lang.Object) -> a
    void onDragEnd() -> c
    void onDragEnter(com.android.launcher3.DropTarget$DragObject) -> c
    void onDragExit(com.android.launcher3.DropTarget$DragObject) -> e
com.android.launcher3.Insettable -> com.android.launcher3.br:
    void setInsets(android.graphics.Rect) -> a_
com.android.launcher3.InstallShortcutReceiver -> com.android.launcher3.InstallShortcutReceiver:
    java.lang.Object sLock -> a
    boolean mUseInstallQueue -> b
    void removeFromInstallQueue(android.content.SharedPreferences,java.util.ArrayList) -> a
    java.util.ArrayList getAndClearInstallQueue(android.content.SharedPreferences) -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void enableInstallQueue() -> a
    void disableAndFlushInstallQueue(android.content.Context) -> a
    void flushInstallQueue(android.content.Context) -> b
com.android.launcher3.InstallShortcutReceiver$PendingInstallShortcutInfo -> com.android.launcher3.bs:
    android.content.Intent data -> a
    android.content.Intent launchIntent -> b
    java.lang.String name -> c
    android.graphics.Bitmap icon -> d
    android.content.Intent$ShortcutIconResource iconResource -> e
com.android.launcher3.InterruptibleInOutAnimator -> com.android.launcher3.bt:
    long mOriginalDuration -> a
    float mOriginalFromValue -> b
    float mOriginalToValue -> c
    android.animation.ValueAnimator mAnimator -> d
    boolean mFirstRun -> e
    java.lang.Object mTag -> f
    void animate(int) -> a
    void animateIn() -> a
    void animateOut() -> b
    void setTag(java.lang.Object) -> a
    java.lang.Object getTag() -> c
    android.animation.ValueAnimator getAnimator() -> d
com.android.launcher3.InterruptibleInOutAnimator$1 -> com.android.launcher3.bu:
    com.android.launcher3.InterruptibleInOutAnimator this$0 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.ItemInfo -> com.android.launcher3.bv:
    long id -> f
    int itemType -> g
    long container -> h
    long screenId -> i
    int cellX -> j
    int cellY -> k
    int spanX -> l
    int spanY -> m
    int minSpanX -> n
    int minSpanY -> o
    boolean requiresDbUpdate -> p
    java.lang.CharSequence title -> q
    int[] dropPos -> r
    android.content.Intent getIntent() -> a
    void onAddToDatabase(android.content.ContentValues) -> a
    void updateValuesWithCoordinates(android.content.ContentValues,int,int) -> a
    byte[] flattenBitmap(android.graphics.Bitmap) -> a
    void writeBitmap(android.content.ContentValues,android.graphics.Bitmap) -> a
    void unbind() -> b_
    java.lang.String toString() -> toString
com.android.launcher3.Launcher -> com.android.launcher3.Launcher:
    android.widget.FrameLayout frist_screen -> b
    android.widget.TextView mtime -> c
    android.widget.TextView mdata -> d
    android.widget.TextView mweek -> e
    java.lang.String locale -> f
    android.widget.LinearLayout zc -> g
    android.widget.LinearLayout en -> h
    java.lang.String strTimeFormat -> i
    java.lang.Boolean time12or24 -> j
    com.android.launcher3.Launcher$State mState -> k
    android.animation.AnimatorSet mStateAnimation -> l
    java.lang.Object sLock -> m
    int NEW_APPS_PAGE_MOVE_DELAY -> n
    int NEW_APPS_ANIMATION_INACTIVE_TIMEOUT_SECONDS -> o
    int NEW_APPS_ANIMATION_DELAY -> p
    android.content.BroadcastReceiver mCloseSystemDialogsReceiver -> q
    android.database.ContentObserver mWidgetObserver -> r
    android.view.LayoutInflater mInflater -> s
    com.android.launcher3.Workspace mWorkspace -> t
    android.view.View mLauncherView -> u
    com.android.launcher3.DragLayer mDragLayer -> v
    com.android.launcher3.DragController mDragController -> w
    android.view.View mWeightWatcher -> x
    android.appwidget.AppWidgetManager mAppWidgetManager -> y
    com.android.launcher3.LauncherAppWidgetHost mAppWidgetHost -> z
    com.android.launcher3.ItemInfo mPendingAddInfo -> A
    android.appwidget.AppWidgetProviderInfo mPendingAddWidgetInfo -> B
    int[] mTmpAddItemCellCoordinates -> C
    com.android.launcher3.FolderInfo mFolderInfo -> D
    com.android.launcher3.Hotseat mHotseat -> E
    android.view.View mOverviewPanel -> F
    com.android.launcher3.SearchDropTargetBar mSearchDropTargetBar -> G
    com.android.launcher3.AppsCustomizeTabHost mAppsCustomizeTabHost -> H
    com.android.launcher3.AppsCustomizePagedView mAppsCustomizeContent -> I
    boolean mAutoAdvanceRunning -> J
    android.view.View mQsbBar -> K
    android.os.Bundle mSavedState -> L
    com.android.launcher3.Launcher$State mOnResumeState -> M
    android.text.SpannableStringBuilder mDefaultKeySsb -> N
    boolean mWorkspaceLoading -> O
    boolean mPaused -> P
    boolean mRestoring -> Q
    boolean mWaitingForResult -> R
    boolean mOnResumeNeedsLoad -> S
    java.util.ArrayList mBindOnResumeCallbacks -> T
    java.util.ArrayList mOnResumeCallbacks -> U
    boolean sPausedFromUserAction -> V
    com.android.launcher3.LauncherModel mModel -> W
    com.android.launcher3.IconCache mIconCache -> X
    boolean mUserPresent -> Y
    boolean mVisible -> Z
    boolean mHasFocus -> aa
    boolean mAttached -> ab
    com.android.launcher3.Launcher$LocaleConfiguration sLocaleConfiguration -> ac
    java.util.HashMap sFolders -> ad
    android.view.View$OnTouchListener mHapticFeedbackTouchListener -> ae
    long mAutoAdvanceSentTime -> af
    long mAutoAdvanceTimeLeft -> ag
    java.util.HashMap mWidgetsToAdvance -> ah
    android.graphics.drawable.Drawable$ConstantState[] sGlobalSearchIcon -> ai
    android.graphics.drawable.Drawable$ConstantState[] sVoiceSearchIcon -> aj
    android.graphics.drawable.Drawable$ConstantState[] sAppMarketIcon -> ak
    android.graphics.drawable.Drawable mWorkspaceBackgroundDrawable -> al
    java.util.ArrayList mSynchronouslyBoundPages -> am
    java.util.ArrayList sDumpLogs -> an
    android.content.SharedPreferences mSharedPrefs -> ao
    java.util.ArrayList mIntentsOnWorkspaceFromUpgradePath -> ap
    android.widget.ImageView mFolderIconImageView -> aq
    android.graphics.Bitmap mFolderIconBitmap -> ar
    android.graphics.Canvas mFolderIconCanvas -> as
    android.graphics.Rect mRectForFolderAnimation -> at
    com.android.launcher3.BubbleTextView mWaitingForResume -> au
    com.android.launcher3.HideFromAccessibilityHelper mHideFromAccessibilityHelper -> av
    java.lang.Runnable mBuildLayersRunnable -> aw
    java.util.ArrayList sPendingAddList -> ax
    boolean sForceEnableRotation -> a
    com.android.launcher3.Stats mStats -> ay
    android.content.BroadcastReceiver mReceiver -> az
    android.os.Handler mHandler -> aA
    java.util.ArrayList mWidgetsAndShortcuts -> aB
    java.lang.Runnable mBindPackagesUpdatedRunnable -> aC
    android.content.BroadcastReceiver mHomeKeyEventReceiver -> aD
    void onCreate(android.os.Bundle) -> onCreate
    void onUserLeaveHint() -> onUserLeaveHint
    void updateGlobalIcons() -> G
    void checkForLocaleChange() -> H
    com.android.launcher3.Stats getStats() -> a
    com.android.launcher3.DragLayer getDragLayer() -> b
    boolean isDraggingEnabled() -> c
    void setScreen(int) -> a
    boolean completeAdd(com.android.launcher3.Launcher$PendingAddArguments) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void completeTwoStageWidgetDrop(int,int) -> a
    void onStop() -> onStop
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onFinishBindingItems() -> d
    void startSettings() -> e
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    com.android.launcher3.Launcher$State intToState(int) -> e
    android.view.View createShortcut(com.android.launcher3.ShortcutInfo) -> a
    android.view.View createShortcut(int,android.view.ViewGroup,com.android.launcher3.ShortcutInfo) -> a
    int[] getSpanForWidget(android.content.Context,android.content.ComponentName,int,int) -> a
    int[] getSpanForWidget(android.content.Context,android.appwidget.AppWidgetProviderInfo) -> a
    int[] getMinSpanForWidget(android.content.Context,android.appwidget.AppWidgetProviderInfo) -> b
    void completeAddAppWidget(int,long,long,android.appwidget.AppWidgetHostView,android.appwidget.AppWidgetProviderInfo) -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onWindowVisibilityChanged(int) -> b
    void sendAdvanceMessage(long) -> a
    void updateRunning() -> I
    void addWidgetToAutoAdvanceIfNeeded(android.view.View,android.appwidget.AppWidgetProviderInfo) -> a
    void removeAppWidget(com.android.launcher3.LauncherAppWidgetInfo) -> a
    void showOutOfSpaceMessage(boolean) -> a
    com.android.launcher3.LauncherAppWidgetHost getAppWidgetHost() -> f
    com.android.launcher3.LauncherModel getModel() -> g
    void closeSystemDialogs() -> h
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onDestroy() -> onDestroy
    com.android.launcher3.DragController getDragController() -> i
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void startSearch(java.lang.String,boolean,android.os.Bundle,boolean) -> startSearch
    void startGlobalSearch(java.lang.String,boolean,android.os.Bundle,android.graphics.Rect) -> a
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onSearchRequested() -> onSearchRequested
    boolean isWorkspaceLocked() -> J
    void resetAddInfo() -> K
    void addAppWidgetImpl(int,com.android.launcher3.ItemInfo,android.appwidget.AppWidgetHostView,android.appwidget.AppWidgetProviderInfo) -> a
    void processShortcutFromDrop(android.content.ComponentName,long,long,int[],int[]) -> a
    void addAppWidgetFromDrop(com.android.launcher3.PendingAddWidgetInfo,long,long,int[],int[],int[]) -> a
    void processShortcut(android.content.Intent) -> a
    com.android.launcher3.FolderIcon addFolder(com.android.launcher3.CellLayout,long,long,int,int) -> a
    void removeFolder(com.android.launcher3.FolderInfo) -> a
    void startWallpaper() -> j
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    void onBackPressed() -> onBackPressed
    void onClick(android.view.View) -> onClick
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void onClickSearchButton(android.view.View) -> onClickSearchButton
    void onClickVoiceButton(android.view.View) -> onClickVoiceButton
    void onClickAllAppsButton(android.view.View) -> onClickAllAppsButton
    android.view.View$OnTouchListener getHapticFeedbackTouchListener() -> k
    void onClickAppMarketButton(android.view.View) -> onClickAppMarketButton
    void onInteractionEnd() -> l
    void onInteractionBegin() -> m
    void startApplicationDetailsActivity(android.content.ComponentName) -> a
    boolean startApplicationUninstallActivity(android.content.ComponentName,int) -> a
    boolean startActivity(android.view.View,android.content.Intent,java.lang.Object) -> b
    boolean startActivitySafely(android.view.View,android.content.Intent,java.lang.Object) -> a
    void copyFolderIconToImage(com.android.launcher3.FolderIcon) -> a
    void openFolder(com.android.launcher3.FolderIcon) -> b
    void closeFolder() -> n
    void closeFolder(com.android.launcher3.Folder) -> a
    boolean onLongClick(android.view.View) -> onLongClick
    boolean isHotseatLayout(android.view.View) -> a
    com.android.launcher3.Hotseat getHotseat() -> o
    android.view.View getOverviewPanel() -> p
    com.android.launcher3.SearchDropTargetBar getSearchBar() -> q
    com.android.launcher3.CellLayout getCellLayout(long,long) -> a
    com.android.launcher3.Workspace getWorkspace() -> r
    boolean isAllAppsVisible() -> s
    void setPivotsForZoom$5359e7dd(android.view.View) -> b
    void dispatchOnLauncherTransitionPrepare(android.view.View,boolean,boolean) -> a
    void dispatchOnLauncherTransitionStart(android.view.View,boolean,boolean) -> b
    void dispatchOnLauncherTransitionStep(android.view.View,float) -> a
    void dispatchOnLauncherTransitionEnd(android.view.View,boolean,boolean) -> c
    void showAppsCustomizeHelper(boolean,boolean,com.android.launcher3.AppsCustomizePagedView$ContentType) -> a
    void hideAppsCustomizeHelper$70cc8d92(com.android.launcher3.Workspace$State,boolean,java.lang.Runnable) -> a
    void onTrimMemory(int) -> onTrimMemory
    void showWorkspace(boolean) -> b
    void showWorkspace(boolean,java.lang.Runnable) -> a
    void showAllApps(boolean,com.android.launcher3.AppsCustomizePagedView$ContentType,boolean) -> a
    void enterSpringLoadedDragMode() -> t
    void exitSpringLoadedDragModeDelayed(boolean,boolean,java.lang.Runnable) -> a
    void exitSpringLoadedDragMode() -> u
    int getCurrentOrientationIndexForGlobalIcons() -> L
    android.graphics.drawable.Drawable getExternalPackageToolbarIcon(android.content.ComponentName,java.lang.String) -> a
    android.graphics.drawable.Drawable$ConstantState updateButtonWithIconFromExternalActivity(int,android.content.ComponentName,int,java.lang.String) -> a
    void updateButtonWithDrawable(int,android.graphics.drawable.Drawable$ConstantState) -> a
    void invalidatePressedFocusedStates(android.view.View,android.view.View) -> a
    android.view.View getQsbBar() -> v
    boolean updateGlobalSearchIcon() -> M
    boolean updateVoiceSearchIcon(boolean) -> f
    void updateVoiceButtonProxyVisible(boolean) -> c
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    boolean waitUntilResume(java.lang.Runnable,boolean) -> a
    void addOnResumeCallback(java.lang.Runnable) -> a
    boolean setLoadOnResume() -> w
    int getCurrentWorkspaceScreen() -> x
    void startBinding() -> y
    void bindScreens(java.util.ArrayList) -> a
    void bindAddScreens(java.util.ArrayList) -> e
    void bindAppsAdded(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList) -> a
    void bindItems(java.util.ArrayList,int,int,boolean) -> a
    void bindFolders(java.util.HashMap) -> a
    void bindAppWidget(com.android.launcher3.LauncherAppWidgetInfo) -> b
    void onPageBoundSynchronously(int) -> c
    void finishBindingItems(boolean) -> d
    boolean isAllAppsButtonRank(int) -> d
    void bindSearchablesChanged() -> z
    void bindAllApplications(java.util.ArrayList) -> b
    void bindAppsUpdated(java.util.ArrayList) -> c
    void bindComponentsRemoved(java.util.ArrayList,java.util.ArrayList,boolean) -> a
    void bindPackagesUpdated(java.util.ArrayList) -> d
    boolean isRotationEnabled() -> N
    void lockScreenOrientation() -> A
    void unlockScreenOrientation(boolean) -> e
    boolean isClingsEnabled() -> O
    com.android.launcher3.Cling initCling(int,int,boolean,boolean) -> a
    void dismissCling(com.android.launcher3.Cling,java.lang.Runnable,java.lang.String,int,boolean) -> a
    void removeCling(int) -> f
    void updateCustomContentHintVisibility() -> B
    void setCustomContentHintVisibility(com.android.launcher3.Cling,java.lang.String,boolean,boolean) -> a
    void showFirstRunWorkspaceCling() -> C
    com.android.launcher3.Cling showFirstRunFoldersCling() -> D
    boolean isFolderClingVisible() -> E
    void dismissFirstRunCling(android.view.View) -> dismissFirstRunCling
    void dismissWorkspaceCling(android.view.View) -> dismissWorkspaceCling
    void dismissFolderCling(android.view.View) -> dismissFolderCling
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    void addDumpLog(java.lang.String,java.lang.String,boolean) -> a
    void all(android.view.View) -> all
    void Radio(android.view.View) -> Radio
    void daohang(android.view.View) -> daohang
    void telephone(android.view.View) -> telephone
    void music(android.view.View) -> music
    com.android.launcher3.Workspace access$0(com.android.launcher3.Launcher) -> a
    com.android.launcher3.SearchDropTargetBar access$1(com.android.launcher3.Launcher) -> b
    void access$2(com.android.launcher3.Launcher,boolean) -> a
    com.android.launcher3.DragLayer access$3(com.android.launcher3.Launcher) -> c
    void access$4(com.android.launcher3.Launcher) -> d
    com.android.launcher3.AppsCustomizeTabHost access$5(com.android.launcher3.Launcher) -> e
    com.android.launcher3.ItemInfo access$6(com.android.launcher3.Launcher) -> f
    java.util.HashMap access$7(com.android.launcher3.Launcher) -> g
    void access$8(com.android.launcher3.Launcher,long) -> a
    java.lang.Boolean access$9(com.android.launcher3.Launcher) -> h
    android.widget.TextView access$10(com.android.launcher3.Launcher) -> i
    android.widget.TextView access$11(com.android.launcher3.Launcher) -> j
    android.widget.TextView access$12(com.android.launcher3.Launcher) -> k
    java.util.ArrayList access$13(com.android.launcher3.Launcher) -> l
    void access$14(com.android.launcher3.Launcher,java.util.ArrayList) -> a
    android.widget.FrameLayout access$15(com.android.launcher3.Launcher) -> m
    void access$16(com.android.launcher3.Launcher) -> n
    void access$17(android.content.Context,com.android.launcher3.Launcher$LocaleConfiguration) -> a
    void access$18(com.android.launcher3.Launcher$LocaleConfiguration) -> a
    void access$19(com.android.launcher3.Launcher) -> o
    void access$20(android.content.Context,com.android.launcher3.Launcher$LocaleConfiguration) -> b
    void access$21(com.android.launcher3.Launcher,int,long,long,android.appwidget.AppWidgetHostView,android.appwidget.AppWidgetProviderInfo) -> a
    com.android.launcher3.LauncherAppWidgetHost access$22(com.android.launcher3.Launcher) -> p
    java.lang.Runnable access$23(com.android.launcher3.Launcher) -> q
    android.widget.ImageView access$24(com.android.launcher3.Launcher) -> r
    void access$25(com.android.launcher3.Launcher,android.view.View,float) -> a
    void access$26(com.android.launcher3.Launcher,android.view.View,boolean,boolean) -> a
    android.animation.AnimatorSet access$27(com.android.launcher3.Launcher) -> s
    void access$28(com.android.launcher3.Launcher,android.view.View,float) -> b
    void access$29(com.android.launcher3.Launcher,android.view.View,boolean,boolean) -> b
    com.android.launcher3.AppsCustomizePagedView access$30(com.android.launcher3.Launcher) -> t
    int access$31() -> F
    android.content.SharedPreferences access$32(com.android.launcher3.Launcher) -> u
    android.os.Handler access$33(com.android.launcher3.Launcher) -> v
    java.lang.String access$34(com.android.launcher3.Launcher) -> w
com.android.launcher3.Launcher$1 -> com.android.launcher3.bw:
    com.android.launcher3.Launcher this$0 -> a
    void run() -> run
com.android.launcher3.Launcher$10 -> com.android.launcher3.bx:
    com.android.launcher3.Launcher this$0 -> a
    int val$resultCode -> b
    void run() -> run
com.android.launcher3.Launcher$11 -> com.android.launcher3.by:
    com.android.launcher3.Launcher this$0 -> a
    void onClick(android.view.View) -> onClick
com.android.launcher3.Launcher$12 -> com.android.launcher3.bz:
    com.android.launcher3.Launcher this$0 -> a
    void onClick(android.view.View) -> onClick
com.android.launcher3.Launcher$13 -> com.android.launcher3.bA:
    com.android.launcher3.Launcher this$0 -> a
    void onClick(android.view.View) -> onClick
com.android.launcher3.Launcher$14 -> com.android.launcher3.bB:
    com.android.launcher3.Launcher this$0 -> a
    int val$appWidgetId -> b
    void run() -> run
com.android.launcher3.Launcher$15 -> com.android.launcher3.bC:
    boolean mStarted -> a
    com.android.launcher3.Launcher this$0 -> b
    void onDraw() -> onDraw
    com.android.launcher3.Launcher access$0(com.android.launcher3.Launcher$15) -> a
com.android.launcher3.Launcher$15$1 -> com.android.launcher3.bD:
    com.android.launcher3.Launcher$15 this$1 -> a
    android.view.ViewTreeObserver$OnDrawListener val$listener -> b
    void run() -> run
com.android.launcher3.Launcher$16 -> com.android.launcher3.bE:
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.android.launcher3.Launcher$17 -> com.android.launcher3.bF:
    com.android.launcher3.Launcher this$0 -> a
    com.android.launcher3.CellLayout val$cl -> b
    com.android.launcher3.FolderIcon val$fi -> c
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.Launcher$18 -> com.android.launcher3.bG:
    com.android.launcher3.Launcher this$0 -> a
    android.view.View val$fromView -> b
    com.android.launcher3.AppsCustomizeTabHost val$toView -> c
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.android.launcher3.Launcher$19 -> com.android.launcher3.bH:
    com.android.launcher3.Launcher this$0 -> a
    com.android.launcher3.AppsCustomizeTabHost val$toView -> b
    android.view.View val$fromView -> c
    boolean val$animated -> d
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.Launcher$20 -> com.android.launcher3.bI:
    com.android.launcher3.Launcher this$0 -> a
    android.animation.AnimatorSet val$stateAnimation -> b
    com.android.launcher3.AppsCustomizeTabHost val$toView -> c
    float val$scale -> d
    android.view.View val$fromView -> e
    boolean val$animated -> f
    void run() -> run
com.android.launcher3.Launcher$21 -> com.android.launcher3.bJ:
    java.lang.Runnable val$startAnimRunnable -> a
    com.android.launcher3.AppsCustomizeTabHost val$toView -> b
    void onGlobalLayout() -> onGlobalLayout
com.android.launcher3.Launcher$22 -> com.android.launcher3.bK:
    com.android.launcher3.Launcher this$0 -> a
    android.view.View val$fromView -> b
    android.view.View val$toView -> c
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.android.launcher3.Launcher$23 -> com.android.launcher3.bL:
    com.android.launcher3.Launcher this$0 -> a
    android.view.View val$fromView -> b
    boolean val$animated -> c
    android.view.View val$toView -> d
    java.lang.Runnable val$onCompleteRunnable -> e
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.Launcher$24 -> com.android.launcher3.bM:
    com.android.launcher3.Launcher this$0 -> a
    boolean val$successfulDrop -> b
    java.lang.Runnable val$onCompleteRunnable -> c
    void run() -> run
com.android.launcher3.Launcher$25 -> com.android.launcher3.bN:
    com.android.launcher3.Launcher this$0 -> a
    java.util.ArrayList val$newScreens -> b
    java.util.ArrayList val$addNotAnimated -> c
    java.util.ArrayList val$addAnimated -> d
    java.util.ArrayList val$addedApps -> e
    void run() -> run
com.android.launcher3.Launcher$26 -> com.android.launcher3.bO:
    com.android.launcher3.Launcher this$0 -> a
    java.util.ArrayList val$shortcuts -> b
    int val$start -> c
    int val$end -> d
    boolean val$forceAnimateIcons -> e
    void run() -> run
com.android.launcher3.Launcher$27 -> com.android.launcher3.bP:
    android.animation.AnimatorSet val$anim -> a
    java.util.Collection val$bounceAnims -> b
    void run() -> run
com.android.launcher3.Launcher$28 -> com.android.launcher3.bQ:
    com.android.launcher3.Launcher this$0 -> a
    int val$newScreenIndex -> b
    java.lang.Runnable val$startBounceAnimRunnable -> c
    void run() -> run
com.android.launcher3.Launcher$29 -> com.android.launcher3.bR:
    com.android.launcher3.Launcher this$0 -> a
    java.util.HashMap val$folders -> b
    void run() -> run
com.android.launcher3.Launcher$3 -> com.android.launcher3.bS:
    com.android.launcher3.Launcher this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.android.launcher3.Launcher$30 -> com.android.launcher3.bT:
    com.android.launcher3.Launcher this$0 -> a
    com.android.launcher3.LauncherAppWidgetInfo val$item -> b
    void run() -> run
com.android.launcher3.Launcher$31 -> com.android.launcher3.bU:
    com.android.launcher3.Launcher this$0 -> a
    boolean val$upgradePath -> b
    void run() -> run
com.android.launcher3.Launcher$32 -> com.android.launcher3.bV:
    com.android.launcher3.Launcher this$0 -> a
    void run() -> run
com.android.launcher3.Launcher$33 -> com.android.launcher3.bW:
    com.android.launcher3.Launcher this$0 -> a
    java.util.ArrayList val$apps -> b
    void run() -> run
com.android.launcher3.Launcher$34 -> com.android.launcher3.bX:
    com.android.launcher3.Launcher this$0 -> a
    java.util.ArrayList val$packageNames -> b
    java.util.ArrayList val$appInfos -> c
    boolean val$packageRemoved -> d
    void run() -> run
com.android.launcher3.Launcher$35 -> com.android.launcher3.bY:
    com.android.launcher3.Launcher this$0 -> a
    void run() -> run
com.android.launcher3.Launcher$36 -> com.android.launcher3.bZ:
    com.android.launcher3.Launcher this$0 -> a
    com.android.launcher3.Cling val$cling -> b
    java.lang.Runnable val$postAnimationCb -> c
    java.lang.String val$flag -> d
    void run() -> run
com.android.launcher3.Launcher$36$1 -> com.android.launcher3.ca:
    com.android.launcher3.Launcher$36 this$1 -> a
    java.lang.String val$flag -> b
    void run() -> run
com.android.launcher3.Launcher$37 -> com.android.launcher3.cb:
    android.view.ViewGroup val$parent -> a
    android.view.View val$cling -> b
    void run() -> run
com.android.launcher3.Launcher$38 -> com.android.launcher3.cc:
    android.widget.TextView val$ccHint -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.Launcher$39 -> com.android.launcher3.cd:
    com.android.launcher3.Launcher this$0 -> a
    void run() -> run
com.android.launcher3.Launcher$4 -> com.android.launcher3.ce:
    com.android.launcher3.Launcher this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.android.launcher3.Launcher$4$1 -> com.android.launcher3.cf:
    android.view.View val$v -> a
    void run() -> run
com.android.launcher3.Launcher$40 -> com.android.launcher3.cg:
    com.android.launcher3.Launcher this$0 -> a
    void run() -> run
com.android.launcher3.Launcher$41 -> com.android.launcher3.ch:
    com.android.launcher3.Launcher this$0 -> a
    void run() -> run
com.android.launcher3.Launcher$5 -> com.android.launcher3.ci:
    com.android.launcher3.Launcher this$0 -> a
    void run() -> run
com.android.launcher3.Launcher$6 -> com.android.launcher3.cj:
    com.android.launcher3.Launcher this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.android.launcher3.Launcher$7 -> com.android.launcher3.ck:
    com.android.launcher3.Launcher this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.android.launcher3.Launcher$8 -> com.android.launcher3.cl:
    com.android.launcher3.Launcher this$0 -> a
    com.android.launcher3.Launcher$LocaleConfiguration val$localeConfiguration -> b
    void run() -> run
com.android.launcher3.Launcher$9 -> com.android.launcher3.cm:
    com.android.launcher3.Launcher this$0 -> a
    int val$appWidgetId -> b
    android.appwidget.AppWidgetHostView val$layout -> c
    int val$resultCode -> d
    void run() -> run
com.android.launcher3.Launcher$AppWidgetResetObserver -> com.android.launcher3.cn:
    com.android.launcher3.Launcher this$0 -> a
    void onChange(boolean) -> onChange
com.android.launcher3.Launcher$CloseSystemDialogsIntentReceiver -> com.android.launcher3.co:
    com.android.launcher3.Launcher this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.android.launcher3.Launcher$CustomContentCallbacks -> com.android.launcher3.cp:
com.android.launcher3.Launcher$LocaleConfiguration -> com.android.launcher3.cq:
    java.lang.String locale -> a
    int mcc -> b
    int mnc -> c
com.android.launcher3.Launcher$PendingAddArguments -> com.android.launcher3.cr:
    int requestCode -> a
    android.content.Intent intent -> b
    long container -> c
    long screenId -> d
    int cellX -> e
    int cellY -> f
com.android.launcher3.Launcher$QSBScroller -> com.android.launcher3.cs:
com.android.launcher3.Launcher$State -> com.android.launcher3.ct:
    com.android.launcher3.Launcher$State NONE -> a
    com.android.launcher3.Launcher$State WORKSPACE -> b
    com.android.launcher3.Launcher$State APPS_CUSTOMIZE -> c
    com.android.launcher3.Launcher$State APPS_CUSTOMIZE_SPRING_LOADED -> d
    com.android.launcher3.Launcher$State[] ENUM$VALUES -> e
    com.android.launcher3.Launcher$State[] values() -> a
com.android.launcher3.LauncherAnimUtils -> com.android.launcher3.cu:
    java.util.HashSet sAnimators -> a
    android.animation.Animator$AnimatorListener sEndAnimListener -> b
    void cancelOnDestroyActivity(android.animation.Animator) -> a
    void startAnimationAfterNextDraw(android.animation.Animator,android.view.View) -> a
    void onDestroyActivity() -> a
    android.animation.AnimatorSet createAnimatorSet() -> b
    android.animation.ValueAnimator ofFloat$296dd6d4(float[]) -> a
    android.animation.ObjectAnimator ofFloat(android.view.View,java.lang.String,float[]) -> a
    android.animation.ObjectAnimator ofPropertyValuesHolder(android.view.View,android.animation.PropertyValuesHolder[]) -> a
    android.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object,android.view.View,android.animation.PropertyValuesHolder[]) -> a
com.android.launcher3.LauncherAnimUtils$1 -> com.android.launcher3.cv:
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    void onAnimationRepeat(android.animation.Animator) -> onAnimationRepeat
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
com.android.launcher3.LauncherAnimUtils$2 -> com.android.launcher3.cw:
    boolean mStarted -> a
    android.animation.Animator val$animator -> b
    android.view.View val$view -> c
    void onDraw() -> onDraw
com.android.launcher3.LauncherAnimUtils$2$1 -> com.android.launcher3.cx:
    android.view.View val$view -> a
    android.view.ViewTreeObserver$OnDrawListener val$listener -> b
    void run() -> run
com.android.launcher3.LauncherAnimatorUpdateListener -> com.android.launcher3.cy:
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
    void onAnimationUpdate(float,float) -> a
com.android.launcher3.LauncherAppState -> com.android.launcher3.cz:
    com.android.launcher3.LauncherModel mModel -> a
    com.android.launcher3.IconCache mIconCache -> b
    com.android.launcher3.AppFilter mAppFilter -> c
    com.android.launcher3.WidgetPreviewLoader$CacheDb mWidgetPreviewCacheDb -> d
    boolean mIsScreenLarge -> e
    float mScreenDensity -> f
    int mLongPressTimeout -> g
    java.lang.ref.WeakReference sLauncherProvider -> h
    android.content.Context sContext -> i
    com.android.launcher3.LauncherAppState INSTANCE -> j
    com.android.launcher3.DynamicGrid mDynamicGrid -> k
    android.database.ContentObserver mFavoritesObserver -> l
    com.android.launcher3.LauncherAppState getInstance() -> a
    android.content.Context getContext() -> b
    void setApplicationContext(android.content.Context) -> a
    void onTerminate() -> c
    com.android.launcher3.LauncherModel setLauncher(com.android.launcher3.Launcher) -> a
    com.android.launcher3.IconCache getIconCache() -> d
    com.android.launcher3.LauncherModel getModel() -> e
    boolean shouldShowAppOrWidgetProvider(android.content.ComponentName) -> a
    com.android.launcher3.WidgetPreviewLoader$CacheDb getWidgetPreviewCacheDb() -> f
    void setLauncherProvider(com.android.launcher3.LauncherProvider) -> a
    com.android.launcher3.LauncherProvider getLauncherProvider() -> g
    com.android.launcher3.DeviceProfile initDynamicGrid(android.content.Context,int,int,int,int,int,int) -> a
    com.android.launcher3.DynamicGrid getDynamicGrid() -> h
    boolean isScreenLarge() -> i
    float getScreenDensity() -> j
    int getLongPressTimeout() -> k
    com.android.launcher3.LauncherModel access$0(com.android.launcher3.LauncherAppState) -> a
com.android.launcher3.LauncherAppState$1 -> com.android.launcher3.cA:
    com.android.launcher3.LauncherAppState this$0 -> a
    void onChange(boolean) -> onChange
com.android.launcher3.LauncherAppWidgetHost -> com.android.launcher3.cB:
    com.android.launcher3.Launcher mLauncher -> a
    android.appwidget.AppWidgetHostView onCreateView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo) -> onCreateView
    void stopListening() -> stopListening
    void onProvidersChanged() -> onProvidersChanged
com.android.launcher3.LauncherAppWidgetHostView -> com.android.launcher3.cC:
    com.android.launcher3.CheckLongPressHelper mLongPressHelper -> a
    android.view.LayoutInflater mInflater -> b
    android.content.Context mContext -> c
    int mPreviousOrientation -> d
    com.android.launcher3.DragLayer mDragLayer -> e
    android.view.View getErrorView() -> getErrorView
    void updateAppWidget(android.widget.RemoteViews) -> updateAppWidget
    boolean orientationChangedSincedInflation() -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void cancelLongPress() -> cancelLongPress
    void onTouchComplete() -> a
    int getDescendantFocusability() -> getDescendantFocusability
com.android.launcher3.LauncherAppWidgetInfo -> com.android.launcher3.cD:
    int appWidgetId -> a
    android.content.ComponentName providerName -> b
    int minWidth -> c
    int minHeight -> d
    boolean mHasNotifiedInitialWidgetSizeChanged -> s
    android.appwidget.AppWidgetHostView hostView -> e
    void onAddToDatabase(android.content.ContentValues) -> a
    void onBindAppWidget(com.android.launcher3.Launcher) -> a
    void notifyWidgetSizeChanged(com.android.launcher3.Launcher) -> b
    java.lang.String toString() -> toString
    void unbind() -> b_
com.android.launcher3.LauncherApplication -> com.android.launcher3.LauncherApplication:
    void onCreate() -> onCreate
    void onTerminate() -> onTerminate
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    java.lang.String getNowlanguage() -> a
com.android.launcher3.LauncherModel -> com.android.launcher3.cE:
    boolean mAppsCanBeOnRemoveableStorage -> j
    com.android.launcher3.LauncherAppState mApp -> k
    java.lang.Object mLock -> l
    com.android.launcher3.DeferredHandler mHandler -> m
    com.android.launcher3.LauncherModel$LoaderTask mLoaderTask -> n
    boolean mIsLoaderTaskRunning -> o
    boolean mFlushingWorkerThread -> p
    android.os.HandlerThread sWorkerThread -> q
    android.os.Handler sWorker -> r
    boolean mWorkspaceLoaded -> s
    boolean mAllAppsLoaded -> t
    java.util.ArrayList mDeferredBindRunnables -> a
    java.lang.ref.WeakReference mCallbacks -> u
    com.android.launcher3.AllAppsList mBgAllAppsList -> b
    java.lang.Object sBgLock -> c
    java.util.HashMap sBgItemsIdMap -> d
    java.util.ArrayList sBgWorkspaceItems -> e
    java.util.ArrayList sBgAppWidgets -> f
    java.util.HashMap sBgFolders -> g
    java.util.HashMap sBgDbIconCache -> h
    java.util.ArrayList sBgWorkspaceScreens -> i
    com.android.launcher3.IconCache mIconCache -> v
    android.graphics.Bitmap mDefaultIcon -> w
    int mPreviousConfigMcc -> x
    void runOnMainThread$5749810(java.lang.Runnable) -> a
    void runOnWorkerThread(java.lang.Runnable) -> b
    android.util.Pair findNextAvailableIconSpace$44b714cb(android.content.Context,int,java.util.ArrayList) -> a
    void addAndBindAddedApps(android.content.Context,java.util.ArrayList,java.util.ArrayList) -> a
    void addAndBindAddedApps(android.content.Context,java.util.ArrayList,com.android.launcher3.LauncherModel$Callbacks,java.util.ArrayList) -> a
    void unbindItemInfosAndClearQueuedBindRunnables() -> a
    void unbindWorkspaceItemsOnMainThread() -> b
    void addOrMoveItemInDatabase(android.content.Context,com.android.launcher3.ItemInfo,long,long,int,int) -> a
    void checkItemInfoLocked(long,com.android.launcher3.ItemInfo,java.lang.StackTraceElement[]) -> a
    void checkItemInfo(com.android.launcher3.ItemInfo) -> a
    void updateItemInDatabaseHelper$4976f557(android.content.Context,android.content.ContentValues,com.android.launcher3.ItemInfo) -> a
    void updateItemArrays(com.android.launcher3.ItemInfo,long,java.lang.StackTraceElement[]) -> a
    void moveItemInDatabase(android.content.Context,com.android.launcher3.ItemInfo,long,long,int,int) -> b
    void moveItemsInDatabase(android.content.Context,java.util.ArrayList,long,int) -> a
    void modifyItemInDatabase(android.content.Context,com.android.launcher3.ItemInfo,long,long,int,int,int,int) -> a
    void updateItemInDatabase(android.content.Context,com.android.launcher3.ItemInfo) -> a
    boolean shortcutExists(android.content.Context,java.lang.String,android.content.Intent) -> a
    java.util.ArrayList getItemsInLocalCoordinates(android.content.Context) -> c
    com.android.launcher3.FolderInfo getFolderById(android.content.Context,java.util.HashMap,long) -> a
    void addItemToDatabase(android.content.Context,com.android.launcher3.ItemInfo,long,long,int,int,boolean) -> a
    int getCellLayoutChildId$2f1cf18(long,long,int,int) -> a
    void deleteItemFromDatabase(android.content.Context,com.android.launcher3.ItemInfo) -> b
    void updateWorkspaceScreenOrder(android.content.Context,java.util.ArrayList) -> a
    void deleteFolderContentsFromDatabase(android.content.Context,com.android.launcher3.FolderInfo) -> a
    void initialize(com.android.launcher3.LauncherModel$Callbacks) -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void forceReload() -> j
    void resetLoadedState(boolean,boolean) -> a
    void startLoaderFromBackground() -> c
    boolean stopLoaderLocked() -> k
    void startLoader(boolean,int) -> a
    void bindRemainingSynchronousPages() -> d
    void stopLoader() -> e
    java.util.TreeMap loadWorkspaceScreensDb(android.content.Context) -> d
    boolean isLoadingWorkspace() -> f
    void enqueuePackageUpdated(com.android.launcher3.LauncherModel$PackageUpdatedTask) -> a
    java.util.ArrayList getSortedWidgetsAndShortcuts(android.content.Context) -> a
    boolean isValidPackageComponent(android.content.pm.PackageManager,android.content.ComponentName) -> a
    com.android.launcher3.ShortcutInfo getShortcutInfo(android.content.pm.PackageManager,android.content.Intent,android.content.Context) -> a
    com.android.launcher3.ShortcutInfo getShortcutInfo(android.content.pm.PackageManager,android.content.Intent,android.content.Context,android.database.Cursor,int,int,java.util.HashMap) -> a
    java.util.ArrayList filterItemInfos(java.util.Collection,com.android.launcher3.LauncherModel$ItemInfoFilter) -> a
    boolean isShortcutInfoUpdateable(com.android.launcher3.ItemInfo) -> b
    com.android.launcher3.ShortcutInfo getShortcutInfo(android.database.Cursor,android.content.Context,int,int,int,int,int) -> a
    android.graphics.Bitmap getIconFromCursor(android.database.Cursor,int,android.content.Context) -> a
    com.android.launcher3.ShortcutInfo infoFromShortcutIntent(android.content.Context,android.content.Intent,android.graphics.Bitmap) -> a
    boolean queueIconToBeChecked(java.util.HashMap,com.android.launcher3.ShortcutInfo,android.database.Cursor,int) -> a
    void updateSavedIcon(android.content.Context,com.android.launcher3.ShortcutInfo,byte[]) -> a
    com.android.launcher3.FolderInfo findOrMakeFolder(java.util.HashMap,long) -> b
    java.util.Comparator getAppNameComparator() -> g
    android.content.ComponentName getComponentNameFromResolveInfo(android.content.pm.ResolveInfo) -> a
    void dumpState() -> h
    boolean access$0(com.android.launcher3.LauncherModel) -> a
    void access$1(com.android.launcher3.LauncherModel,boolean) -> a
    com.android.launcher3.DeferredHandler access$2(com.android.launcher3.LauncherModel) -> b
    boolean access$3(com.android.launcher3.LauncherModel) -> c
    boolean access$4(com.android.launcher3.LauncherModel) -> d
    java.lang.Object access$5(com.android.launcher3.LauncherModel) -> e
    boolean access$6(com.android.launcher3.LauncherModel) -> f
    void access$7(com.android.launcher3.LauncherModel,boolean) -> b
    com.android.launcher3.LauncherModel$LoaderTask access$8(com.android.launcher3.LauncherModel) -> g
    void access$9(com.android.launcher3.LauncherModel,com.android.launcher3.LauncherModel$LoaderTask) -> a
    java.lang.ref.WeakReference access$10(com.android.launcher3.LauncherModel) -> h
    com.android.launcher3.LauncherAppState access$11(com.android.launcher3.LauncherModel) -> i
    java.util.ArrayList access$12(com.android.launcher3.LauncherModel,android.content.ComponentName) -> a
    boolean access$13(com.android.launcher3.LauncherModel,android.content.pm.PackageManager,android.content.ComponentName) -> a
    boolean access$14(com.android.launcher3.LauncherModel) -> j
    com.android.launcher3.ShortcutInfo access$15(com.android.launcher3.LauncherModel,android.database.Cursor,android.content.Context,int,int,int,int,int) -> a
    com.android.launcher3.FolderInfo access$16(java.util.HashMap,long) -> a
    java.util.TreeMap access$17(android.content.Context) -> b
    void access$18(com.android.launcher3.LauncherModel,java.lang.Runnable,int) -> a
    void access$19(com.android.launcher3.LauncherModel,boolean) -> c
    android.os.HandlerThread access$20() -> i
    com.android.launcher3.IconCache access$21(com.android.launcher3.LauncherModel) -> k
    java.util.ArrayList access$22(com.android.launcher3.LauncherModel,java.lang.String) -> a
    void access$23(com.android.launcher3.LauncherModel,java.lang.Runnable) -> a
    void access$24(com.android.launcher3.LauncherModel,boolean) -> d
com.android.launcher3.LauncherModel$1 -> com.android.launcher3.cF:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.android.launcher3.LauncherModel$10 -> com.android.launcher3.cG:
    android.content.ContentResolver val$cr -> a
    android.net.Uri val$uri -> b
    java.util.ArrayList val$screensCopy -> c
    void run() -> run
com.android.launcher3.LauncherModel$11 -> com.android.launcher3.cH:
    android.content.ContentResolver val$cr -> a
    com.android.launcher3.FolderInfo val$info -> b
    void run() -> run
com.android.launcher3.LauncherModel$12 -> com.android.launcher3.cI:
    java.lang.String val$pn -> a
    boolean filterItem(com.android.launcher3.ItemInfo,com.android.launcher3.ItemInfo,android.content.ComponentName) -> a
com.android.launcher3.LauncherModel$13 -> com.android.launcher3.cJ:
    android.content.ComponentName val$cname -> a
    boolean filterItem(com.android.launcher3.ItemInfo,com.android.launcher3.ItemInfo,android.content.ComponentName) -> a
com.android.launcher3.LauncherModel$14 -> com.android.launcher3.cK:
    java.text.Collator val$collator -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.android.launcher3.LauncherModel$2 -> com.android.launcher3.cL:
    com.android.launcher3.LauncherModel this$0 -> a
    android.content.Context val$context -> b
    java.util.ArrayList val$workspaceApps -> c
    com.android.launcher3.LauncherModel$Callbacks val$callbacks -> d
    java.util.ArrayList val$allAppsApps -> e
    void run() -> run
com.android.launcher3.LauncherModel$2$1 -> com.android.launcher3.cM:
    com.android.launcher3.LauncherModel$2 this$1 -> a
    com.android.launcher3.LauncherModel$Callbacks val$callbacks -> b
    java.util.ArrayList val$addedShortcutsFinal -> c
    java.util.ArrayList val$addedWorkspaceScreensFinal -> d
    java.util.ArrayList val$allAppsApps -> e
    void run() -> run
com.android.launcher3.LauncherModel$3 -> com.android.launcher3.cN:
    java.util.ArrayList val$tmpWorkspaceItems -> a
    java.util.ArrayList val$tmpAppWidgets -> b
    void run() -> run
com.android.launcher3.LauncherModel$4 -> com.android.launcher3.cO:
    long val$itemId -> a
    com.android.launcher3.ItemInfo val$item -> b
    java.lang.StackTraceElement[] val$stackTrace -> c
    void run() -> run
com.android.launcher3.LauncherModel$5 -> com.android.launcher3.cP:
    android.content.ContentResolver val$cr -> a
    android.net.Uri val$uri -> b
    android.content.ContentValues val$values -> c
    com.android.launcher3.ItemInfo val$item -> d
    long val$itemId -> e
    java.lang.StackTraceElement[] val$stackTrace -> f
    void run() -> run
com.android.launcher3.LauncherModel$6 -> com.android.launcher3.cQ:
    java.util.ArrayList val$items -> a
    java.util.ArrayList val$valuesList -> b
    java.lang.StackTraceElement[] val$stackTrace -> c
    android.content.ContentResolver val$cr -> d
    void run() -> run
com.android.launcher3.LauncherModel$7 -> com.android.launcher3.cR:
    com.android.launcher3.LauncherModel this$0 -> a
    void run() -> run
com.android.launcher3.LauncherModel$8 -> com.android.launcher3.cS:
    android.content.ContentResolver val$cr -> a
    boolean val$notify -> b
    android.content.ContentValues val$values -> c
    com.android.launcher3.ItemInfo val$item -> d
    void run() -> run
com.android.launcher3.LauncherModel$9 -> com.android.launcher3.cT:
    android.content.ContentResolver val$cr -> a
    android.net.Uri val$uriToDelete -> b
    com.android.launcher3.ItemInfo val$item -> c
    void run() -> run
com.android.launcher3.LauncherModel$Callbacks -> com.android.launcher3.cU:
    boolean setLoadOnResume() -> w
    int getCurrentWorkspaceScreen() -> x
    void startBinding() -> y
    void bindItems(java.util.ArrayList,int,int,boolean) -> a
    void bindScreens(java.util.ArrayList) -> a
    void bindFolders(java.util.HashMap) -> a
    void finishBindingItems(boolean) -> d
    void bindAppWidget(com.android.launcher3.LauncherAppWidgetInfo) -> b
    void bindAllApplications(java.util.ArrayList) -> b
    void bindAppsAdded(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList) -> a
    void bindAppsUpdated(java.util.ArrayList) -> c
    void bindComponentsRemoved(java.util.ArrayList,java.util.ArrayList,boolean) -> a
    void bindPackagesUpdated(java.util.ArrayList) -> d
    void bindSearchablesChanged() -> z
    boolean isAllAppsButtonRank(int) -> d
    void onPageBoundSynchronously(int) -> c
com.android.launcher3.LauncherModel$ItemInfoFilter -> com.android.launcher3.cV:
    boolean filterItem(com.android.launcher3.ItemInfo,com.android.launcher3.ItemInfo,android.content.ComponentName) -> a
com.android.launcher3.LauncherModel$LoaderTask -> com.android.launcher3.cW:
    android.content.Context mContext -> a
    boolean mIsLaunching -> b
    boolean mIsLoadingAndBindingWorkspace -> c
    boolean mStopped -> d
    boolean mLoadAndBindStepFinished -> e
    java.util.HashMap mLabelCache -> f
    com.android.launcher3.LauncherModel this$0 -> g
    boolean isLaunching() -> a
    boolean isLoadingWorkspace() -> b
    boolean loadAndBindWorkspace() -> e
    void runBindSynchronousPage(int) -> a
    void run() -> run
    void stopLocked() -> c
    com.android.launcher3.LauncherModel$Callbacks tryGetCallbacks(com.android.launcher3.LauncherModel$Callbacks) -> a
    void verifyApplications() -> f
    boolean checkItemDimensions(com.android.launcher3.ItemInfo) -> a
    boolean checkItemPlacement(java.util.HashMap,com.android.launcher3.ItemInfo,java.util.concurrent.atomic.AtomicBoolean) -> a
    void clearSBgDataStructures() -> g
    boolean loadWorkspace() -> h
    void filterCurrentWorkspaceItems(int,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList) -> a
    void filterCurrentAppWidgets(int,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList) -> b
    void filterCurrentFolders(int,java.util.HashMap,java.util.HashMap,java.util.HashMap,java.util.HashMap) -> a
    void sortWorkspaceItemsSpatially(java.util.ArrayList) -> a
    void bindWorkspaceItems(com.android.launcher3.LauncherModel$Callbacks,java.util.ArrayList,java.util.ArrayList,java.util.HashMap,java.util.ArrayList) -> a
    void bindWorkspace(int,boolean) -> a
    void onlyBindAllApps() -> i
    void dumpState() -> d
    void access$0(com.android.launcher3.LauncherModel$LoaderTask,boolean) -> a
    void access$1(com.android.launcher3.LauncherModel$LoaderTask,boolean) -> b
com.android.launcher3.LauncherModel$LoaderTask$1 -> com.android.launcher3.cX:
    com.android.launcher3.LauncherModel$LoaderTask this$1 -> a
    void run() -> run
com.android.launcher3.LauncherModel$LoaderTask$10 -> com.android.launcher3.cY:
    com.android.launcher3.LauncherModel$LoaderTask this$1 -> a
    com.android.launcher3.LauncherModel$Callbacks val$oldCallbacks -> b
    boolean val$isUpgradePath -> c
    void run() -> run
com.android.launcher3.LauncherModel$LoaderTask$11 -> com.android.launcher3.cZ:
    com.android.launcher3.LauncherModel$LoaderTask this$1 -> a
    com.android.launcher3.LauncherModel$Callbacks val$oldCallbacks -> b
    java.util.ArrayList val$list -> c
    void run() -> run
com.android.launcher3.LauncherModel$LoaderTask$12 -> com.android.launcher3.da:
    com.android.launcher3.LauncherModel$LoaderTask this$1 -> a
    com.android.launcher3.LauncherModel$Callbacks val$oldCallbacks -> b
    java.util.ArrayList val$added -> c
    void run() -> run
com.android.launcher3.LauncherModel$LoaderTask$2 -> com.android.launcher3.db:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.android.launcher3.LauncherModel$LoaderTask$3 -> com.android.launcher3.dc:
    com.android.launcher3.DeviceProfile val$grid -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.android.launcher3.LauncherModel$LoaderTask$4 -> com.android.launcher3.dd:
    com.android.launcher3.LauncherModel$LoaderTask this$1 -> a
    com.android.launcher3.LauncherModel$Callbacks val$oldCallbacks -> b
    java.util.ArrayList val$orderedScreens -> c
    void run() -> run
com.android.launcher3.LauncherModel$LoaderTask$5 -> com.android.launcher3.de:
    com.android.launcher3.LauncherModel$LoaderTask this$1 -> a
    com.android.launcher3.LauncherModel$Callbacks val$oldCallbacks -> b
    java.util.ArrayList val$workspaceItems -> c
    int val$start -> d
    int val$chunkSize -> e
    void run() -> run
com.android.launcher3.LauncherModel$LoaderTask$6 -> com.android.launcher3.df:
    com.android.launcher3.LauncherModel$LoaderTask this$1 -> a
    com.android.launcher3.LauncherModel$Callbacks val$oldCallbacks -> b
    java.util.HashMap val$folders -> c
    void run() -> run
com.android.launcher3.LauncherModel$LoaderTask$7 -> com.android.launcher3.dg:
    com.android.launcher3.LauncherModel$LoaderTask this$1 -> a
    com.android.launcher3.LauncherModel$Callbacks val$oldCallbacks -> b
    com.android.launcher3.LauncherAppWidgetInfo val$widget -> c
    void run() -> run
com.android.launcher3.LauncherModel$LoaderTask$8 -> com.android.launcher3.dh:
    com.android.launcher3.LauncherModel$LoaderTask this$1 -> a
    com.android.launcher3.LauncherModel$Callbacks val$oldCallbacks -> b
    void run() -> run
com.android.launcher3.LauncherModel$LoaderTask$9 -> com.android.launcher3.di:
    com.android.launcher3.LauncherModel$LoaderTask this$1 -> a
    com.android.launcher3.LauncherModel$Callbacks val$oldCallbacks -> b
    int val$currentScreen -> c
    void run() -> run
com.android.launcher3.LauncherModel$PackageUpdatedTask -> com.android.launcher3.dj:
    int mOp -> b
    java.lang.String[] mPackages -> c
    com.android.launcher3.LauncherModel this$0 -> a
    void run() -> run
com.android.launcher3.LauncherModel$PackageUpdatedTask$1 -> com.android.launcher3.dk:
    com.android.launcher3.LauncherModel$PackageUpdatedTask this$1 -> a
    com.android.launcher3.LauncherModel$Callbacks val$callbacks -> b
    java.util.ArrayList val$modifiedFinal -> c
    void run() -> run
com.android.launcher3.LauncherModel$PackageUpdatedTask$2 -> com.android.launcher3.dl:
    com.android.launcher3.LauncherModel$PackageUpdatedTask this$1 -> a
    com.android.launcher3.LauncherModel$Callbacks val$callbacks -> b
    java.util.ArrayList val$removedPackageNames -> c
    java.util.ArrayList val$removedApps -> d
    boolean val$packageRemoved -> e
    void run() -> run
com.android.launcher3.LauncherModel$PackageUpdatedTask$3 -> com.android.launcher3.dm:
    com.android.launcher3.LauncherModel$PackageUpdatedTask this$1 -> a
    com.android.launcher3.LauncherModel$Callbacks val$callbacks -> b
    java.util.ArrayList val$widgetsAndShortcuts -> c
    void run() -> run
com.android.launcher3.LauncherModel$PackageUpdatedTask$4 -> com.android.launcher3.dn:
    com.android.launcher3.LauncherModel$PackageUpdatedTask this$1 -> a
    com.android.launcher3.LauncherModel$Callbacks val$callbacks -> b
    void run() -> run
com.android.launcher3.LauncherModel$ShortcutNameComparator -> com.android.launcher3.do:
    java.text.Collator mCollator -> a
    android.content.pm.PackageManager mPackageManager -> b
    java.util.HashMap mLabelCache -> c
    int compare(java.lang.Object,java.lang.Object) -> compare
com.android.launcher3.LauncherModel$WidgetAndShortcutNameComparator -> com.android.launcher3.dp:
    java.text.Collator mCollator -> a
    android.content.pm.PackageManager mPackageManager -> b
    java.util.HashMap mLabelCache -> c
    int compare(java.lang.Object,java.lang.Object) -> compare
com.android.launcher3.LauncherProvider -> com.android.launcher3.LauncherProvider:
    android.net.Uri CONTENT_APPWIDGET_RESET_URI -> a
    com.android.launcher3.LauncherProvider$DatabaseHelper mOpenHelper -> b
    boolean sJustLoadedFromOldDb -> c
    boolean onCreate() -> onCreate
    java.lang.String getType(android.net.Uri) -> getType
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    long dbInsertAndCheck$50e8c109(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,android.content.ContentValues) -> a
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    int bulkInsert(android.net.Uri,android.content.ContentValues[]) -> bulkInsert
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    void sendNotify(android.net.Uri) -> a
    void addModifiedTime(android.content.ContentValues) -> a
    long generateNewItemId() -> a
    void updateMaxItemId(long) -> a
    long generateNewScreenId() -> b
    void updateMaxScreenId(long) -> b
    boolean justLoadedOldDb() -> c
    void loadDefaultFavoritesIfNecessary(int) -> a
    java.lang.String buildOrWhereString(java.lang.String,int[]) -> a
    long access$0(com.android.launcher3.LauncherProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,android.content.ContentValues) -> a
    void access$1(boolean) -> a
    void access$2(android.database.sqlite.SQLiteDatabase,long) -> a
com.android.launcher3.LauncherProvider$ContentValuesCallback -> com.android.launcher3.dq:
    com.android.launcher3.LauncherProvider$DatabaseHelper this$1 -> a
    void onRow(android.content.ContentValues) -> a
com.android.launcher3.LauncherProvider$DatabaseHelper -> com.android.launcher3.dr:
    android.content.Context mContext -> a
    android.appwidget.AppWidgetHost mAppWidgetHost -> b
    long mMaxItemId -> c
    long mMaxScreenId -> d
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void setFlagJustLoadedOldDb() -> c
    boolean convertDatabase(android.database.sqlite.SQLiteDatabase,android.net.Uri,com.android.launcher3.LauncherProvider$ContentValuesCallback,boolean) -> a
    int copyFromCursor(android.database.sqlite.SQLiteDatabase,android.database.Cursor,com.android.launcher3.LauncherProvider$ContentValuesCallback) -> a
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    boolean updateContactsShortcuts(android.database.sqlite.SQLiteDatabase) -> a
    long generateNewItemId() -> a
    void updateMaxItemId(long) -> a
    long initializeMaxItemId(android.database.sqlite.SQLiteDatabase) -> b
    long generateNewScreenId() -> b
    void updateMaxScreenId(long) -> b
    void convertWidgets(android.database.sqlite.SQLiteDatabase) -> c
    void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String) -> a
    int loadFavorites(android.database.sqlite.SQLiteDatabase,int) -> a
    long addAppShortcut(android.database.sqlite.SQLiteDatabase,android.content.ContentValues,android.content.res.TypedArray,android.content.pm.PackageManager,android.content.Intent) -> a
    android.content.ComponentName getSearchWidgetProvider() -> d
    boolean addAppWidget$524907a(android.content.res.XmlResourceParser,android.util.AttributeSet,android.database.sqlite.SQLiteDatabase,android.content.ContentValues,android.content.res.TypedArray,android.content.pm.PackageManager) -> a
    boolean addAppWidget(android.database.sqlite.SQLiteDatabase,android.content.ContentValues,android.content.ComponentName,int,int,android.os.Bundle) -> a
    long addUriShortcut(android.database.sqlite.SQLiteDatabase,android.content.ContentValues,android.content.res.TypedArray) -> a
    long access$0(com.android.launcher3.LauncherProvider$DatabaseHelper,long) -> a
    int access$1(com.android.launcher3.LauncherProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,int) -> a
    void access$2(com.android.launcher3.LauncherProvider$DatabaseHelper) -> a
com.android.launcher3.LauncherProvider$SqlArguments -> com.android.launcher3.ds:
    java.lang.String table -> a
    java.lang.String where -> b
    java.lang.String[] args -> c
com.android.launcher3.LauncherSettings$ChangeLogColumns -> com.android.launcher3.dt:
com.android.launcher3.LauncherSettings$Favorites -> com.android.launcher3.du:
    android.net.Uri CONTENT_URI -> a
    android.net.Uri OLD_CONTENT_URI -> b
    android.net.Uri CONTENT_URI_NO_NOTIFICATION -> c
    android.net.Uri getContentUri(long,boolean) -> a
com.android.launcher3.LauncherSettings$WorkspaceScreens -> com.android.launcher3.dv:
    android.net.Uri CONTENT_URI -> a
com.android.launcher3.LauncherTransitionable -> com.android.launcher3.dw:
    android.view.View getContent() -> e
    void onLauncherTransitionPrepare(com.android.launcher3.Launcher,boolean,boolean) -> a
    void onLauncherTransitionStart$f0a0f3a(com.android.launcher3.Launcher,boolean) -> a
    void onLauncherTransitionStep$29c633c6(float) -> a
    void onLauncherTransitionEnd(com.android.launcher3.Launcher,boolean,boolean) -> b
com.android.launcher3.LauncherViewPropertyAnimator -> com.android.launcher3.dx:
    java.util.EnumSet mPropertiesToSet -> a
    android.view.ViewPropertyAnimator mViewPropertyAnimator -> b
    android.view.View mTarget -> c
    float mTranslationY -> d
    float mScaleX -> e
    float mScaleY -> f
    float mAlpha -> g
    long mStartDelay -> h
    long mDuration -> i
    android.animation.TimeInterpolator mInterpolator -> j
    java.util.ArrayList mListeners -> k
    boolean mRunning -> l
    com.android.launcher3.FirstFrameAnimatorHelper mFirstFrameHelper -> m
    void addListener(android.animation.Animator$AnimatorListener) -> addListener
    void cancel() -> cancel
    android.animation.Animator clone() -> clone
    void end() -> end
    long getDuration() -> getDuration
    java.util.ArrayList getListeners() -> getListeners
    long getStartDelay() -> getStartDelay
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationRepeat(android.animation.Animator) -> onAnimationRepeat
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    boolean isRunning() -> isRunning
    boolean isStarted() -> isStarted
    void removeAllListeners() -> removeAllListeners
    void removeListener(android.animation.Animator$AnimatorListener) -> removeListener
    android.animation.Animator setDuration(long) -> setDuration
    void setInterpolator(android.animation.TimeInterpolator) -> setInterpolator
    void setStartDelay(long) -> setStartDelay
    void setTarget(java.lang.Object) -> setTarget
    void setupEndValues() -> setupEndValues
    void setupStartValues() -> setupStartValues
    void start() -> start
    com.android.launcher3.LauncherViewPropertyAnimator translationY(float) -> a
    com.android.launcher3.LauncherViewPropertyAnimator scaleX(float) -> b
    com.android.launcher3.LauncherViewPropertyAnimator scaleY(float) -> c
    com.android.launcher3.LauncherViewPropertyAnimator alpha(float) -> d
com.android.launcher3.LauncherViewPropertyAnimator$Properties -> com.android.launcher3.dy:
    com.android.launcher3.LauncherViewPropertyAnimator$Properties TRANSLATION_X -> a
    com.android.launcher3.LauncherViewPropertyAnimator$Properties TRANSLATION_Y -> b
    com.android.launcher3.LauncherViewPropertyAnimator$Properties SCALE_X -> c
    com.android.launcher3.LauncherViewPropertyAnimator$Properties SCALE_Y -> d
    com.android.launcher3.LauncherViewPropertyAnimator$Properties ROTATION_Y -> e
    com.android.launcher3.LauncherViewPropertyAnimator$Properties ALPHA -> f
    com.android.launcher3.LauncherViewPropertyAnimator$Properties START_DELAY -> g
    com.android.launcher3.LauncherViewPropertyAnimator$Properties DURATION -> h
    com.android.launcher3.LauncherViewPropertyAnimator$Properties INTERPOLATOR -> i
    com.android.launcher3.LauncherViewPropertyAnimator$Properties WITH_LAYER -> j
com.android.launcher3.LiveWallpaperListAdapter -> com.android.launcher3.dz:
    android.view.LayoutInflater mInflater -> a
    android.content.pm.PackageManager mPackageManager -> b
    java.util.List mWallpapers -> c
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
    java.util.List access$1(com.android.launcher3.LiveWallpaperListAdapter) -> a
com.android.launcher3.LiveWallpaperListAdapter$LiveWallpaperEnumerator -> com.android.launcher3.dA:
    android.content.Context mContext -> a
    int mWallpaperPosition -> b
    com.android.launcher3.LiveWallpaperListAdapter this$0 -> c
    java.lang.Void doInBackground(java.util.List[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onProgressUpdate(java.lang.Object[]) -> onProgressUpdate
com.android.launcher3.LiveWallpaperListAdapter$LiveWallpaperEnumerator$1 -> com.android.launcher3.dB:
    java.text.Collator mCollator -> a
    android.content.pm.PackageManager val$packageManager -> b
    int compare(java.lang.Object,java.lang.Object) -> compare
com.android.launcher3.LiveWallpaperListAdapter$LiveWallpaperTile -> com.android.launcher3.dC:
    android.graphics.drawable.Drawable mThumbnail -> a
    android.app.WallpaperInfo mInfo -> b
    void onClick(com.android.launcher3.WallpaperPickerActivity) -> a
    android.graphics.drawable.Drawable access$0(com.android.launcher3.LiveWallpaperListAdapter$LiveWallpaperTile) -> a
    android.app.WallpaperInfo access$1(com.android.launcher3.LiveWallpaperListAdapter$LiveWallpaperTile) -> b
com.android.launcher3.MemoryDumpActivity -> com.android.launcher3.MemoryDumpActivity:
    java.lang.String TAG -> TAG
    void onCreate(android.os.Bundle) -> onCreate
    java.lang.String zipUp(java.util.ArrayList) -> zipUp
    void dumpHprofAndShare(android.content.Context,com.android.launcher3.MemoryTracker) -> dumpHprofAndShare
    void onStart() -> onStart
    void startDump(android.content.Context) -> startDump
    void startDump(android.content.Context,java.lang.Runnable) -> startDump
com.android.launcher3.MemoryDumpActivity$1 -> com.android.launcher3.dD:
    com.android.launcher3.MemoryDumpActivity this$0 -> a
    void run() -> run
com.android.launcher3.MemoryDumpActivity$2 -> com.android.launcher3.dE:
    android.content.Context val$context -> a
    java.lang.Runnable val$andThen -> b
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.android.launcher3.MemoryTracker -> com.android.launcher3.MemoryTracker:
    java.lang.String TAG -> b
    android.util.LongSparseArray mData -> c
    java.util.ArrayList mPids -> d
    int[] mPidsArray -> e
    java.lang.Object mLock -> f
    android.os.Handler mHandler -> a
    android.app.ActivityManager mAm -> g
    android.os.IBinder mBinder -> h
    void startTrackingMe(android.content.Context,java.lang.String) -> a
    com.android.launcher3.MemoryTracker$ProcessMemInfo getMemInfo(int) -> a
    int[] getTrackedProcesses() -> a
    void startTrackingProcess(int,java.lang.String,long) -> a
    void updatePidsArrayL() -> c
    void update() -> b
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    android.os.IBinder onBind(android.content.Intent) -> onBind
com.android.launcher3.MemoryTracker$1 -> com.android.launcher3.dF:
    com.android.launcher3.MemoryTracker this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.android.launcher3.MemoryTracker$MemoryTrackerInterface -> com.android.launcher3.dG:
    com.android.launcher3.MemoryTracker this$0 -> a
    com.android.launcher3.MemoryTracker getService() -> a
com.android.launcher3.MemoryTracker$ProcessMemInfo -> com.android.launcher3.dH:
    long startTime -> g
    long currentPss -> a
    long currentUss -> b
    long[] pss -> c
    long[] uss -> d
    long max -> e
    int head -> f
    long getUptime() -> a
com.android.launcher3.OnAlarmListener -> com.android.launcher3.dI:
    void onAlarm$763c5805() -> a
com.android.launcher3.PackageChangedReceiver -> com.android.launcher3.PackageChangedReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.android.launcher3.Page -> com.android.launcher3.dJ:
    int getPageChildCount() -> b
    void removeAllViewsOnPage() -> a
com.android.launcher3.PageIndicator -> com.android.launcher3.PageIndicator:
    android.view.LayoutInflater mLayoutInflater -> a
    int[] mWindowRange -> b
    int mMaxWindowSize -> c
    java.util.ArrayList mMarkers -> d
    int mActiveMarkerIndex -> e
    void offsetWindowCenterTo(int,boolean) -> b
    void addMarker(int,com.android.launcher3.PageIndicator$PageMarkerResources,boolean) -> a
    void addMarkers(java.util.ArrayList,boolean) -> a
    void updateMarker(int,com.android.launcher3.PageIndicator$PageMarkerResources) -> a
    void removeMarker(int,boolean) -> a
    void removeAllMarkers(boolean) -> a
    void setActiveMarker(int) -> a
com.android.launcher3.PageIndicator$PageMarkerResources -> com.android.launcher3.dK:
    int activeId -> a
    int inactiveId -> b
com.android.launcher3.PageIndicatorMarker -> com.android.launcher3.PageIndicatorMarker:
    android.widget.ImageView mActiveMarker -> a
    android.widget.ImageView mInactiveMarker -> b
    void onFinishInflate() -> onFinishInflate
    void setMarkerDrawables(int,int) -> a
    void activate(boolean) -> a
    void inactivate(boolean) -> b
com.android.launcher3.PagedView -> com.android.launcher3.dL:
    boolean mFreeScroll -> a
    int mFreeScrollMinScrollX -> b
    int mFreeScrollMaxScrollX -> c
    int mFlingThresholdVelocity -> f
    int mMinFlingVelocity -> d
    int mMinSnapVelocity -> e
    float mDensity -> g
    float mSmoothingTime -> h
    float mTouchX -> i
    boolean mFirstLayout -> j
    int mNormalChildHeight -> R
    int mCurrentPage -> k
    int mRestorePage -> l
    int mChildCountOnLastLayout -> S
    int mNextPage -> m
    int mMaxScrollX -> n
    android.widget.Scroller mScroller -> o
    android.view.VelocityTracker mVelocityTracker -> T
    float mParentDownMotionX -> U
    float mParentDownMotionY -> V
    float mDownMotionX -> W
    float mDownMotionY -> aa
    float mDownScrollX -> ab
    float mDragViewBaselineLeft -> ac
    float mLastMotionX -> p
    float mLastMotionXRemainder -> ad
    float mLastMotionY -> q
    float mTotalMotionX -> ae
    int mLastScreenCenter -> af
    boolean mCancelTap -> ag
    int[] mPageScrolls -> ah
    int mTouchState -> r
    boolean mForceScreenScrolled -> ai
    android.view.View$OnLongClickListener mLongClickListener -> s
    int mTouchSlop -> t
    int mPagingTouchSlop -> aj
    int mMaximumVelocity -> ak
    int mPageSpacing -> u
    int mPageLayoutPaddingTop -> v
    int mPageLayoutPaddingBottom -> w
    int mPageLayoutPaddingLeft -> x
    int mPageLayoutPaddingRight -> y
    int mCellCountX -> z
    int mCellCountY -> A
    boolean mCenterPagesVertically -> B
    boolean mAllowOverScroll -> al
    int mUnboundedScrollX -> C
    int[] mTempVisiblePagesRange -> D
    boolean mForceDrawAllChildrenNextFrame -> E
    int mOverScrollX -> F
    int mActivePointerId -> G
    java.util.ArrayList mDirtyPageContent -> H
    boolean mContentIsRefreshable -> I
    boolean mFadeInAdjacentScreens -> J
    boolean mUsePagingTouchSlop -> K
    boolean mDeferScrollUpdate -> L
    boolean mDeferLoadAssociatedPagesUntilScrollCompletes -> am
    boolean mIsPageMoving -> M
    boolean mIsDataReady -> an
    boolean mAllowLongPress -> N
    int mPageIndicatorViewId -> ao
    com.android.launcher3.PageIndicator mPageIndicator -> ap
    boolean mAllowPagedViewAnimations -> aq
    android.graphics.Rect mViewport -> ar
    int REORDERING_DROP_REPOSITION_DURATION -> as
    int REORDERING_REORDER_REPOSITION_DURATION -> O
    int REORDERING_SIDE_PAGE_HOVER_TIMEOUT -> at
    float mMinScale -> au
    boolean mUseMinScale -> av
    android.view.View mDragView -> P
    java.lang.Runnable mSidePageHoverRunnable -> aw
    int mSidePageHoverIndex -> ax
    boolean mReorderingStarted -> ay
    boolean mIsReordering -> az
    int NUM_ANIMATIONS_RUNNING_BEFORE_ZOOM_OUT -> aA
    int mPostReorderingPreZoomInRemainingAnimationCount -> aB
    java.lang.Runnable mPostReorderingPreZoomInRunnable -> aC
    android.graphics.Matrix mTmpInvMatrix -> aD
    float[] mTmpPoint -> aE
    int[] mTmpIntPoint -> aF
    android.graphics.Rect mTmpRect -> aG
    android.graphics.Rect mAltTmpRect -> aH
    int mFlingToDeleteThresholdVelocity -> aI
    boolean mDeferringForDelete -> aJ
    int DELETE_SLIDE_IN_SIDE_PAGE_DURATION -> aK
    int DRAG_TO_DELETE_FADE_OUT_DURATION -> aL
    boolean mAutoComputePageSpacing -> aM
    boolean mRecomputePageSpacing -> aN
    android.graphics.Rect mInsets -> Q
    int mFirstChildLeft -> aO
    void init() -> a
    void onAttachedToWindow() -> onAttachedToWindow
    java.lang.String getPageIndicatorDescription() -> q
    android.view.View$OnClickListener getPageIndicatorClickListener() -> r
    void onDetachedFromWindow() -> onDetachedFromWindow
    float[] mapPointFromViewToParent(android.view.View,float,float) -> a
    float[] mapPointFromParentToView(android.view.View,float,float) -> b
    void updateDragViewTranslationDuringDrag() -> b
    void setMinScale(float) -> c
    void setScaleX(float) -> setScaleX
    int getViewportHeight() -> s
    int getViewportOffsetX() -> t
    com.android.launcher3.PageIndicator getPageIndicator() -> u
    com.android.launcher3.PageIndicator$PageMarkerResources getPageIndicatorMarker(int) -> g
    boolean isLayoutRtl() -> v
    void setDataIsReady() -> w
    boolean isDataReady() -> x
    int getCurrentPage() -> y
    int getNextPage() -> z
    android.view.View getPageAt(int) -> b
    int indexToPage(int) -> c
    void updateCurrentPageScroll() -> A
    void pauseScrolling() -> B
    void resumeScrolling() -> C
    void setCurrentPage(int) -> h
    void setRestorePage(int) -> i
    void notifyPageSwitchListener() -> D
    void pageBeginMoving() -> c
    boolean isPageMoving() -> E
    void onPageBeginMoving() -> F
    void onPageEndMoving() -> k
    void setOnLongClickListener(android.view.View$OnLongClickListener) -> setOnLongClickListener
    void scrollBy(int,int) -> scrollBy
    void scrollTo(int,int) -> scrollTo
    void sendScrollAccessibilityEvent() -> e
    boolean computeScrollHelper() -> G
    void computeScroll() -> computeScroll
    com.android.launcher3.PagedView$LayoutParams generateDefaultLayoutParams() -> f
    int getNormalChildHeight() -> H
    void onMeasure(int,int) -> onMeasure
    void setPageSpacing(int) -> a
    int getFirstChildLeft() -> I
    void onLayout(boolean,int,int,int,int) -> onLayout
    void screenScrolled(int) -> d
    void enablePagedViewAnimations() -> J
    void disablePagedViewAnimations() -> K
    void onChildViewAdded(android.view.View,android.view.View) -> onChildViewAdded
    void onChildViewRemoved(android.view.View,android.view.View) -> onChildViewRemoved
    void removeMarkerForView(int) -> r
    void removeView(android.view.View) -> removeView
    void removeViewInLayout(android.view.View) -> removeViewInLayout
    void removeViewAt(int) -> removeViewAt
    void removeAllViewsInLayout() -> removeAllViewsInLayout
    int getChildOffset(int) -> j
    void getOverviewModePages(int[]) -> a
    void getVisiblePages(int[]) -> b
    boolean shouldDrawChild(android.view.View) -> c
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean) -> requestChildRectangleOnScreen
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchUnhandledMove(android.view.View,int) -> dispatchUnhandledMove
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void focusableViewAvailable(android.view.View) -> focusableViewAvailable
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    boolean isTouchPointInViewportWithBuffer(int,int) -> c
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void determineScrollingStart(android.view.MotionEvent) -> b
    void determineScrollingStart(android.view.MotionEvent,float) -> a
    void cancelCurrentPageLongPress() -> L
    float getScrollProgress(int,android.view.View,int) -> a
    int getScrollForPage(int) -> k
    int getLayoutTransitionOffsetForPage(int) -> l
    void acceleratedOverScroll(float) -> d
    void overScroll(float) -> b
    void enableFreeScroll() -> M
    void disableFreeScroll(int) -> m
    void updateFreescrollBounds() -> g
    void setEnableFreeScroll(boolean,int) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onRemoveView$53599cc9() -> N
    void onAddView$5359dc9a() -> O
    void resetTouchState() -> h
    boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
    void acquireVelocityTrackerAndAddMovement(android.view.MotionEvent) -> a
    void releaseVelocityTracker() -> j
    void onSecondaryPointerUp(android.view.MotionEvent) -> c
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    int getChildWidth(int) -> n
    int getPageNearestToCenterOfScreen() -> P
    void snapToDestination() -> Q
    void snapToPageWithVelocity(int,int) -> a
    void snapToPage(int) -> o
    void snapToPage(int,int) -> b
    void snapToPage(int,int,boolean) -> a
    void snapToPage(int,int,int) -> a_
    void snapToPage(int,int,int,boolean) -> a
    void scrollLeft() -> c_
    void scrollRight() -> d_
    int getPageForView(android.view.View) -> d
    boolean allowLongPress() -> R
    boolean performLongClick() -> performLongClick
    void loadAssociatedPages(int) -> p
    void loadAssociatedPages(int,boolean) -> b
    int getAssociatedLowerPageBound(int) -> e
    int getAssociatedUpperPageBound(int) -> f
    void syncPages() -> i
    void syncPageItems(int,boolean) -> a
    void invalidatePageData() -> S
    void invalidatePageData(int) -> q
    void invalidatePageData(int,boolean) -> c
    void onStartReordering() -> T
    void onPostReorderingAnimationCompleted() -> l
    void onEndReordering() -> U
    boolean startReordering(android.view.View) -> e
    boolean isReordering(boolean) -> a
    void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void sendAccessibilityEvent(int) -> sendAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    boolean performAccessibilityAction(int,android.os.Bundle) -> performAccessibilityAction
    java.lang.String getCurrentPageDescription() -> p
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void access$1(com.android.launcher3.PagedView,int) -> a
    com.android.launcher3.PageIndicator access$2(com.android.launcher3.PagedView) -> a
    void access$3(com.android.launcher3.PagedView) -> b
com.android.launcher3.PagedView$1 -> com.android.launcher3.dM:
    com.android.launcher3.PagedView this$0 -> a
    int val$pageUnderPointIndex -> b
    int val$dragViewIndex -> c
    void run() -> run
com.android.launcher3.PagedView$2 -> com.android.launcher3.dN:
    com.android.launcher3.PagedView this$0 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.PagedView$3 -> com.android.launcher3.dO:
    com.android.launcher3.PagedView this$0 -> a
    void run() -> run
com.android.launcher3.PagedView$4 -> com.android.launcher3.dP:
    com.android.launcher3.PagedView this$0 -> a
    java.lang.Runnable val$onCompleteRunnable -> b
    void run() -> run
com.android.launcher3.PagedView$LayoutParams -> com.android.launcher3.dQ:
    boolean isFullScreenPage -> a
com.android.launcher3.PagedView$ScrollInterpolator -> com.android.launcher3.dR:
    float getInterpolation(float) -> getInterpolation
com.android.launcher3.PagedViewCellLayout -> com.android.launcher3.dS:
    int mCellCountX -> a
    int mCellCountY -> b
    int mOriginalCellWidth -> c
    int mOriginalCellHeight -> d
    int mCellWidth -> e
    int mCellHeight -> f
    int mOriginalWidthGap -> g
    int mOriginalHeightGap -> h
    int mWidthGap -> i
    int mHeightGap -> j
    com.android.launcher3.PagedViewCellLayoutChildren mChildren -> k
    void cancelLongPress() -> cancelLongPress
    void removeAllViewsOnPage() -> a
    int getPageChildCount() -> b
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setChildrenDrawingCacheEnabled(boolean) -> setChildrenDrawingCacheEnabled
    int[] estimateCellPosition(int,int) -> a
    int estimateCellWidth(int) -> a
    int estimateCellHeight(int) -> b
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
com.android.launcher3.PagedViewCellLayout$LayoutParams -> com.android.launcher3.dT:
    int cellHSpan -> c
    int cellVSpan -> d
    int x -> a
    int y -> b
    void setup$1fe0db2d(int,int,int,int,int,int) -> a
    java.lang.String toString() -> toString
com.android.launcher3.PagedViewCellLayoutChildren -> com.android.launcher3.dU:
    int mCellWidth -> a
    int mCellHeight -> b
    int mWidthGap -> c
    int mHeightGap -> d
    void cancelLongPress() -> cancelLongPress
    void setGap(int,int) -> a
    void setCellDimensions(int,int) -> b
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void setChildrenDrawingCacheEnabled(boolean) -> setChildrenDrawingCacheEnabled
com.android.launcher3.PagedViewGridLayout -> com.android.launcher3.dV:
    int mCellCountX -> a
    int mCellCountY -> b
    java.lang.Runnable mOnLayoutListener -> c
    int getCellCountX() -> c
    int getCellCountY() -> d
    void resetChildrenOnKeyListeners() -> e
    void onMeasure(int,int) -> onMeasure
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setOnLayoutListener(java.lang.Runnable) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void removeAllViewsOnPage() -> a
    int getPageChildCount() -> b
com.android.launcher3.PagedViewIcon -> com.android.launcher3.PagedViewIcon:
    com.android.launcher3.PagedViewIcon$PressedCallback mPressedCallback -> a
    boolean mLockDrawableState -> b
    android.graphics.Bitmap mIcon -> c
    void onFinishInflate() -> onFinishInflate
    void applyFromApplicationInfo$46ce4548(com.android.launcher3.AppInfo,com.android.launcher3.PagedViewIcon$PressedCallback) -> a
    void lockDrawableState() -> a
    void resetDrawableState() -> b
    void drawableStateChanged() -> drawableStateChanged
    void draw(android.graphics.Canvas) -> draw
com.android.launcher3.PagedViewIcon$1 -> com.android.launcher3.dW:
    com.android.launcher3.PagedViewIcon this$0 -> a
    void run() -> run
com.android.launcher3.PagedViewIcon$PressedCallback -> com.android.launcher3.dX:
    void iconPressed(com.android.launcher3.PagedViewIcon) -> a
com.android.launcher3.PagedViewWidget -> com.android.launcher3.PagedViewWidget:
    boolean sDeletePreviewsWhenDetachedFromWindow -> d
    boolean sRecyclePreviewsWhenDetachedFromWindow -> e
    java.lang.String mDimensionsFormatString -> f
    com.android.launcher3.PagedViewWidget$CheckForShortPress mPendingCheckForShortPress -> g
    com.android.launcher3.PagedViewWidget$ShortPressListener mShortPressListener -> a
    boolean mShortPressTriggered -> b
    com.android.launcher3.PagedViewWidget sShortpressTarget -> c
    boolean mIsAppWidget -> h
    android.graphics.Rect mOriginalImagePadding -> i
    java.lang.Object mInfo -> j
    com.android.launcher3.WidgetPreviewLoader mWidgetPreviewLoader -> k
    void onFinishInflate() -> onFinishInflate
    void setDeletePreviewsWhenDetachedFromWindow(boolean) -> a
    void setRecyclePreviewsWhenDetachedFromWindow(boolean) -> b
    void onDetachedFromWindow() -> onDetachedFromWindow
    void applyFromAppWidgetProviderInfo(android.appwidget.AppWidgetProviderInfo,int,int[],com.android.launcher3.WidgetPreviewLoader) -> a
    void applyFromResolveInfo(android.content.pm.PackageManager,android.content.pm.ResolveInfo,com.android.launcher3.WidgetPreviewLoader) -> a
    int[] getPreviewSize() -> a
    void applyPreview$3a4ab42e(com.android.launcher3.FastBitmapDrawable) -> a
    void setShortPressListener(com.android.launcher3.PagedViewWidget$ShortPressListener) -> a
    void cleanUpShortPress() -> c
    void resetShortPressTarget() -> b
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.android.launcher3.PagedViewWidget$CheckForShortPress -> com.android.launcher3.dY:
    com.android.launcher3.PagedViewWidget this$0 -> a
    void run() -> run
com.android.launcher3.PagedViewWidget$ShortPressListener -> com.android.launcher3.dZ:
    void onShortPress(android.view.View) -> a
    void cleanUpShortPress$3c7ec8c3() -> d
com.android.launcher3.PagedViewWidgetImageView -> com.android.launcher3.PagedViewWidgetImageView:
    boolean mAllowRequestLayout -> a
    void requestLayout() -> requestLayout
    void onDraw(android.graphics.Canvas) -> onDraw
com.android.launcher3.PagedViewWithDraggableItems -> com.android.launcher3.ea:
    android.view.View mLastTouchedItem -> a
    boolean mIsDragging -> b
    boolean mIsDragEnabled -> c
    float mDragSlopeThreshold -> d
    com.android.launcher3.Launcher mLauncher -> e
    boolean beginDragging(android.view.View) -> b
    void cancelDragging() -> b
    void handleTouchEvent(android.view.MotionEvent) -> c
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onLongClick(android.view.View) -> onLongClick
    void determineScrollingStart(android.view.MotionEvent) -> b
    void determineDraggingStart(android.view.MotionEvent) -> a
    void setDragSlopeThreshold(float) -> e
    void onDetachedFromWindow() -> onDetachedFromWindow
com.android.launcher3.PaintCache -> com.android.launcher3.eb:
    java.lang.Object initialValue() -> a
com.android.launcher3.PendingAddItemInfo -> com.android.launcher3.ec:
    android.content.ComponentName componentName -> a
com.android.launcher3.PendingAddShortcutInfo -> com.android.launcher3.ed:
    android.content.pm.ActivityInfo shortcutActivityInfo -> b
    java.lang.String toString() -> toString
com.android.launcher3.PendingAddWidgetInfo -> com.android.launcher3.ee:
    int minWidth -> b
    int minHeight -> c
    int minResizeWidth -> v
    int minResizeHeight -> w
    int previewImage -> d
    int icon -> e
    android.appwidget.AppWidgetProviderInfo info -> s
    android.appwidget.AppWidgetHostView boundWidget -> t
    android.os.Bundle bindOptions -> u
    java.lang.String mimeType -> x
    android.os.Parcelable configurationData -> y
    java.lang.String toString() -> toString
com.android.launcher3.PreloadReceiver -> com.android.launcher3.PreloadReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.android.launcher3.PreloadReceiver$1 -> com.android.launcher3.ef:
    com.android.launcher3.LauncherProvider val$provider -> a
    int val$workspaceResId -> b
    void run() -> run
com.android.launcher3.R$styleable -> com.android.launcher3.eg:
    int[] AppsCustomizePagedView -> a
    int[] CellLayout -> b
    int[] Cling -> c
    int[] DrawableStateProxyView -> d
    int[] Extra -> e
    int[] Favorite -> f
    int[] HolographicLinearLayout -> g
    int[] Include -> h
    int[] PageIndicator -> i
    int[] PagedView -> j
    int[] Workspace -> k
com.android.launcher3.RectCache -> com.android.launcher3.eh:
    java.lang.Object initialValue() -> a
com.android.launcher3.SavedWallpaperImages -> com.android.launcher3.ei:
    java.lang.String TAG -> a
    com.android.launcher3.SavedWallpaperImages$ImageDb mDb -> b
    java.util.ArrayList mImages -> c
    android.content.Context mContext -> d
    android.view.LayoutInflater mLayoutInflater -> e
    void loadThumbnailsAndImageIdList() -> a
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.String getImageFilename(int) -> a
    android.util.Pair getImageFilenames(int) -> c
    void deleteImage(int) -> b
    void writeImage(android.graphics.Bitmap,byte[]) -> a
    java.lang.Object getItem(int) -> getItem
com.android.launcher3.SavedWallpaperImages$ImageDb -> com.android.launcher3.ej:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.android.launcher3.SavedWallpaperImages$SavedWallpaperTile -> com.android.launcher3.ek:
    int mDbId -> a
    android.graphics.drawable.Drawable mThumb -> b
    void onClick(com.android.launcher3.WallpaperPickerActivity) -> a
    void onSave(com.android.launcher3.WallpaperPickerActivity) -> b
    void onDelete(com.android.launcher3.WallpaperPickerActivity) -> c
    boolean isSelectable() -> a
    boolean isNamelessWallpaper() -> b
    android.graphics.drawable.Drawable access$0(com.android.launcher3.SavedWallpaperImages$SavedWallpaperTile) -> a
com.android.launcher3.ScrimView -> com.android.launcher3.ScrimView:
    void setInsets(android.graphics.Rect) -> a_
com.android.launcher3.SearchDropTargetBar -> com.android.launcher3.SearchDropTargetBar:
    android.animation.ObjectAnimator mDropTargetBarAnim -> a
    android.animation.ObjectAnimator mQSBSearchBarAnim -> b
    android.view.animation.AccelerateInterpolator sAccelerateInterpolator -> c
    boolean mIsSearchBarHidden -> d
    android.view.View mQSBSearchBar -> e
    android.view.View mDropTargetBar -> f
    com.android.launcher3.ButtonDropTarget mInfoDropTarget -> g
    com.android.launcher3.ButtonDropTarget mDeleteDropTarget -> h
    int mBarHeight -> i
    boolean mDeferOnDragEnd -> j
    android.graphics.drawable.Drawable mPreviousBackground -> k
    boolean mEnableDropDownDropTargets -> l
    void setup(com.android.launcher3.Launcher,com.android.launcher3.DragController) -> a
    void setupAnimation(android.animation.ObjectAnimator,android.view.View) -> a
    void onFinishInflate() -> onFinishInflate
    void finishAnimations() -> a
    void showSearchBar(boolean) -> a
    void hideSearchBar(boolean) -> b
    int getTransitionInDuration() -> b
    void onDragStart$355bc73c(com.android.launcher3.DragSource,java.lang.Object) -> a
    void deferOnDragEnd() -> d
    void onDragEnd() -> c
    void onSearchPackagesChanged(boolean,boolean) -> a
    android.graphics.Rect getSearchBarBounds() -> e
com.android.launcher3.SearchDropTargetBar$1 -> com.android.launcher3.el:
    android.view.View val$v -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.ShortcutAndWidgetContainer -> com.android.launcher3.em:
    int[] mTmpCellXY -> a
    android.app.WallpaperManager mWallpaperManager -> b
    boolean mIsHotseatLayout -> c
    int mCellWidth -> d
    int mCellHeight -> e
    int mWidthGap -> f
    int mHeightGap -> g
    int mCountX -> h
    boolean mInvertIfRtl -> i
    void setCellDimensions(int,int,int,int,int,int) -> a
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void onMeasure(int,int) -> onMeasure
    void setupLp(com.android.launcher3.CellLayout$LayoutParams) -> a
    void setInvertIfRtl(boolean) -> a
    void setIsHotseat(boolean) -> b
    int getCellContentWidth() -> a
    int getCellContentHeight() -> b
    void measureChild(android.view.View) -> a
    boolean invertLayoutHorizontally() -> c
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean shouldDelayChildPressedState() -> shouldDelayChildPressedState
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    void cancelLongPress() -> cancelLongPress
    void setChildrenDrawingCacheEnabled(boolean) -> setChildrenDrawingCacheEnabled
    void setChildrenDrawnWithCacheEnabled(boolean) -> setChildrenDrawnWithCacheEnabled
com.android.launcher3.ShortcutInfo -> com.android.launcher3.en:
    android.content.Intent intent -> a
    boolean customIcon -> b
    boolean usingFallbackIcon -> c
    android.content.Intent$ShortcutIconResource iconResource -> d
    android.graphics.Bitmap mIcon -> s
    int flags -> e
    android.content.Intent getIntent() -> a
    android.content.pm.PackageInfo getPackageInfo(android.content.Context,java.lang.String) -> a
    void initFlagsAndFirstInstallTime(android.content.pm.PackageInfo) -> a
    void setIcon(android.graphics.Bitmap) -> b
    android.graphics.Bitmap getIcon(com.android.launcher3.IconCache) -> a
    void updateIcon(com.android.launcher3.IconCache) -> b
    void onAddToDatabase(android.content.ContentValues) -> a
    java.lang.String toString() -> toString
com.android.launcher3.SmoothPagedView -> com.android.launcher3.eo:
    float SMOOTHING_CONSTANT -> a
    float mBaseLineFlingVelocity -> b
    float mFlingVelocityInfluence -> c
    int mScrollMode -> d
    android.view.animation.Interpolator mScrollInterpolator -> e
    void init() -> a
    void snapToDestination() -> Q
    void snapToPageWithVelocity(int,int) -> a
    void snapToPageWithVelocity(int,int,boolean) -> a
    void snapToPage(int) -> o
    void computeScroll() -> computeScroll
com.android.launcher3.SmoothPagedView$OvershootInterpolator -> com.android.launcher3.ep:
    float mTension -> a
    void setDistance(int) -> a
    void disableSettle() -> a
    float getInterpolation(float) -> getInterpolation
com.android.launcher3.SoftReferenceThreadLocal -> com.android.launcher3.eq:
    java.lang.ThreadLocal mThreadLocal -> a
    java.lang.Object initialValue() -> a
    void set(java.lang.Object) -> a
    java.lang.Object get() -> b
com.android.launcher3.SpringLoadedDragController -> com.android.launcher3.er:
    com.android.launcher3.Alarm mAlarm -> a
    com.android.launcher3.CellLayout mScreen -> b
    com.android.launcher3.Launcher mLauncher -> c
    void setAlarm(com.android.launcher3.CellLayout) -> a
    void onAlarm$763c5805() -> a
com.android.launcher3.Stats -> com.android.launcher3.es:
    com.android.launcher3.Launcher mLauncher -> a
    java.io.DataOutputStream mLog -> b
    java.util.ArrayList mIntents -> c
    java.util.ArrayList mHistogram -> d
    void recordLaunch(android.content.Intent,com.android.launcher3.ShortcutInfo) -> a
    void saveStats() -> a
    void loadStats() -> b
com.android.launcher3.ThirdPartyWallpaperPickerListAdapter -> com.android.launcher3.et:
    android.view.LayoutInflater mInflater -> a
    android.content.pm.PackageManager mPackageManager -> b
    int mIconSize -> c
    java.util.List mThirdPartyWallpaperPickers -> d
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
com.android.launcher3.ThirdPartyWallpaperPickerListAdapter$ThirdPartyWallpaperTile -> com.android.launcher3.eu:
    android.content.pm.ResolveInfo mResolveInfo -> a
    void onClick(com.android.launcher3.WallpaperPickerActivity) -> a
    android.content.pm.ResolveInfo access$0(com.android.launcher3.ThirdPartyWallpaperPickerListAdapter$ThirdPartyWallpaperTile) -> a
com.android.launcher3.ToggleWeightWatcher -> com.android.launcher3.ToggleWeightWatcher:
com.android.launcher3.UninstallShortcutReceiver -> com.android.launcher3.UninstallShortcutReceiver:
    java.util.ArrayList mUninstallQueue -> a
    boolean mUseUninstallQueue -> b
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void enableUninstallQueue() -> a
    void disableAndFlushUninstallQueue(android.content.Context) -> a
    void processUninstallShortcut(android.content.Context,com.android.launcher3.UninstallShortcutReceiver$PendingUninstallShortcutInfo) -> a
com.android.launcher3.UninstallShortcutReceiver$PendingUninstallShortcutInfo -> com.android.launcher3.ev:
    android.content.Intent data -> a
com.android.launcher3.UserInitializeReceiver -> com.android.launcher3.UserInitializeReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.android.launcher3.Utilities -> com.android.launcher3.ew:
    int sIconWidth -> c
    int sIconHeight -> d
    int sIconTextureWidth -> a
    int sIconTextureHeight -> b
    android.graphics.Paint sBlurPaint -> e
    android.graphics.Paint sGlowColorPressedPaint -> f
    android.graphics.Paint sGlowColorFocusedPaint -> g
    android.graphics.Paint sDisabledPaint -> h
    android.graphics.Rect sOldBounds -> i
    android.graphics.Canvas sCanvas -> j
    android.graphics.drawable.Drawable createIconDrawable(android.graphics.Bitmap) -> a
    void resizeIconDrawable(android.graphics.drawable.Drawable) -> a
    android.graphics.Bitmap createIconBitmap(android.graphics.Bitmap,android.content.Context) -> a
    android.graphics.Bitmap createIconBitmap(android.graphics.drawable.Drawable,android.content.Context) -> a
    android.graphics.Bitmap resampleIconBitmap(android.graphics.Bitmap,android.content.Context) -> b
    float getDescendantCoordRelativeToParent(android.view.View,android.view.View,int[],boolean) -> a
    float mapCoordInSelfToDescendent(android.view.View,android.view.View,int[]) -> a
    void initStatics(android.content.Context) -> a
    void setIconSize(int) -> a
    void scaleRectAboutCenter(android.graphics.Rect,float) -> a
    void startActivityForResultSafely(android.app.Activity,android.content.Intent,int) -> a
com.android.launcher3.WallpaperCropActivity -> com.android.launcher3.WallpaperCropActivity:
    com.android.launcher3.CropView mCropView -> a
    void onCreate(android.os.Bundle) -> onCreate
    void init() -> a
    boolean enableRotation() -> b
    java.lang.String getSharedPreferencesKey() -> c
    float wallpaperTravelToScreenWidthRatio(int,int) -> b
    android.graphics.Point getDefaultWallpaperSize(android.content.res.Resources,android.view.WindowManager) -> a
    int getRotationFromExif(java.lang.String) -> a
    int getRotationFromExif(android.content.Context,android.net.Uri) -> a
    int getRotationFromExif(android.content.res.Resources,int) -> a
    int getRotationFromExifHelper(java.lang.String,android.content.res.Resources,int,android.content.Context,android.net.Uri) -> a
    void setWallpaper(java.lang.String,boolean) -> a
    void cropImageAndSetWallpaper(android.content.res.Resources,int,boolean) -> a
    boolean isScreenLarge(android.content.res.Resources) -> a
    void cropImageAndSetWallpaper(android.net.Uri,com.android.launcher3.WallpaperCropActivity$OnBitmapCroppedHandler,boolean) -> a
    void updateWallpaperDimensions(int,int) -> a
    void suggestWallpaperDimension(android.content.res.Resources,android.content.SharedPreferences,android.view.WindowManager,android.app.WallpaperManager) -> a
    android.graphics.RectF getMaxCropRect(int,int,int,int,boolean) -> a
    android.graphics.Bitmap$CompressFormat convertExtensionToCompressFormat(java.lang.String) -> b
    java.lang.String getFileExtension(java.lang.String) -> c
com.android.launcher3.WallpaperCropActivity$1 -> com.android.launcher3.ex:
    com.android.launcher3.WallpaperCropActivity this$0 -> a
    android.net.Uri val$imageUri -> b
    void onClick(android.view.View) -> onClick
com.android.launcher3.WallpaperCropActivity$2 -> com.android.launcher3.ey:
    com.android.launcher3.WallpaperCropActivity this$0 -> a
    android.graphics.Point val$bounds -> b
    boolean val$finishActivityWhenDone -> c
    void run() -> run
com.android.launcher3.WallpaperCropActivity$3 -> com.android.launcher3.ez:
    com.android.launcher3.WallpaperCropActivity this$0 -> a
    boolean val$finishActivityWhenDone -> b
    void run() -> run
com.android.launcher3.WallpaperCropActivity$4 -> com.android.launcher3.eA:
    com.android.launcher3.WallpaperCropActivity this$0 -> a
    int val$outWidth -> b
    int val$outHeight -> c
    boolean val$finishActivityWhenDone -> d
    void run() -> run
com.android.launcher3.WallpaperCropActivity$5 -> com.android.launcher3.eB:
    android.content.SharedPreferences val$sharedPrefs -> a
    android.graphics.Point val$defaultWallpaperSize -> b
    android.app.WallpaperManager val$wallpaperManager -> c
    void run() -> run
com.android.launcher3.WallpaperCropActivity$BitmapCropTask -> com.android.launcher3.eC:
    android.net.Uri mInUri -> a
    android.content.Context mContext -> b
    java.lang.String mInFilePath -> c
    byte[] mInImageBytes -> d
    int mInResId -> e
    java.io.InputStream mInStream -> f
    android.graphics.RectF mCropBounds -> g
    int mOutWidth -> h
    int mOutHeight -> i
    int mRotation -> j
    java.lang.String mOutputFormat -> k
    boolean mSetWallpaper -> l
    boolean mSaveCroppedBitmap -> m
    android.graphics.Bitmap mCroppedBitmap -> n
    java.lang.Runnable mOnEndRunnable -> o
    android.content.res.Resources mResources -> p
    com.android.launcher3.WallpaperCropActivity$OnBitmapCroppedHandler mOnBitmapCroppedHandler -> q
    boolean mNoCrop -> r
    void init(android.graphics.RectF,int,int,int,boolean,boolean,java.lang.Runnable) -> a
    void setOnBitmapCropped(com.android.launcher3.WallpaperCropActivity$OnBitmapCroppedHandler) -> a
    void setNoCrop(boolean) -> a
    void setOnEndRunnable(java.lang.Runnable) -> a
    void regenerateInputStream() -> d
    android.graphics.Point getImageBounds() -> a
    void setCropBounds(android.graphics.RectF) -> a
    android.graphics.Bitmap getCroppedBitmap() -> b
    boolean cropBitmap() -> c
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.android.launcher3.WallpaperCropActivity$OnBitmapCroppedHandler -> com.android.launcher3.eD:
    com.android.launcher3.WallpaperPickerActivity val$a -> a
    void onBitmapCropped(byte[]) -> a
com.android.launcher3.WallpaperPickerActivity -> com.android.launcher3.WallpaperPickerActivity:
    android.view.View mSelectedThumb -> b
    boolean mIgnoreNextTap -> c
    android.view.View$OnClickListener mThumbnailOnClickListener -> d
    android.widget.LinearLayout mWallpapersView -> e
    android.view.View mWallpaperStrip -> f
    android.view.ActionMode$Callback mActionModeCallback -> g
    android.view.ActionMode mActionMode -> h
    android.view.View$OnLongClickListener mLongClickListener -> i
    java.util.ArrayList mTempWallpaperTiles -> j
    com.android.launcher3.SavedWallpaperImages mSavedImages -> k
    android.app.WallpaperInfo mLiveWallpaperInfoOnPickerLaunch -> l
    void setWallpaperStripYOffset(float) -> a
    void init() -> a
    void initializeScrollForRtl() -> g
    boolean enableRotation() -> b
    android.graphics.Bitmap getThumbnailOfLastPhoto() -> h
    void onStop() -> onStop
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void populateWallpapersFromAdapter(android.view.ViewGroup,android.widget.BaseAdapter,boolean,boolean) -> a
    void updateTileIndices() -> i
    android.graphics.Point getDefaultThumbnailSize(android.content.res.Resources) -> b
    android.graphics.Bitmap createThumbnail(android.graphics.Point,android.content.Context,android.net.Uri,byte[],android.content.res.Resources,int,int,boolean) -> b
    void addTemporaryWallpaperTile(android.net.Uri) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void setWallpaperItemPaddingToZero(android.widget.FrameLayout) -> a
    void addLongPressHandler(android.view.View) -> a
    java.util.ArrayList findBundledWallpapers() -> j
    com.android.launcher3.WallpaperPickerActivity$ResourceWallpaperInfo getDefaultWallpaperInfo() -> k
    android.util.Pair getWallpaperArrayResourceId() -> l
    java.util.ArrayList addWallpapers(android.content.res.Resources,java.lang.String,int) -> a
    com.android.launcher3.CropView getCropView() -> d
    com.android.launcher3.SavedWallpaperImages getSavedImages() -> e
    void onLiveWallpaperPickerLaunch() -> f
    android.view.View createImageTileView$76124fa1(android.view.LayoutInflater,android.view.View,android.view.ViewGroup,android.graphics.drawable.Drawable) -> a
    android.graphics.Point access$0(android.content.res.Resources) -> a
    android.graphics.Bitmap access$1(android.graphics.Point,android.content.Context,android.net.Uri,byte[],android.content.res.Resources,int,int,boolean) -> a
    android.view.View access$2(com.android.launcher3.WallpaperPickerActivity) -> a
    void access$3(com.android.launcher3.WallpaperPickerActivity,boolean) -> a
    boolean access$4(com.android.launcher3.WallpaperPickerActivity) -> b
    android.view.ActionMode access$5(com.android.launcher3.WallpaperPickerActivity) -> c
    android.view.View$OnLongClickListener access$6(com.android.launcher3.WallpaperPickerActivity) -> d
    android.view.View access$7(com.android.launcher3.WallpaperPickerActivity) -> e
    void access$8(com.android.launcher3.WallpaperPickerActivity,android.view.View) -> a
    android.view.ActionMode$Callback access$9(com.android.launcher3.WallpaperPickerActivity) -> f
    void access$10(com.android.launcher3.WallpaperPickerActivity,android.view.ActionMode) -> a
    android.widget.LinearLayout access$11(com.android.launcher3.WallpaperPickerActivity) -> g
    void access$12(com.android.launcher3.WallpaperPickerActivity,android.view.ViewGroup,android.widget.BaseAdapter,boolean,boolean) -> a
    void access$13(com.android.launcher3.WallpaperPickerActivity) -> h
    void access$14(com.android.launcher3.WallpaperPickerActivity) -> i
com.android.launcher3.WallpaperPickerActivity$1 -> com.android.launcher3.eE:
    com.android.launcher3.LauncherViewPropertyAnimator mAnim -> b
    com.android.launcher3.WallpaperPickerActivity this$0 -> a
    void onTouchDown() -> a
    void onTouchUp() -> c
    void onTap() -> b
com.android.launcher3.WallpaperPickerActivity$1$1 -> com.android.launcher3.eF:
    com.android.launcher3.WallpaperPickerActivity$1 this$1 -> a
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
    void onAnimationRepeat(android.animation.Animator) -> onAnimationRepeat
com.android.launcher3.WallpaperPickerActivity$2 -> com.android.launcher3.eG:
    com.android.launcher3.WallpaperPickerActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.android.launcher3.WallpaperPickerActivity$3 -> com.android.launcher3.eH:
    com.android.launcher3.WallpaperPickerActivity this$0 -> a
    boolean onLongClick(android.view.View) -> onLongClick
com.android.launcher3.WallpaperPickerActivity$4 -> com.android.launcher3.eI:
    com.android.launcher3.WallpaperPickerActivity this$0 -> a
    android.widget.LinearLayout val$liveWallpapersView -> b
    com.android.launcher3.LiveWallpaperListAdapter val$a -> c
    void onChanged() -> onChanged
com.android.launcher3.WallpaperPickerActivity$5 -> com.android.launcher3.eJ:
    com.android.launcher3.WallpaperPickerActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.android.launcher3.WallpaperPickerActivity$6 -> com.android.launcher3.eK:
    com.android.launcher3.WallpaperPickerActivity this$0 -> a
    boolean onCreateActionMode(android.view.ActionMode,android.view.Menu) -> onCreateActionMode
    boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu) -> onPrepareActionMode
    boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem) -> onActionItemClicked
    void onDestroyActionMode(android.view.ActionMode) -> onDestroyActionMode
com.android.launcher3.WallpaperPickerActivity$7 -> com.android.launcher3.eL:
    com.android.launcher3.WallpaperPickerActivity this$0 -> a
    android.widget.HorizontalScrollView val$scroll -> b
    void onGlobalLayout() -> onGlobalLayout
com.android.launcher3.WallpaperPickerActivity$BuiltInWallpapersAdapter -> com.android.launcher3.eM:
    android.view.LayoutInflater mLayoutInflater -> a
    java.util.ArrayList mWallpapers -> b
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
com.android.launcher3.WallpaperPickerActivity$PickImageInfo -> com.android.launcher3.eN:
    void onClick(com.android.launcher3.WallpaperPickerActivity) -> a
com.android.launcher3.WallpaperPickerActivity$ResourceWallpaperInfo -> com.android.launcher3.eO:
    android.content.res.Resources mResources -> a
    int mResId -> b
    android.graphics.drawable.Drawable mThumb -> c
    void onClick(com.android.launcher3.WallpaperPickerActivity) -> a
    void onSave(com.android.launcher3.WallpaperPickerActivity) -> b
    boolean isSelectable() -> a
    boolean isNamelessWallpaper() -> b
    android.graphics.drawable.Drawable access$0(com.android.launcher3.WallpaperPickerActivity$ResourceWallpaperInfo) -> a
com.android.launcher3.WallpaperPickerActivity$UriWallpaperInfo -> com.android.launcher3.eP:
    android.net.Uri mUri -> a
    void onClick(com.android.launcher3.WallpaperPickerActivity) -> a
    void onSave(com.android.launcher3.WallpaperPickerActivity) -> b
    boolean isSelectable() -> a
    boolean isNamelessWallpaper() -> b
com.android.launcher3.WallpaperPickerActivity$WallpaperTileInfo -> com.android.launcher3.eQ:
    android.view.View mView -> a
    void setView(android.view.View) -> a
    void onClick(com.android.launcher3.WallpaperPickerActivity) -> a
    void onSave(com.android.launcher3.WallpaperPickerActivity) -> b
    void onDelete(com.android.launcher3.WallpaperPickerActivity) -> c
    boolean isSelectable() -> a
    boolean isNamelessWallpaper() -> b
    void onIndexUpdated(java.lang.CharSequence) -> a
com.android.launcher3.WallpaperPickerActivity$ZeroPaddingDrawable -> com.android.launcher3.eR:
    boolean getPadding(android.graphics.Rect) -> getPadding
com.android.launcher3.WallpaperRootView -> com.android.launcher3.WallpaperRootView:
    com.android.launcher3.WallpaperPickerActivity a -> a
    boolean fitSystemWindows(android.graphics.Rect) -> fitSystemWindows
com.android.launcher3.WeightWatcher -> com.android.launcher3.eS:
    android.os.Handler mHandler -> a
    com.android.launcher3.MemoryTracker mMemoryService -> b
    int indexOf(int[],int) -> a
    void initViews() -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    com.android.launcher3.MemoryTracker access$0(com.android.launcher3.WeightWatcher) -> a
    void access$1(com.android.launcher3.WeightWatcher,com.android.launcher3.MemoryTracker) -> a
com.android.launcher3.WeightWatcher$1 -> com.android.launcher3.eT:
    com.android.launcher3.WeightWatcher this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.android.launcher3.WeightWatcher$2 -> com.android.launcher3.eU:
    com.android.launcher3.WeightWatcher this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.android.launcher3.WeightWatcher$ProcessWatcher -> com.android.launcher3.eV:
    com.android.launcher3.WeightWatcher$ProcessWatcher$GraphView mRamGraph -> a
    android.widget.TextView mText -> b
    int mPid -> c
    com.android.launcher3.MemoryTracker$ProcessMemInfo mMemInfo -> d
    com.android.launcher3.WeightWatcher this$0 -> e
    void setPid(int) -> a
    int getPid() -> a
    void update() -> b
    com.android.launcher3.MemoryTracker$ProcessMemInfo access$0(com.android.launcher3.WeightWatcher$ProcessWatcher) -> a
com.android.launcher3.WeightWatcher$ProcessWatcher$GraphView -> com.android.launcher3.eW:
    android.graphics.Paint pssPaint -> a
    android.graphics.Paint ussPaint -> b
    android.graphics.Paint headPaint -> c
    com.android.launcher3.WeightWatcher$ProcessWatcher this$1 -> d
    void onDraw(android.graphics.Canvas) -> onDraw
com.android.launcher3.WidgetAdder -> com.android.launcher3.eX:
com.android.launcher3.WidgetPreviewLoader -> com.android.launcher3.eY:
    int mPreviewBitmapWidth -> a
    int mPreviewBitmapHeight -> b
    java.lang.String mSize -> c
    android.content.Context mContext -> d
    android.content.pm.PackageManager mPackageManager -> e
    com.android.launcher3.PagedViewCellLayout mWidgetSpacingLayout -> f
    com.android.launcher3.BitmapCache mCachedShortcutPreviewBitmap -> g
    com.android.launcher3.PaintCache mCachedShortcutPreviewPaint -> h
    com.android.launcher3.CanvasCache mCachedShortcutPreviewCanvas -> i
    com.android.launcher3.CanvasCache mCachedAppWidgetPreviewCanvas -> j
    com.android.launcher3.RectCache mCachedAppWidgetPreviewSrcRect -> k
    com.android.launcher3.RectCache mCachedAppWidgetPreviewDestRect -> l
    com.android.launcher3.PaintCache mCachedAppWidgetPreviewPaint -> m
    java.lang.String mCachedSelectQuery -> n
    com.android.launcher3.BitmapFactoryOptionsCache mCachedBitmapFactoryOptions -> o
    int mAppIconSize -> p
    com.android.launcher3.IconCache mIconCache -> q
    com.android.launcher3.WidgetPreviewLoader$CacheDb mDb -> r
    java.util.HashMap mLoadedPreviews -> s
    java.util.ArrayList mUnusedBitmaps -> t
    java.util.HashSet sInvalidPackages -> u
    void setPreviewSize(int,int,com.android.launcher3.PagedViewCellLayout) -> a
    android.graphics.Bitmap getPreview(java.lang.Object) -> a
    void recycleBitmap(java.lang.Object,android.graphics.Bitmap) -> a
    java.lang.String getObjectName(java.lang.Object) -> b
    void removePackageFromDb(com.android.launcher3.WidgetPreviewLoader$CacheDb,java.lang.String) -> a
    android.graphics.Bitmap readFromDb(java.lang.String,android.graphics.Bitmap) -> a
    int maxWidthForWidgetPreview(int) -> a
    android.graphics.Bitmap generateWidgetPreview(android.content.ComponentName,int,int,int,int,int,int,android.graphics.Bitmap,int[]) -> a
    void renderDrawableToBitmap(android.graphics.drawable.Drawable,android.graphics.Bitmap,int,int,int,int) -> a
    void access$0(com.android.launcher3.WidgetPreviewLoader,java.lang.Object,android.graphics.Bitmap) -> a
    java.util.HashSet access$1() -> a
com.android.launcher3.WidgetPreviewLoader$1 -> com.android.launcher3.eZ:
    com.android.launcher3.WidgetPreviewLoader this$0 -> a
    java.lang.Object val$o -> b
    android.graphics.Bitmap val$generatedPreview -> c
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.android.launcher3.WidgetPreviewLoader$2 -> com.android.launcher3.fa:
    com.android.launcher3.WidgetPreviewLoader$CacheDb val$cacheDb -> a
    java.lang.String val$packageName -> b
    java.lang.Void doInBackground$10299ca() -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.android.launcher3.WidgetPreviewLoader$3 -> com.android.launcher3.fb:
    com.android.launcher3.WidgetPreviewLoader$CacheDb val$cacheDb -> a
    java.lang.String val$objectName -> b
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.android.launcher3.WidgetPreviewLoader$CacheDb -> com.android.launcher3.fc:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.android.launcher3.Workspace -> com.android.launcher3.Workspace:
    android.animation.ObjectAnimator mChildrenOutlineFadeInAnimation -> d
    android.animation.ObjectAnimator mChildrenOutlineFadeOutAnimation -> e
    float mChildrenOutlineAlpha -> R
    android.animation.ValueAnimator mBackgroundFadeOutAnimation -> S
    android.graphics.drawable.Drawable mBackground -> T
    boolean mDrawBackground -> U
    float mBackgroundAlpha -> V
    long mTouchDownTime -> W
    long mCustomContentShowTime -> aa
    android.animation.LayoutTransition mLayoutTransition -> ab
    android.app.WallpaperManager mWallpaperManager -> ac
    android.os.IBinder mWindowToken -> ad
    int mOriginalDefaultPage -> ae
    int mDefaultPage -> af
    com.android.launcher3.ShortcutAndWidgetContainer mDragSourceInternal -> ag
    boolean sAccessibilityEnabled -> ah
    java.util.HashMap mWorkspaceScreens -> ai
    java.util.ArrayList mScreenOrder -> aj
    com.android.launcher3.CellLayout$CellInfo mDragInfo -> ak
    int[] mTargetCell -> al
    int mDragOverX -> am
    int mDragOverY -> an
    android.graphics.Rect mLandscapeCellLayoutMetrics -> ao
    android.graphics.Rect mPortraitCellLayoutMetrics -> ap
    com.android.launcher3.Launcher$CustomContentCallbacks mCustomContentCallbacks -> aq
    boolean mCustomContentShowing -> ar
    float mLastCustomContentScrollProgress -> as
    java.lang.String mCustomContentDescription -> at
    com.android.launcher3.CellLayout mDragTargetLayout -> au
    com.android.launcher3.CellLayout mDragOverlappingLayout -> av
    com.android.launcher3.CellLayout mDropToLayout -> aw
    com.android.launcher3.Launcher mLauncher -> ax
    com.android.launcher3.IconCache mIconCache -> ay
    com.android.launcher3.DragController mDragController -> az
    int[] mTempCell -> aA
    int[] mTempPt -> aB
    float[] mDragViewVisualCenter -> aC
    float[] mTempCellLayoutCenterCoordinates -> aD
    android.graphics.Matrix mTempInverseMatrix -> aE
    com.android.launcher3.SpringLoadedDragController mSpringLoadedDragController -> aF
    float mSpringLoadedShrinkFactor -> aG
    float mOverviewModeShrinkFactor -> aH
    int mOverviewModePageOffset -> aI
    com.android.launcher3.Workspace$State mState -> aJ
    boolean mIsSwitchingState -> aK
    boolean mAnimatingViewIntoPlace -> a
    boolean mIsDragOccuring -> b
    boolean mChildrenLayersEnabled -> aL
    boolean mStripScreensOnPageStopMoving -> aM
    boolean mInScrollArea -> aN
    com.android.launcher3.HolographicOutlineHelper mOutlineHelper -> aO
    android.graphics.Bitmap mDragOutline -> aP
    android.graphics.Rect mTempRect -> aQ
    int[] mTempXY -> aR
    int[] mTempVisiblePagesRange -> aS
    boolean mOverscrollTransformsSet -> aT
    float mLastOverscrollPivotX -> aU
    boolean mWorkspaceFadeInAdjacentScreens -> aV
    com.android.launcher3.Workspace$WallpaperOffsetInterpolator mWallpaperOffset -> c
    java.lang.Runnable mDelayedResizeRunnable -> aW
    java.lang.Runnable mDelayedSnapToPageRunnable -> aX
    android.graphics.Point mDisplaySize -> aY
    int mCameraDistance -> aZ
    com.android.launcher3.Alarm mFolderCreationAlarm -> ba
    com.android.launcher3.Alarm mReorderAlarm -> bb
    com.android.launcher3.FolderIcon$FolderRingAnimator mDragFolderRingAnimator -> bc
    com.android.launcher3.FolderIcon mDragOverFolderIcon -> bd
    boolean mCreateUserFolderOnDrop -> be
    boolean mAddToExistingFolderOnDrop -> bf
    com.android.launcher3.DropTarget$DragEnforcer mDragEnforcer -> bg
    float mMaxDistanceForFolderCreation -> bh
    float mXDown -> bi
    float mYDown -> bj
    int mDragMode -> bk
    int mLastReorderX -> bl
    int mLastReorderY -> bm
    android.util.SparseArray mSavedStates -> bn
    java.util.ArrayList mRestoredPages -> bo
    int mSavedScrollX -> bp
    float mSavedRotationY -> bq
    float mSavedTranslationX -> br
    float mCurrentScale -> bs
    float mNewScale -> bt
    float[] mOldBackgroundAlphas -> bu
    float[] mOldAlphas -> bv
    float[] mNewBackgroundAlphas -> bw
    float[] mNewAlphas -> bx
    int mLastChildCount -> by
    float mTransitionProgress -> bz
    java.lang.Runnable mDeferredAction -> bA
    boolean mDeferDropAfterUninstall -> bB
    boolean mUninstallSuccessful -> bC
    java.lang.Runnable mBindPages -> bD
    com.android.launcher3.Workspace$ZoomInInterpolator mZoomInInterpolator -> bE
    void setInsets(android.graphics.Rect) -> a_
    int[] estimateItemSize(int,int,com.android.launcher3.ItemInfo,boolean) -> a
    android.graphics.Rect estimateItemPosition$27547f65(com.android.launcher3.CellLayout,int,int,int,int) -> a
    void onDragStart$355bc73c(com.android.launcher3.DragSource,java.lang.Object) -> a
    void onDragEnd() -> c
    void enableLayoutTransitions() -> au
    void onChildViewAdded(android.view.View,android.view.View) -> onChildViewAdded
    boolean shouldDrawChild(android.view.View) -> c
    com.android.launcher3.Folder getOpenFolder() -> h
    boolean isTouchActive() -> j
    void removeAllWorkspaceScreens() -> l
    long insertNewWorkspaceScreenBeforeEmptyScreen(long) -> a
    long insertNewWorkspaceScreen(long) -> d
    long insertNewWorkspaceScreen(long,int) -> a
    void addExtraEmptyScreenOnDrag() -> m
    boolean addExtraEmptyScreen() -> n
    void removeExtraEmptyScreen() -> o
    boolean hasExtraEmptyScreen() -> V
    com.android.launcher3.CellLayout getScreenWithId(long) -> b
    long getIdForScreen(com.android.launcher3.CellLayout) -> a
    int getPageIndexForScreenId(long) -> c
    long getScreenIdForPageIndex(int) -> a
    void stripEmptyScreens() -> W
    void addInScreenFromBind(android.view.View,long,long,int,int,int,int) -> a
    void addInScreen(android.view.View,long,long,int,int,int,int,boolean) -> a
    void addInScreen(android.view.View,long,long,int,int,int,int,boolean,boolean) -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean isSwitchingState() -> X
    boolean isFinishedSwitchingState() -> Y
    void onWindowVisibilityChanged(int) -> onWindowVisibilityChanged
    boolean dispatchUnhandledMove(android.view.View,int) -> dispatchUnhandledMove
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void reinflateWidgetsIfNecessary() -> Z
    void determineScrollingStart(android.view.MotionEvent) -> b
    void onPageBeginMoving() -> F
    void onPageEndMoving() -> k
    void notifyPageSwitchListener() -> D
    com.android.launcher3.Launcher$CustomContentCallbacks getCustomContentCallbacks() -> aa
    void computeScroll() -> computeScroll
    void showOutlines() -> av
    void hideOutlines() -> aw
    void showOutlinesTemporarily() -> ab
    void setChildrenOutlineAlpha(float) -> setChildrenOutlineAlpha
    float getChildrenOutlineAlpha() -> getChildrenOutlineAlpha
    void animateBackgroundGradient(float,boolean) -> a
    void setBackgroundAlpha(float) -> setBackgroundAlpha
    float getBackgroundAlpha() -> getBackgroundAlpha
    boolean hasCustomContent() -> ac
    int numCustomPages() -> ad
    boolean isOnOrMovingToCustomContent() -> ae
    android.view.View$OnClickListener getPageIndicatorClickListener() -> r
    void screenScrolled(int) -> d
    void overScroll(float) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onResume() -> af
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    int getDescendantFocusability() -> getDescendantFocusability
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    boolean isSmall() -> ag
    void enableChildrenCache(int,int) -> c
    void updateChildrenLayersEnabled(boolean) -> d
    void enableHwLayersOnVisiblePages() -> ax
    void buildPageHardwareLayers() -> ah
    void onDragStartedWithItem(android.view.View) -> a
    void onDragStartedWithItem(com.android.launcher3.PendingAddItemInfo,android.graphics.Bitmap,boolean) -> a
    void exitWidgetResizeMode() -> ai
    android.animation.Animator getChangeStateAnimation(com.android.launcher3.Workspace$State,boolean) -> a
    void getOverviewModePages(int[]) -> a
    void onStartReordering() -> T
    void onEndReordering() -> U
    boolean isInOverviewMode() -> aj
    boolean enterOverviewMode() -> ak
    void exitOverviewMode(boolean) -> a
    void exitOverviewMode(int,boolean) -> d
    void enableOverviewMode(boolean,int,boolean) -> a
    boolean shouldVoiceButtonProxyBeVisible() -> al
    void updateInteractionForState() -> am
    android.animation.Animator getChangeStateAnimation(com.android.launcher3.Workspace$State,boolean,int,int) -> a
    void onLauncherTransitionPrepare(com.android.launcher3.Launcher,boolean,boolean) -> a
    void onLauncherTransitionStart$f0a0f3a(com.android.launcher3.Launcher,boolean) -> a
    void onLauncherTransitionStep$29c633c6(float) -> a
    void onLauncherTransitionEnd(com.android.launcher3.Launcher,boolean,boolean) -> b
    void onTransitionPrepare() -> ay
    void onTransitionEnd() -> az
    android.view.View getContent() -> e
    void drawDragView(android.view.View,android.graphics.Canvas,int,boolean) -> a
    android.graphics.Bitmap createDragOutline(android.view.View,android.graphics.Canvas,int) -> a
    void startDrag(com.android.launcher3.CellLayout$CellInfo) -> a
    void beginDragShared(android.view.View,com.android.launcher3.DragSource) -> a
    void addApplicationShortcut$191d1acb(com.android.launcher3.ShortcutInfo,com.android.launcher3.CellLayout,long,long,boolean,int,int) -> a
    boolean acceptDrop(com.android.launcher3.DropTarget$DragObject) -> a
    boolean willCreateUserFolder(com.android.launcher3.ItemInfo,com.android.launcher3.CellLayout,int[],float,boolean) -> a
    boolean willAddToExistingUserFolder(java.lang.Object,com.android.launcher3.CellLayout,int[],float) -> a
    boolean createUserFolderIfNecessary(android.view.View,long,com.android.launcher3.CellLayout,int[],float,boolean,com.android.launcher3.DragView,java.lang.Runnable) -> a
    boolean addToExistingFolderIfNecessary$448e2720(com.android.launcher3.CellLayout,int[],float,com.android.launcher3.DropTarget$DragObject,boolean) -> a
    void onDrop(com.android.launcher3.DropTarget$DragObject) -> b
    void setFinalScrollForPageChange(int) -> r
    void resetFinalScrollForPageChange(int) -> s
    void onDragEnter(com.android.launcher3.DropTarget$DragObject) -> c
    android.graphics.Rect getCellLayoutMetrics(com.android.launcher3.Launcher,int) -> a
    void onDragExit(com.android.launcher3.DropTarget$DragObject) -> e
    void setCurrentDropLayout(com.android.launcher3.CellLayout) -> c
    void setCurrentDragOverlappingLayout(com.android.launcher3.CellLayout) -> d
    void setCurrentDropOverCell(int,int) -> d
    void setDragMode(int) -> t
    void cleanupFolderCreation() -> aA
    void cleanupAddToFolder() -> aB
    void cleanupReorder(boolean) -> e
    void mapPointFromSelfToChild$15fefc6c(android.view.View,float[]) -> a
    boolean isPointInSelfOverHotseat(int,int,android.graphics.Rect) -> a
    void mapPointFromSelfToHotseatLayout(com.android.launcher3.Hotseat,float[]) -> a
    com.android.launcher3.CellLayout findMatchingPageForDragOver$2d8b7b7c(float,float,boolean) -> a
    float[] getDragViewVisualCenter(int,int,int,int,com.android.launcher3.DragView,float[]) -> a
    boolean isDragWidget(com.android.launcher3.DropTarget$DragObject) -> f
    void onDragOver(com.android.launcher3.DropTarget$DragObject) -> d
    void getHitRectRelativeToDragLayer(android.graphics.Rect) -> a
    void animateWidgetDrop(com.android.launcher3.ItemInfo,com.android.launcher3.CellLayout,com.android.launcher3.DragView,java.lang.Runnable,int,android.view.View,boolean) -> a
    void setFinalTransitionTransform$629b2c52() -> an
    void resetTransitionTransform$629b2c52() -> ao
    com.android.launcher3.CellLayout getCurrentDropLayout() -> aC
    int getRestorePage() -> ap
    int[] findNearestArea(int,int,int,int,com.android.launcher3.CellLayout,int[]) -> a
    void setup(com.android.launcher3.DragController) -> a
    void onDropCompleted(android.view.View,com.android.launcher3.DropTarget$DragObject,boolean,boolean) -> a
    void deferCompleteDropAfterUninstallActivity() -> aq
    void onUninstallActivityReturned(boolean) -> b
    void updateItemLocationsInDatabase(com.android.launcher3.CellLayout) -> b
    java.util.ArrayList getUniqueComponents$2b85f69b(java.util.ArrayList) -> a
    void getUniqueIntents(com.android.launcher3.CellLayout,java.util.ArrayList,java.util.ArrayList,boolean) -> a
    void onFlingToDelete$3d9b6c68(com.android.launcher3.DropTarget$DragObject,android.graphics.PointF) -> a
    void onFlingToDeleteCompleted() -> f
    boolean isDropEnabled() -> b
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
    void restoreInstanceStateForChild(int) -> u
    void restoreInstanceStateForRemainingPages() -> ar
    void scrollLeft() -> c_
    void scrollRight() -> d_
    boolean onEnterScrollArea(int,int,int) -> a
    boolean onExitScrollArea() -> g
    com.android.launcher3.CellLayout getParentCellLayoutForView(android.view.View) -> b
    java.util.ArrayList getWorkspaceAndHotseatCellLayouts() -> aD
    java.util.ArrayList getAllShortcutAndWidgetContainers() -> aE
    com.android.launcher3.Folder getFolderForTag(java.lang.Object) -> a
    android.view.View getViewForTag(java.lang.Object) -> b
    void clearDropTargets() -> as
    void removeItemsByPackageName(java.util.ArrayList) -> b
    void removeItemsByApplicationInfo(java.util.ArrayList) -> c
    void removeItemsByComponentName(java.util.HashSet) -> a
    void updateShortcuts(java.util.ArrayList) -> d
    void moveToDefaultScreen(boolean) -> c
    com.android.launcher3.PageIndicator$PageMarkerResources getPageIndicatorMarker(int) -> g
    void syncPages() -> i
    void syncPageItems(int,boolean) -> a
    java.lang.String getPageIndicatorDescription() -> q
    java.lang.String getCurrentPageDescription() -> p
    com.android.launcher3.Launcher access$0(com.android.launcher3.Workspace) -> a
    android.os.IBinder access$1(com.android.launcher3.Workspace) -> b
    android.app.WallpaperManager access$2(com.android.launcher3.Workspace) -> c
    boolean access$3() -> at
    com.android.launcher3.FolderIcon$FolderRingAnimator access$4(com.android.launcher3.Workspace) -> d
    void access$5(com.android.launcher3.Workspace,com.android.launcher3.FolderIcon$FolderRingAnimator) -> a
    float[] access$6(com.android.launcher3.Workspace) -> e
    com.android.launcher3.CellLayout access$7(com.android.launcher3.Workspace) -> f
    int[] access$8(com.android.launcher3.Workspace) -> g
    int[] access$9(com.android.launcher3.Workspace,int,int,int,int,com.android.launcher3.CellLayout,int[]) -> a
    void access$10(com.android.launcher3.Workspace,int[]) -> a
    void access$11(com.android.launcher3.Workspace,int) -> a
    void access$12(com.android.launcher3.Workspace,int) -> b
    android.graphics.Bitmap access$13(com.android.launcher3.Workspace) -> h
    void access$14(com.android.launcher3.Workspace) -> i
    float[] access$15(com.android.launcher3.Workspace) -> j
    float[] access$16(com.android.launcher3.Workspace) -> k
    void access$17(com.android.launcher3.Workspace,java.lang.Runnable) -> a
    void access$18(com.android.launcher3.Workspace,boolean) -> a
    void access$19(com.android.launcher3.Workspace,java.lang.Runnable) -> b
com.android.launcher3.Workspace$1 -> com.android.launcher3.fd:
    com.android.launcher3.Workspace this$0 -> a
    void run() -> run
com.android.launcher3.Workspace$10 -> com.android.launcher3.fe:
    com.android.launcher3.Workspace this$0 -> a
    void run() -> run
com.android.launcher3.Workspace$11 -> com.android.launcher3.ff:
    com.android.launcher3.Workspace this$0 -> a
    com.android.launcher3.PendingAddItemInfo val$pendingInfo -> b
    com.android.launcher3.ItemInfo val$item -> c
    long val$container -> d
    long val$screenId -> e
    void run() -> run
com.android.launcher3.Workspace$12 -> com.android.launcher3.fg:
    android.view.View val$finalView -> a
    java.lang.Runnable val$onCompleteRunnable -> b
    void run() -> run
com.android.launcher3.Workspace$13 -> com.android.launcher3.fh:
    com.android.launcher3.Workspace this$0 -> a
    android.view.View val$target -> b
    com.android.launcher3.DropTarget$DragObject val$d -> c
    boolean val$isFlingToDelete -> d
    boolean val$success -> e
    void run() -> run
com.android.launcher3.Workspace$14 -> com.android.launcher3.fi:
    java.util.HashSet val$packageNames -> a
    java.util.HashSet val$cns -> b
    boolean filterItem(com.android.launcher3.ItemInfo,com.android.launcher3.ItemInfo,android.content.ComponentName) -> a
com.android.launcher3.Workspace$15 -> com.android.launcher3.fj:
    java.util.HashSet val$componentNames -> a
    java.util.HashMap val$folderAppsToRemove -> b
    java.util.ArrayList val$childrenToRemove -> c
    java.util.HashMap val$children -> d
    boolean filterItem(com.android.launcher3.ItemInfo,com.android.launcher3.ItemInfo,android.content.ComponentName) -> a
com.android.launcher3.Workspace$2 -> com.android.launcher3.fk:
    com.android.launcher3.Workspace this$0 -> a
    void run() -> run
com.android.launcher3.Workspace$3 -> com.android.launcher3.fl:
    com.android.launcher3.Workspace this$0 -> a
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
com.android.launcher3.Workspace$4 -> com.android.launcher3.fm:
    com.android.launcher3.Workspace this$0 -> a
    void onClick(android.view.View) -> onClick
com.android.launcher3.Workspace$5 -> com.android.launcher3.fn:
    com.android.launcher3.Workspace this$0 -> a
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
com.android.launcher3.Workspace$6 -> com.android.launcher3.fo:
    com.android.launcher3.Workspace this$0 -> a
    com.android.launcher3.CellLayout val$cl -> b
    int val$i -> c
    void onAnimationUpdate(float,float) -> a
com.android.launcher3.Workspace$7 -> com.android.launcher3.fp:
    com.android.launcher3.Workspace this$0 -> a
    com.android.launcher3.ItemInfo val$info -> b
    com.android.launcher3.LauncherAppWidgetHostView val$hostView -> c
    com.android.launcher3.CellLayout val$cellLayout -> d
    void run() -> run
com.android.launcher3.Workspace$8 -> com.android.launcher3.fq:
    com.android.launcher3.Workspace this$0 -> a
    java.lang.Runnable val$addResizeFrame -> b
    void run() -> run
com.android.launcher3.Workspace$9 -> com.android.launcher3.fr:
    com.android.launcher3.Workspace this$0 -> a
    java.lang.Runnable val$finalResizeRunnable -> b
    void run() -> run
com.android.launcher3.Workspace$AlphaUpdateListener -> com.android.launcher3.fs:
    android.view.View view -> a
    void onAnimationUpdate(android.animation.ValueAnimator) -> onAnimationUpdate
    void updateVisibility(android.view.View) -> a
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationRepeat(android.animation.Animator) -> onAnimationRepeat
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
com.android.launcher3.Workspace$FolderCreationAlarmListener -> com.android.launcher3.ft:
    com.android.launcher3.CellLayout layout -> a
    int cellX -> b
    int cellY -> c
    com.android.launcher3.Workspace this$0 -> d
    void onAlarm$763c5805() -> a
com.android.launcher3.Workspace$InverseZInterpolator -> com.android.launcher3.fu:
    com.android.launcher3.Workspace$ZInterpolator zInterpolator -> a
    float getInterpolation(float) -> getInterpolation
com.android.launcher3.Workspace$ReorderAlarmListener -> com.android.launcher3.fv:
    int minSpanX -> a
    int minSpanY -> b
    int spanX -> c
    int spanY -> d
    com.android.launcher3.DragView dragView -> e
    android.view.View child -> f
    com.android.launcher3.Workspace this$0 -> g
    void onAlarm$763c5805() -> a
com.android.launcher3.Workspace$State -> com.android.launcher3.fw:
    com.android.launcher3.Workspace$State NORMAL -> a
    com.android.launcher3.Workspace$State SPRING_LOADED -> b
    com.android.launcher3.Workspace$State SMALL -> c
    com.android.launcher3.Workspace$State OVERVIEW -> d
com.android.launcher3.Workspace$WallpaperOffsetInterpolator -> com.android.launcher3.fx:
    float mFinalOffset -> a
    float mCurrentOffset -> b
    boolean mWaitingForUpdate -> c
    android.view.Choreographer mChoreographer -> d
    android.view.animation.Interpolator mInterpolator -> e
    boolean mAnimating -> f
    long mAnimationStartTime -> g
    float mAnimationStartOffset -> h
    int mNumScreens -> i
    com.android.launcher3.Workspace this$0 -> j
    void doFrame(long) -> doFrame
    void updateOffset(boolean) -> a
    int numEmptyScreensToIgnore() -> c
    int getNumScreensExcludingEmptyAndCustom() -> d
    void syncWithScroll() -> a
    void scheduleUpdate() -> e
    void jumpToFinal() -> b
com.android.launcher3.Workspace$ZInterpolator -> com.android.launcher3.fy:
    float focalLength -> a
    float getInterpolation(float) -> getInterpolation
com.android.launcher3.Workspace$ZoomInInterpolator -> com.android.launcher3.fz:
    com.android.launcher3.Workspace$InverseZInterpolator inverseZInterpolator -> a
    android.view.animation.DecelerateInterpolator decelerate -> b
    float getInterpolation(float) -> getInterpolation
com.android.launcher3.Workspace$ZoomOutInterpolator -> com.android.launcher3.fA:
    android.view.animation.DecelerateInterpolator decelerate -> a
    com.android.launcher3.Workspace$ZInterpolator zInterpolator -> b
    float getInterpolation(float) -> getInterpolation
com.android.photos.BitmapRegionTileSource -> com.android.b.a:
    boolean REUSE_BITMAP -> a
    android.graphics.BitmapRegionDecoder mDecoder -> b
    int mWidth -> c
    int mHeight -> d
    int mTileSize -> e
    com.android.gallery3d.glrenderer.BasicTexture mPreview -> f
    int mRotation -> g
    android.graphics.Rect mWantRegion -> h
    android.graphics.Rect mOverlapRegion -> i
    android.graphics.BitmapFactory$Options mOptions -> j
    android.graphics.Canvas mCanvas -> k
    int getTileSize() -> a
    int getImageWidth() -> b
    int getImageHeight() -> c
    com.android.gallery3d.glrenderer.BasicTexture getPreview() -> d
    int getRotation() -> e
    android.graphics.Bitmap getTile(int,int,int,android.graphics.Bitmap) -> a
    android.graphics.Bitmap decodePreview(android.content.res.Resources,android.content.Context,java.lang.String,android.net.Uri,int,int) -> a
com.android.photos.views.TiledImageRenderer -> com.android.b.a.a:
    android.util.Pools sTilePool$383615b1 -> d
    int mTileSize -> e
    com.android.photos.views.TiledImageRenderer$TileSource mModel -> f
    com.android.gallery3d.glrenderer.BasicTexture mPreview -> g
    int mLevelCount -> a
    int mLevel -> h
    int mOffsetX -> i
    int mOffsetY -> j
    int mUploadQuota -> k
    boolean mRenderComplete -> l
    android.graphics.RectF mSourceRect -> m
    android.graphics.RectF mTargetRect -> n
    android.support.v4.util.LongSparseArray mActiveTiles -> o
    java.lang.Object mQueueLock -> p
    com.android.photos.views.TiledImageRenderer$TileQueue mRecycledQueue -> q
    com.android.photos.views.TiledImageRenderer$TileQueue mUploadQueue -> r
    com.android.photos.views.TiledImageRenderer$TileQueue mDecodeQueue -> s
    int mImageWidth -> b
    int mImageHeight -> c
    int mCenterX -> t
    int mCenterY -> u
    float mScale -> v
    int mRotation -> w
    boolean mLayoutTiles -> x
    android.graphics.Rect mTileRange -> y
    android.graphics.Rect[] mActiveRange -> z
    com.android.photos.views.TiledImageRenderer$TileDecoder mTileDecoder -> A
    boolean mBackgroundTileUploaded -> B
    int mViewWidth -> C
    int mViewHeight -> D
    android.view.View mParent -> E
    int suggestedTileSize(android.content.Context) -> a
    void setModel(com.android.photos.views.TiledImageRenderer$TileSource,int) -> a
    void setViewSize(int,int) -> a
    void setPosition(int,int,float) -> a
    void invalidateTiles() -> c
    void getRange(android.graphics.Rect,int,int,int,float,int) -> a
    void freeTextures() -> a
    boolean draw(com.android.gallery3d.glrenderer.GLCanvas) -> a
    void uploadBackgroundTiles$72bc9e1e() -> d
    void queueForDecode(com.android.photos.views.TiledImageRenderer$Tile) -> a
    com.android.photos.views.TiledImageRenderer$Tile obtainTile(int,int,int) -> a
    void recycleTile(com.android.photos.views.TiledImageRenderer$Tile) -> b
    com.android.photos.views.TiledImageRenderer$Tile getTile(int,int,int) -> b
    long makeTileKey(int,int,int) -> c
    boolean drawTile(com.android.photos.views.TiledImageRenderer$Tile,com.android.gallery3d.glrenderer.GLCanvas,android.graphics.RectF,android.graphics.RectF) -> a
    android.util.Pools access$0$78af03d0() -> b
    int access$1(com.android.photos.views.TiledImageRenderer) -> a
    com.android.photos.views.TiledImageRenderer$TileSource access$2(com.android.photos.views.TiledImageRenderer) -> b
    com.android.photos.views.TiledImageRenderer$Tile access$3(com.android.photos.views.TiledImageRenderer,int,int,int) -> a
    int access$4(com.android.photos.views.TiledImageRenderer) -> c
    java.lang.Object access$5(com.android.photos.views.TiledImageRenderer) -> d
    com.android.photos.views.TiledImageRenderer$TileQueue access$6(com.android.photos.views.TiledImageRenderer) -> e
    void access$7(com.android.photos.views.TiledImageRenderer,com.android.photos.views.TiledImageRenderer$Tile) -> a
com.android.photos.views.TiledImageRenderer$Tile -> com.android.b.a.b:
    int mX -> e
    int mY -> f
    int mTileLevel -> g
    com.android.photos.views.TiledImageRenderer$Tile mNext -> h
    android.graphics.Bitmap mDecodedTile -> i
    int mTileState -> j
    com.android.photos.views.TiledImageRenderer this$0 -> k
    void onFreeBitmap(android.graphics.Bitmap) -> a
    boolean decode() -> o
    android.graphics.Bitmap onGetBitmap() -> a_
    int getTextureWidth() -> e
    int getTextureHeight() -> f
    void update(int,int,int) -> a
    com.android.photos.views.TiledImageRenderer$Tile getParentTile() -> p
    java.lang.String toString() -> toString
com.android.photos.views.TiledImageRenderer$TileDecoder -> com.android.b.a.c:
    com.android.photos.views.TiledImageRenderer this$0 -> a
    void finishAndWait() -> a
    com.android.photos.views.TiledImageRenderer$Tile waitForTile() -> b
    void run() -> run
com.android.photos.views.TiledImageRenderer$TileQueue -> com.android.b.a.d:
    com.android.photos.views.TiledImageRenderer$Tile mHead -> a
    com.android.photos.views.TiledImageRenderer$Tile pop() -> a
    boolean push(com.android.photos.views.TiledImageRenderer$Tile) -> a
    void clean() -> b
com.android.photos.views.TiledImageRenderer$TileSource -> com.android.b.a.e:
    int getTileSize() -> a
    int getImageWidth() -> b
    int getImageHeight() -> c
    int getRotation() -> e
    com.android.gallery3d.glrenderer.BasicTexture getPreview() -> d
    android.graphics.Bitmap getTile(int,int,int,android.graphics.Bitmap) -> a
com.android.photos.views.TiledImageView -> com.android.b.a.f:
    boolean IS_SUPPORTED -> c
    boolean USE_CHOREOGRAPHER -> d
    android.opengl.GLSurfaceView mGLSurfaceView -> e
    boolean mInvalPending -> f
    android.view.Choreographer$FrameCallback mFrameCallback -> g
    java.lang.Object mLock -> a
    com.android.photos.views.TiledImageView$ImageRendererWrapper mRenderer -> b
    void setTileSource(com.android.photos.views.TiledImageRenderer$TileSource,java.lang.Runnable) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void updateScaleIfNecessaryLocked(com.android.photos.views.TiledImageView$ImageRendererWrapper) -> a
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void setTranslationX(float) -> setTranslationX
    void invalidate() -> invalidate
    void access$0(com.android.photos.views.TiledImageView,boolean) -> a
    android.opengl.GLSurfaceView access$1(com.android.photos.views.TiledImageView) -> a
com.android.photos.views.TiledImageView$1 -> com.android.b.a.g:
    com.android.photos.views.TiledImageView this$0 -> a
    void run() -> run
com.android.photos.views.TiledImageView$2 -> com.android.b.a.h:
    com.android.photos.views.TiledImageView this$0 -> a
    void doFrame(long) -> doFrame
com.android.photos.views.TiledImageView$ImageRendererWrapper -> com.android.b.a.i:
    float scale -> a
    int centerX -> b
    int centerY -> c
    int rotation -> d
    com.android.photos.views.TiledImageRenderer$TileSource source -> e
    java.lang.Runnable isReadyCallback -> f
    com.android.photos.views.TiledImageRenderer image -> g
com.android.photos.views.TiledImageView$TileRenderer -> com.android.b.a.j:
    com.android.gallery3d.glrenderer.GLES20Canvas mCanvas -> a
    com.android.photos.views.TiledImageView this$0 -> b
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
